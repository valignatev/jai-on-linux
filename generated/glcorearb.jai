//
// This file was auto-generated using the following command:
//
// jai generate.jai
//



__gl_glcorearb_h_ :: 1;

GL_VERSION_1_0 :: 1;

GL_DEPTH_BUFFER_BIT :: 0x00000100;
GL_STENCIL_BUFFER_BIT :: 0x00000400;
GL_COLOR_BUFFER_BIT :: 0x00004000;
GL_FALSE :: 0;
GL_TRUE :: 1;
GL_POINTS :: 0x0000;
GL_LINES :: 0x0001;
GL_LINE_LOOP :: 0x0002;
GL_LINE_STRIP :: 0x0003;
GL_TRIANGLES :: 0x0004;
GL_TRIANGLE_STRIP :: 0x0005;
GL_TRIANGLE_FAN :: 0x0006;
GL_QUADS :: 0x0007;
GL_NEVER :: 0x0200;
GL_LESS :: 0x0201;
GL_EQUAL :: 0x0202;
GL_LEQUAL :: 0x0203;
GL_GREATER :: 0x0204;
GL_NOTEQUAL :: 0x0205;
GL_GEQUAL :: 0x0206;
GL_ALWAYS :: 0x0207;
GL_ZERO :: 0;
GL_ONE :: 1;
GL_SRC_COLOR :: 0x0300;
GL_ONE_MINUS_SRC_COLOR :: 0x0301;
GL_SRC_ALPHA :: 0x0302;
GL_ONE_MINUS_SRC_ALPHA :: 0x0303;
GL_DST_ALPHA :: 0x0304;
GL_ONE_MINUS_DST_ALPHA :: 0x0305;
GL_DST_COLOR :: 0x0306;
GL_ONE_MINUS_DST_COLOR :: 0x0307;
GL_SRC_ALPHA_SATURATE :: 0x0308;
GL_NONE :: 0;
GL_FRONT_LEFT :: 0x0400;
GL_FRONT_RIGHT :: 0x0401;
GL_BACK_LEFT :: 0x0402;
GL_BACK_RIGHT :: 0x0403;
GL_FRONT :: 0x0404;
GL_BACK :: 0x0405;
GL_LEFT :: 0x0406;
GL_RIGHT :: 0x0407;
GL_FRONT_AND_BACK :: 0x0408;
GL_NO_ERROR :: 0;
GL_INVALID_ENUM :: 0x0500;
GL_INVALID_VALUE :: 0x0501;
GL_INVALID_OPERATION :: 0x0502;
GL_OUT_OF_MEMORY :: 0x0505;
GL_CW :: 0x0900;
GL_CCW :: 0x0901;
GL_POINT_SIZE :: 0x0B11;
GL_POINT_SIZE_RANGE :: 0x0B12;
GL_POINT_SIZE_GRANULARITY :: 0x0B13;
GL_LINE_SMOOTH :: 0x0B20;
GL_LINE_WIDTH :: 0x0B21;
GL_LINE_WIDTH_RANGE :: 0x0B22;
GL_LINE_WIDTH_GRANULARITY :: 0x0B23;
GL_POLYGON_MODE :: 0x0B40;
GL_POLYGON_SMOOTH :: 0x0B41;
GL_CULL_FACE :: 0x0B44;
GL_CULL_FACE_MODE :: 0x0B45;
GL_FRONT_FACE :: 0x0B46;
GL_DEPTH_RANGE :: 0x0B70;
GL_DEPTH_TEST :: 0x0B71;
GL_DEPTH_WRITEMASK :: 0x0B72;
GL_DEPTH_CLEAR_VALUE :: 0x0B73;
GL_DEPTH_FUNC :: 0x0B74;
GL_STENCIL_TEST :: 0x0B90;
GL_STENCIL_CLEAR_VALUE :: 0x0B91;
GL_STENCIL_FUNC :: 0x0B92;
GL_STENCIL_VALUE_MASK :: 0x0B93;
GL_STENCIL_FAIL :: 0x0B94;
GL_STENCIL_PASS_DEPTH_FAIL :: 0x0B95;
GL_STENCIL_PASS_DEPTH_PASS :: 0x0B96;
GL_STENCIL_REF :: 0x0B97;
GL_STENCIL_WRITEMASK :: 0x0B98;
GL_VIEWPORT :: 0x0BA2;
GL_DITHER :: 0x0BD0;
GL_BLEND_DST :: 0x0BE0;
GL_BLEND_SRC :: 0x0BE1;
GL_BLEND :: 0x0BE2;
GL_LOGIC_OP_MODE :: 0x0BF0;
GL_DRAW_BUFFER :: 0x0C01;
GL_READ_BUFFER :: 0x0C02;
GL_SCISSOR_BOX :: 0x0C10;
GL_SCISSOR_TEST :: 0x0C11;
GL_COLOR_CLEAR_VALUE :: 0x0C22;
GL_COLOR_WRITEMASK :: 0x0C23;
GL_DOUBLEBUFFER :: 0x0C32;
GL_STEREO :: 0x0C33;
GL_LINE_SMOOTH_HINT :: 0x0C52;
GL_POLYGON_SMOOTH_HINT :: 0x0C53;
GL_UNPACK_SWAP_BYTES :: 0x0CF0;
GL_UNPACK_LSB_FIRST :: 0x0CF1;
GL_UNPACK_ROW_LENGTH :: 0x0CF2;
GL_UNPACK_SKIP_ROWS :: 0x0CF3;
GL_UNPACK_SKIP_PIXELS :: 0x0CF4;
GL_UNPACK_ALIGNMENT :: 0x0CF5;
GL_PACK_SWAP_BYTES :: 0x0D00;
GL_PACK_LSB_FIRST :: 0x0D01;
GL_PACK_ROW_LENGTH :: 0x0D02;
GL_PACK_SKIP_ROWS :: 0x0D03;
GL_PACK_SKIP_PIXELS :: 0x0D04;
GL_PACK_ALIGNMENT :: 0x0D05;
GL_MAX_TEXTURE_SIZE :: 0x0D33;
GL_MAX_VIEWPORT_DIMS :: 0x0D3A;
GL_SUBPIXEL_BITS :: 0x0D50;
GL_TEXTURE_1D :: 0x0DE0;
GL_TEXTURE_2D :: 0x0DE1;
GL_TEXTURE_WIDTH :: 0x1000;
GL_TEXTURE_HEIGHT :: 0x1001;
GL_TEXTURE_BORDER_COLOR :: 0x1004;
GL_DONT_CARE :: 0x1100;
GL_FASTEST :: 0x1101;
GL_NICEST :: 0x1102;
GL_BYTE :: 0x1400;
GL_UNSIGNED_BYTE :: 0x1401;
GL_SHORT :: 0x1402;
GL_UNSIGNED_SHORT :: 0x1403;
GL_INT :: 0x1404;
GL_UNSIGNED_INT :: 0x1405;
GL_FLOAT :: 0x1406;
GL_STACK_OVERFLOW :: 0x0503;
GL_STACK_UNDERFLOW :: 0x0504;
GL_CLEAR :: 0x1500;
GL_AND :: 0x1501;
GL_AND_REVERSE :: 0x1502;
GL_COPY :: 0x1503;
GL_AND_INVERTED :: 0x1504;
GL_NOOP :: 0x1505;
GL_XOR :: 0x1506;
GL_OR :: 0x1507;
GL_NOR :: 0x1508;
GL_EQUIV :: 0x1509;
GL_INVERT :: 0x150A;
GL_OR_REVERSE :: 0x150B;
GL_COPY_INVERTED :: 0x150C;
GL_OR_INVERTED :: 0x150D;
GL_NAND :: 0x150E;
GL_SET :: 0x150F;
GL_TEXTURE :: 0x1702;
GL_COLOR :: 0x1800;
GL_DEPTH :: 0x1801;
GL_STENCIL :: 0x1802;
GL_STENCIL_INDEX :: 0x1901;
GL_DEPTH_COMPONENT :: 0x1902;
GL_RED :: 0x1903;
GL_GREEN :: 0x1904;
GL_BLUE :: 0x1905;
GL_ALPHA :: 0x1906;
GL_RGB :: 0x1907;
GL_RGBA :: 0x1908;
GL_POINT :: 0x1B00;
GL_LINE :: 0x1B01;
GL_FILL :: 0x1B02;
GL_KEEP :: 0x1E00;
GL_REPLACE :: 0x1E01;
GL_INCR :: 0x1E02;
GL_DECR :: 0x1E03;
GL_VENDOR :: 0x1F00;
GL_RENDERER :: 0x1F01;
GL_VERSION :: 0x1F02;
GL_EXTENSIONS :: 0x1F03;
GL_NEAREST :: 0x2600;
GL_LINEAR :: 0x2601;
GL_NEAREST_MIPMAP_NEAREST :: 0x2700;
GL_LINEAR_MIPMAP_NEAREST :: 0x2701;
GL_NEAREST_MIPMAP_LINEAR :: 0x2702;
GL_LINEAR_MIPMAP_LINEAR :: 0x2703;
GL_TEXTURE_MAG_FILTER :: 0x2800;
GL_TEXTURE_MIN_FILTER :: 0x2801;
GL_TEXTURE_WRAP_S :: 0x2802;
GL_TEXTURE_WRAP_T :: 0x2803;
GL_REPEAT :: 0x2901;

GL_VERSION_1_1 :: 1;

GL_COLOR_LOGIC_OP :: 0x0BF2;
GL_POLYGON_OFFSET_UNITS :: 0x2A00;
GL_POLYGON_OFFSET_POINT :: 0x2A01;
GL_POLYGON_OFFSET_LINE :: 0x2A02;
GL_POLYGON_OFFSET_FILL :: 0x8037;
GL_POLYGON_OFFSET_FACTOR :: 0x8038;
GL_TEXTURE_BINDING_1D :: 0x8068;
GL_TEXTURE_BINDING_2D :: 0x8069;
GL_TEXTURE_INTERNAL_FORMAT :: 0x1003;
GL_TEXTURE_RED_SIZE :: 0x805C;
GL_TEXTURE_GREEN_SIZE :: 0x805D;
GL_TEXTURE_BLUE_SIZE :: 0x805E;
GL_TEXTURE_ALPHA_SIZE :: 0x805F;
GL_DOUBLE :: 0x140A;
GL_PROXY_TEXTURE_1D :: 0x8063;
GL_PROXY_TEXTURE_2D :: 0x8064;
GL_R3_G3_B2 :: 0x2A10;
GL_RGB4 :: 0x804F;
GL_RGB5 :: 0x8050;
GL_RGB8 :: 0x8051;
GL_RGB10 :: 0x8052;
GL_RGB12 :: 0x8053;
GL_RGB16 :: 0x8054;
GL_RGBA2 :: 0x8055;
GL_RGBA4 :: 0x8056;
GL_RGB5_A1 :: 0x8057;
GL_RGBA8 :: 0x8058;
GL_RGB10_A2 :: 0x8059;
GL_RGBA12 :: 0x805A;
GL_RGBA16 :: 0x805B;
GL_VERTEX_ARRAY :: 0x8074;

GL_VERSION_1_2 :: 1;
GL_UNSIGNED_BYTE_3_3_2 :: 0x8032;
GL_UNSIGNED_SHORT_4_4_4_4 :: 0x8033;
GL_UNSIGNED_SHORT_5_5_5_1 :: 0x8034;
GL_UNSIGNED_INT_8_8_8_8 :: 0x8035;
GL_UNSIGNED_INT_10_10_10_2 :: 0x8036;
GL_TEXTURE_BINDING_3D :: 0x806A;
GL_PACK_SKIP_IMAGES :: 0x806B;
GL_PACK_IMAGE_HEIGHT :: 0x806C;
GL_UNPACK_SKIP_IMAGES :: 0x806D;
GL_UNPACK_IMAGE_HEIGHT :: 0x806E;
GL_TEXTURE_3D :: 0x806F;
GL_PROXY_TEXTURE_3D :: 0x8070;
GL_TEXTURE_DEPTH :: 0x8071;
GL_TEXTURE_WRAP_R :: 0x8072;
GL_MAX_3D_TEXTURE_SIZE :: 0x8073;
GL_UNSIGNED_BYTE_2_3_3_REV :: 0x8362;
GL_UNSIGNED_SHORT_5_6_5 :: 0x8363;
GL_UNSIGNED_SHORT_5_6_5_REV :: 0x8364;
GL_UNSIGNED_SHORT_4_4_4_4_REV :: 0x8365;
GL_UNSIGNED_SHORT_1_5_5_5_REV :: 0x8366;
GL_UNSIGNED_INT_8_8_8_8_REV :: 0x8367;
GL_UNSIGNED_INT_2_10_10_10_REV :: 0x8368;
GL_BGR :: 0x80E0;
GL_BGRA :: 0x80E1;
GL_MAX_ELEMENTS_VERTICES :: 0x80E8;
GL_MAX_ELEMENTS_INDICES :: 0x80E9;
GL_CLAMP_TO_EDGE :: 0x812F;
GL_TEXTURE_MIN_LOD :: 0x813A;
GL_TEXTURE_MAX_LOD :: 0x813B;
GL_TEXTURE_BASE_LEVEL :: 0x813C;
GL_TEXTURE_MAX_LEVEL :: 0x813D;
GL_SMOOTH_POINT_SIZE_RANGE :: 0x0B12;
GL_SMOOTH_POINT_SIZE_GRANULARITY :: 0x0B13;
GL_SMOOTH_LINE_WIDTH_RANGE :: 0x0B22;
GL_SMOOTH_LINE_WIDTH_GRANULARITY :: 0x0B23;
GL_ALIASED_LINE_WIDTH_RANGE :: 0x846E;

GL_VERSION_1_3 :: 1;
GL_TEXTURE0 :: 0x84C0;
GL_TEXTURE1 :: 0x84C1;
GL_TEXTURE2 :: 0x84C2;
GL_TEXTURE3 :: 0x84C3;
GL_TEXTURE4 :: 0x84C4;
GL_TEXTURE5 :: 0x84C5;
GL_TEXTURE6 :: 0x84C6;
GL_TEXTURE7 :: 0x84C7;
GL_TEXTURE8 :: 0x84C8;
GL_TEXTURE9 :: 0x84C9;
GL_TEXTURE10 :: 0x84CA;
GL_TEXTURE11 :: 0x84CB;
GL_TEXTURE12 :: 0x84CC;
GL_TEXTURE13 :: 0x84CD;
GL_TEXTURE14 :: 0x84CE;
GL_TEXTURE15 :: 0x84CF;
GL_TEXTURE16 :: 0x84D0;
GL_TEXTURE17 :: 0x84D1;
GL_TEXTURE18 :: 0x84D2;
GL_TEXTURE19 :: 0x84D3;
GL_TEXTURE20 :: 0x84D4;
GL_TEXTURE21 :: 0x84D5;
GL_TEXTURE22 :: 0x84D6;
GL_TEXTURE23 :: 0x84D7;
GL_TEXTURE24 :: 0x84D8;
GL_TEXTURE25 :: 0x84D9;
GL_TEXTURE26 :: 0x84DA;
GL_TEXTURE27 :: 0x84DB;
GL_TEXTURE28 :: 0x84DC;
GL_TEXTURE29 :: 0x84DD;
GL_TEXTURE30 :: 0x84DE;
GL_TEXTURE31 :: 0x84DF;
GL_ACTIVE_TEXTURE :: 0x84E0;
GL_MULTISAMPLE :: 0x809D;
GL_SAMPLE_ALPHA_TO_COVERAGE :: 0x809E;
GL_SAMPLE_ALPHA_TO_ONE :: 0x809F;
GL_SAMPLE_COVERAGE :: 0x80A0;
GL_SAMPLE_BUFFERS :: 0x80A8;
GL_SAMPLES :: 0x80A9;
GL_SAMPLE_COVERAGE_VALUE :: 0x80AA;
GL_SAMPLE_COVERAGE_INVERT :: 0x80AB;
GL_TEXTURE_CUBE_MAP :: 0x8513;
GL_TEXTURE_BINDING_CUBE_MAP :: 0x8514;
GL_TEXTURE_CUBE_MAP_POSITIVE_X :: 0x8515;
GL_TEXTURE_CUBE_MAP_NEGATIVE_X :: 0x8516;
GL_TEXTURE_CUBE_MAP_POSITIVE_Y :: 0x8517;
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y :: 0x8518;
GL_TEXTURE_CUBE_MAP_POSITIVE_Z :: 0x8519;
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z :: 0x851A;
GL_PROXY_TEXTURE_CUBE_MAP :: 0x851B;
GL_MAX_CUBE_MAP_TEXTURE_SIZE :: 0x851C;
GL_COMPRESSED_RGB :: 0x84ED;
GL_COMPRESSED_RGBA :: 0x84EE;
GL_TEXTURE_COMPRESSION_HINT :: 0x84EF;
GL_TEXTURE_COMPRESSED_IMAGE_SIZE :: 0x86A0;
GL_TEXTURE_COMPRESSED :: 0x86A1;
GL_NUM_COMPRESSED_TEXTURE_FORMATS :: 0x86A2;
GL_COMPRESSED_TEXTURE_FORMATS :: 0x86A3;
GL_CLAMP_TO_BORDER :: 0x812D;

GL_VERSION_1_4 :: 1;
GL_BLEND_DST_RGB :: 0x80C8;
GL_BLEND_SRC_RGB :: 0x80C9;
GL_BLEND_DST_ALPHA :: 0x80CA;
GL_BLEND_SRC_ALPHA :: 0x80CB;
GL_POINT_FADE_THRESHOLD_SIZE :: 0x8128;
GL_DEPTH_COMPONENT16 :: 0x81A5;
GL_DEPTH_COMPONENT24 :: 0x81A6;
GL_DEPTH_COMPONENT32 :: 0x81A7;
GL_MIRRORED_REPEAT :: 0x8370;
GL_MAX_TEXTURE_LOD_BIAS :: 0x84FD;
GL_TEXTURE_LOD_BIAS :: 0x8501;
GL_INCR_WRAP :: 0x8507;
GL_DECR_WRAP :: 0x8508;
GL_TEXTURE_DEPTH_SIZE :: 0x884A;
GL_TEXTURE_COMPARE_MODE :: 0x884C;
GL_TEXTURE_COMPARE_FUNC :: 0x884D;
GL_BLEND_COLOR :: 0x8005;
GL_BLEND_EQUATION :: 0x8009;
GL_CONSTANT_COLOR :: 0x8001;
GL_ONE_MINUS_CONSTANT_COLOR :: 0x8002;
GL_CONSTANT_ALPHA :: 0x8003;
GL_ONE_MINUS_CONSTANT_ALPHA :: 0x8004;
GL_FUNC_ADD :: 0x8006;
GL_FUNC_REVERSE_SUBTRACT :: 0x800B;
GL_FUNC_SUBTRACT :: 0x800A;
GL_MIN :: 0x8007;
GL_MAX :: 0x8008;

GL_VERSION_1_5 :: 1;

GL_BUFFER_SIZE :: 0x8764;
GL_BUFFER_USAGE :: 0x8765;
GL_QUERY_COUNTER_BITS :: 0x8864;
GL_CURRENT_QUERY :: 0x8865;
GL_QUERY_RESULT :: 0x8866;
GL_QUERY_RESULT_AVAILABLE :: 0x8867;
GL_ARRAY_BUFFER :: 0x8892;
GL_ELEMENT_ARRAY_BUFFER :: 0x8893;
GL_ARRAY_BUFFER_BINDING :: 0x8894;
GL_ELEMENT_ARRAY_BUFFER_BINDING :: 0x8895;
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING :: 0x889F;
GL_READ_ONLY :: 0x88B8;
GL_WRITE_ONLY :: 0x88B9;
GL_READ_WRITE :: 0x88BA;
GL_BUFFER_ACCESS :: 0x88BB;
GL_BUFFER_MAPPED :: 0x88BC;
GL_BUFFER_MAP_POINTER :: 0x88BD;
GL_STREAM_DRAW :: 0x88E0;
GL_STREAM_READ :: 0x88E1;
GL_STREAM_COPY :: 0x88E2;
GL_STATIC_DRAW :: 0x88E4;
GL_STATIC_READ :: 0x88E5;
GL_STATIC_COPY :: 0x88E6;
GL_DYNAMIC_DRAW :: 0x88E8;
GL_DYNAMIC_READ :: 0x88E9;
GL_DYNAMIC_COPY :: 0x88EA;
GL_SAMPLES_PASSED :: 0x8914;
GL_SRC1_ALPHA :: 0x8589;

GL_VERSION_2_0 :: 1;

GL_BLEND_EQUATION_RGB :: 0x8009;
GL_VERTEX_ATTRIB_ARRAY_ENABLED :: 0x8622;
GL_VERTEX_ATTRIB_ARRAY_SIZE :: 0x8623;
GL_VERTEX_ATTRIB_ARRAY_STRIDE :: 0x8624;
GL_VERTEX_ATTRIB_ARRAY_TYPE :: 0x8625;
GL_CURRENT_VERTEX_ATTRIB :: 0x8626;
GL_VERTEX_PROGRAM_POINT_SIZE :: 0x8642;
GL_VERTEX_ATTRIB_ARRAY_POINTER :: 0x8645;
GL_STENCIL_BACK_FUNC :: 0x8800;
GL_STENCIL_BACK_FAIL :: 0x8801;
GL_STENCIL_BACK_PASS_DEPTH_FAIL :: 0x8802;
GL_STENCIL_BACK_PASS_DEPTH_PASS :: 0x8803;
GL_MAX_DRAW_BUFFERS :: 0x8824;
GL_DRAW_BUFFER0 :: 0x8825;
GL_DRAW_BUFFER1 :: 0x8826;
GL_DRAW_BUFFER2 :: 0x8827;
GL_DRAW_BUFFER3 :: 0x8828;
GL_DRAW_BUFFER4 :: 0x8829;
GL_DRAW_BUFFER5 :: 0x882A;
GL_DRAW_BUFFER6 :: 0x882B;
GL_DRAW_BUFFER7 :: 0x882C;
GL_DRAW_BUFFER8 :: 0x882D;
GL_DRAW_BUFFER9 :: 0x882E;
GL_DRAW_BUFFER10 :: 0x882F;
GL_DRAW_BUFFER11 :: 0x8830;
GL_DRAW_BUFFER12 :: 0x8831;
GL_DRAW_BUFFER13 :: 0x8832;
GL_DRAW_BUFFER14 :: 0x8833;
GL_DRAW_BUFFER15 :: 0x8834;
GL_BLEND_EQUATION_ALPHA :: 0x883D;
GL_MAX_VERTEX_ATTRIBS :: 0x8869;
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED :: 0x886A;
GL_MAX_TEXTURE_IMAGE_UNITS :: 0x8872;
GL_FRAGMENT_SHADER :: 0x8B30;
GL_VERTEX_SHADER :: 0x8B31;
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS :: 0x8B49;
GL_MAX_VERTEX_UNIFORM_COMPONENTS :: 0x8B4A;
GL_MAX_VARYING_FLOATS :: 0x8B4B;
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS :: 0x8B4C;
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS :: 0x8B4D;
GL_SHADER_TYPE :: 0x8B4F;
GL_FLOAT_VEC2 :: 0x8B50;
GL_FLOAT_VEC3 :: 0x8B51;
GL_FLOAT_VEC4 :: 0x8B52;
GL_INT_VEC2 :: 0x8B53;
GL_INT_VEC3 :: 0x8B54;
GL_INT_VEC4 :: 0x8B55;
GL_BOOL :: 0x8B56;
GL_BOOL_VEC2 :: 0x8B57;
GL_BOOL_VEC3 :: 0x8B58;
GL_BOOL_VEC4 :: 0x8B59;
GL_FLOAT_MAT2 :: 0x8B5A;
GL_FLOAT_MAT3 :: 0x8B5B;
GL_FLOAT_MAT4 :: 0x8B5C;
GL_SAMPLER_1D :: 0x8B5D;
GL_SAMPLER_2D :: 0x8B5E;
GL_SAMPLER_3D :: 0x8B5F;
GL_SAMPLER_CUBE :: 0x8B60;
GL_SAMPLER_1D_SHADOW :: 0x8B61;
GL_SAMPLER_2D_SHADOW :: 0x8B62;
GL_DELETE_STATUS :: 0x8B80;
GL_COMPILE_STATUS :: 0x8B81;
GL_LINK_STATUS :: 0x8B82;
GL_VALIDATE_STATUS :: 0x8B83;
GL_INFO_LOG_LENGTH :: 0x8B84;
GL_ATTACHED_SHADERS :: 0x8B85;
GL_ACTIVE_UNIFORMS :: 0x8B86;
GL_ACTIVE_UNIFORM_MAX_LENGTH :: 0x8B87;
GL_SHADER_SOURCE_LENGTH :: 0x8B88;
GL_ACTIVE_ATTRIBUTES :: 0x8B89;
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH :: 0x8B8A;
GL_FRAGMENT_SHADER_DERIVATIVE_HINT :: 0x8B8B;
GL_SHADING_LANGUAGE_VERSION :: 0x8B8C;
GL_CURRENT_PROGRAM :: 0x8B8D;
GL_POINT_SPRITE_COORD_ORIGIN :: 0x8CA0;
GL_LOWER_LEFT :: 0x8CA1;
GL_UPPER_LEFT :: 0x8CA2;
GL_STENCIL_BACK_REF :: 0x8CA3;
GL_STENCIL_BACK_VALUE_MASK :: 0x8CA4;
GL_STENCIL_BACK_WRITEMASK :: 0x8CA5;

GL_VERSION_2_1 :: 1;
GL_PIXEL_PACK_BUFFER :: 0x88EB;
GL_PIXEL_UNPACK_BUFFER :: 0x88EC;
GL_PIXEL_PACK_BUFFER_BINDING :: 0x88ED;
GL_PIXEL_UNPACK_BUFFER_BINDING :: 0x88EF;
GL_FLOAT_MAT2x3 :: 0x8B65;
GL_FLOAT_MAT2x4 :: 0x8B66;
GL_FLOAT_MAT3x2 :: 0x8B67;
GL_FLOAT_MAT3x4 :: 0x8B68;
GL_FLOAT_MAT4x2 :: 0x8B69;
GL_FLOAT_MAT4x3 :: 0x8B6A;
GL_SRGB :: 0x8C40;
GL_SRGB8 :: 0x8C41;
GL_SRGB_ALPHA :: 0x8C42;
GL_SRGB8_ALPHA8 :: 0x8C43;
GL_COMPRESSED_SRGB :: 0x8C48;
GL_COMPRESSED_SRGB_ALPHA :: 0x8C49;

GL_VERSION_3_0 :: 1;

GL_COMPARE_REF_TO_TEXTURE :: 0x884E;
GL_CLIP_DISTANCE0 :: 0x3000;
GL_CLIP_DISTANCE1 :: 0x3001;
GL_CLIP_DISTANCE2 :: 0x3002;
GL_CLIP_DISTANCE3 :: 0x3003;
GL_CLIP_DISTANCE4 :: 0x3004;
GL_CLIP_DISTANCE5 :: 0x3005;
GL_CLIP_DISTANCE6 :: 0x3006;
GL_CLIP_DISTANCE7 :: 0x3007;
GL_MAX_CLIP_DISTANCES :: 0x0D32;
GL_MAJOR_VERSION :: 0x821B;
GL_MINOR_VERSION :: 0x821C;
GL_NUM_EXTENSIONS :: 0x821D;
GL_CONTEXT_FLAGS :: 0x821E;
GL_COMPRESSED_RED :: 0x8225;
GL_COMPRESSED_RG :: 0x8226;
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT :: 0x00000001;
GL_RGBA32F :: 0x8814;
GL_RGB32F :: 0x8815;
GL_RGBA16F :: 0x881A;
GL_RGB16F :: 0x881B;
GL_VERTEX_ATTRIB_ARRAY_INTEGER :: 0x88FD;
GL_MAX_ARRAY_TEXTURE_LAYERS :: 0x88FF;
GL_MIN_PROGRAM_TEXEL_OFFSET :: 0x8904;
GL_MAX_PROGRAM_TEXEL_OFFSET :: 0x8905;
GL_CLAMP_READ_COLOR :: 0x891C;
GL_FIXED_ONLY :: 0x891D;
GL_MAX_VARYING_COMPONENTS :: 0x8B4B;
GL_TEXTURE_1D_ARRAY :: 0x8C18;
GL_PROXY_TEXTURE_1D_ARRAY :: 0x8C19;
GL_TEXTURE_2D_ARRAY :: 0x8C1A;
GL_PROXY_TEXTURE_2D_ARRAY :: 0x8C1B;
GL_TEXTURE_BINDING_1D_ARRAY :: 0x8C1C;
GL_TEXTURE_BINDING_2D_ARRAY :: 0x8C1D;
GL_R11F_G11F_B10F :: 0x8C3A;
GL_UNSIGNED_INT_10F_11F_11F_REV :: 0x8C3B;
GL_RGB9_E5 :: 0x8C3D;
GL_UNSIGNED_INT_5_9_9_9_REV :: 0x8C3E;
GL_TEXTURE_SHARED_SIZE :: 0x8C3F;
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH :: 0x8C76;
GL_TRANSFORM_FEEDBACK_BUFFER_MODE :: 0x8C7F;
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS :: 0x8C80;
GL_TRANSFORM_FEEDBACK_VARYINGS :: 0x8C83;
GL_TRANSFORM_FEEDBACK_BUFFER_START :: 0x8C84;
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE :: 0x8C85;
GL_PRIMITIVES_GENERATED :: 0x8C87;
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN :: 0x8C88;
GL_RASTERIZER_DISCARD :: 0x8C89;
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS :: 0x8C8A;
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :: 0x8C8B;
GL_INTERLEAVED_ATTRIBS :: 0x8C8C;
GL_SEPARATE_ATTRIBS :: 0x8C8D;
GL_TRANSFORM_FEEDBACK_BUFFER :: 0x8C8E;
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING :: 0x8C8F;
GL_RGBA32UI :: 0x8D70;
GL_RGB32UI :: 0x8D71;
GL_RGBA16UI :: 0x8D76;
GL_RGB16UI :: 0x8D77;
GL_RGBA8UI :: 0x8D7C;
GL_RGB8UI :: 0x8D7D;
GL_RGBA32I :: 0x8D82;
GL_RGB32I :: 0x8D83;
GL_RGBA16I :: 0x8D88;
GL_RGB16I :: 0x8D89;
GL_RGBA8I :: 0x8D8E;
GL_RGB8I :: 0x8D8F;
GL_RED_INTEGER :: 0x8D94;
GL_GREEN_INTEGER :: 0x8D95;
GL_BLUE_INTEGER :: 0x8D96;
GL_RGB_INTEGER :: 0x8D98;
GL_RGBA_INTEGER :: 0x8D99;
GL_BGR_INTEGER :: 0x8D9A;
GL_BGRA_INTEGER :: 0x8D9B;
GL_SAMPLER_1D_ARRAY :: 0x8DC0;
GL_SAMPLER_2D_ARRAY :: 0x8DC1;
GL_SAMPLER_1D_ARRAY_SHADOW :: 0x8DC3;
GL_SAMPLER_2D_ARRAY_SHADOW :: 0x8DC4;
GL_SAMPLER_CUBE_SHADOW :: 0x8DC5;
GL_UNSIGNED_INT_VEC2 :: 0x8DC6;
GL_UNSIGNED_INT_VEC3 :: 0x8DC7;
GL_UNSIGNED_INT_VEC4 :: 0x8DC8;
GL_INT_SAMPLER_1D :: 0x8DC9;
GL_INT_SAMPLER_2D :: 0x8DCA;
GL_INT_SAMPLER_3D :: 0x8DCB;
GL_INT_SAMPLER_CUBE :: 0x8DCC;
GL_INT_SAMPLER_1D_ARRAY :: 0x8DCE;
GL_INT_SAMPLER_2D_ARRAY :: 0x8DCF;
GL_UNSIGNED_INT_SAMPLER_1D :: 0x8DD1;
GL_UNSIGNED_INT_SAMPLER_2D :: 0x8DD2;
GL_UNSIGNED_INT_SAMPLER_3D :: 0x8DD3;
GL_UNSIGNED_INT_SAMPLER_CUBE :: 0x8DD4;
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY :: 0x8DD6;
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY :: 0x8DD7;
GL_QUERY_WAIT :: 0x8E13;
GL_QUERY_NO_WAIT :: 0x8E14;
GL_QUERY_BY_REGION_WAIT :: 0x8E15;
GL_QUERY_BY_REGION_NO_WAIT :: 0x8E16;
GL_BUFFER_ACCESS_FLAGS :: 0x911F;
GL_BUFFER_MAP_LENGTH :: 0x9120;
GL_BUFFER_MAP_OFFSET :: 0x9121;
GL_DEPTH_COMPONENT32F :: 0x8CAC;
GL_DEPTH32F_STENCIL8 :: 0x8CAD;
GL_FLOAT_32_UNSIGNED_INT_24_8_REV :: 0x8DAD;
GL_INVALID_FRAMEBUFFER_OPERATION :: 0x0506;
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING :: 0x8210;
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE :: 0x8211;
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE :: 0x8212;
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE :: 0x8213;
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE :: 0x8214;
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE :: 0x8215;
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE :: 0x8216;
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE :: 0x8217;
GL_FRAMEBUFFER_DEFAULT :: 0x8218;
GL_FRAMEBUFFER_UNDEFINED :: 0x8219;
GL_DEPTH_STENCIL_ATTACHMENT :: 0x821A;
GL_MAX_RENDERBUFFER_SIZE :: 0x84E8;
GL_DEPTH_STENCIL :: 0x84F9;
GL_UNSIGNED_INT_24_8 :: 0x84FA;
GL_DEPTH24_STENCIL8 :: 0x88F0;
GL_TEXTURE_STENCIL_SIZE :: 0x88F1;
GL_TEXTURE_RED_TYPE :: 0x8C10;
GL_TEXTURE_GREEN_TYPE :: 0x8C11;
GL_TEXTURE_BLUE_TYPE :: 0x8C12;
GL_TEXTURE_ALPHA_TYPE :: 0x8C13;
GL_TEXTURE_DEPTH_TYPE :: 0x8C16;
GL_UNSIGNED_NORMALIZED :: 0x8C17;
GL_FRAMEBUFFER_BINDING :: 0x8CA6;
GL_DRAW_FRAMEBUFFER_BINDING :: 0x8CA6;
GL_RENDERBUFFER_BINDING :: 0x8CA7;
GL_READ_FRAMEBUFFER :: 0x8CA8;
GL_DRAW_FRAMEBUFFER :: 0x8CA9;
GL_READ_FRAMEBUFFER_BINDING :: 0x8CAA;
GL_RENDERBUFFER_SAMPLES :: 0x8CAB;
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :: 0x8CD0;
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :: 0x8CD1;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :: 0x8CD2;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :: 0x8CD3;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER :: 0x8CD4;
GL_FRAMEBUFFER_COMPLETE :: 0x8CD5;
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT :: 0x8CD6;
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :: 0x8CD7;
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER :: 0x8CDB;
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER :: 0x8CDC;
GL_FRAMEBUFFER_UNSUPPORTED :: 0x8CDD;
GL_MAX_COLOR_ATTACHMENTS :: 0x8CDF;
GL_COLOR_ATTACHMENT0 :: 0x8CE0;
GL_COLOR_ATTACHMENT1 :: 0x8CE1;
GL_COLOR_ATTACHMENT2 :: 0x8CE2;
GL_COLOR_ATTACHMENT3 :: 0x8CE3;
GL_COLOR_ATTACHMENT4 :: 0x8CE4;
GL_COLOR_ATTACHMENT5 :: 0x8CE5;
GL_COLOR_ATTACHMENT6 :: 0x8CE6;
GL_COLOR_ATTACHMENT7 :: 0x8CE7;
GL_COLOR_ATTACHMENT8 :: 0x8CE8;
GL_COLOR_ATTACHMENT9 :: 0x8CE9;
GL_COLOR_ATTACHMENT10 :: 0x8CEA;
GL_COLOR_ATTACHMENT11 :: 0x8CEB;
GL_COLOR_ATTACHMENT12 :: 0x8CEC;
GL_COLOR_ATTACHMENT13 :: 0x8CED;
GL_COLOR_ATTACHMENT14 :: 0x8CEE;
GL_COLOR_ATTACHMENT15 :: 0x8CEF;
GL_COLOR_ATTACHMENT16 :: 0x8CF0;
GL_COLOR_ATTACHMENT17 :: 0x8CF1;
GL_COLOR_ATTACHMENT18 :: 0x8CF2;
GL_COLOR_ATTACHMENT19 :: 0x8CF3;
GL_COLOR_ATTACHMENT20 :: 0x8CF4;
GL_COLOR_ATTACHMENT21 :: 0x8CF5;
GL_COLOR_ATTACHMENT22 :: 0x8CF6;
GL_COLOR_ATTACHMENT23 :: 0x8CF7;
GL_COLOR_ATTACHMENT24 :: 0x8CF8;
GL_COLOR_ATTACHMENT25 :: 0x8CF9;
GL_COLOR_ATTACHMENT26 :: 0x8CFA;
GL_COLOR_ATTACHMENT27 :: 0x8CFB;
GL_COLOR_ATTACHMENT28 :: 0x8CFC;
GL_COLOR_ATTACHMENT29 :: 0x8CFD;
GL_COLOR_ATTACHMENT30 :: 0x8CFE;
GL_COLOR_ATTACHMENT31 :: 0x8CFF;
GL_DEPTH_ATTACHMENT :: 0x8D00;
GL_STENCIL_ATTACHMENT :: 0x8D20;
GL_FRAMEBUFFER :: 0x8D40;
GL_RENDERBUFFER :: 0x8D41;
GL_RENDERBUFFER_WIDTH :: 0x8D42;
GL_RENDERBUFFER_HEIGHT :: 0x8D43;
GL_RENDERBUFFER_INTERNAL_FORMAT :: 0x8D44;
GL_STENCIL_INDEX1 :: 0x8D46;
GL_STENCIL_INDEX4 :: 0x8D47;
GL_STENCIL_INDEX8 :: 0x8D48;
GL_STENCIL_INDEX16 :: 0x8D49;
GL_RENDERBUFFER_RED_SIZE :: 0x8D50;
GL_RENDERBUFFER_GREEN_SIZE :: 0x8D51;
GL_RENDERBUFFER_BLUE_SIZE :: 0x8D52;
GL_RENDERBUFFER_ALPHA_SIZE :: 0x8D53;
GL_RENDERBUFFER_DEPTH_SIZE :: 0x8D54;
GL_RENDERBUFFER_STENCIL_SIZE :: 0x8D55;
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE :: 0x8D56;
GL_MAX_SAMPLES :: 0x8D57;
GL_FRAMEBUFFER_SRGB :: 0x8DB9;
GL_HALF_FLOAT :: 0x140B;
GL_MAP_READ_BIT :: 0x0001;
GL_MAP_WRITE_BIT :: 0x0002;
GL_MAP_INVALIDATE_RANGE_BIT :: 0x0004;
GL_MAP_INVALIDATE_BUFFER_BIT :: 0x0008;
GL_MAP_FLUSH_EXPLICIT_BIT :: 0x0010;
GL_MAP_UNSYNCHRONIZED_BIT :: 0x0020;
GL_COMPRESSED_RED_RGTC1 :: 0x8DBB;
GL_COMPRESSED_SIGNED_RED_RGTC1 :: 0x8DBC;
GL_COMPRESSED_RG_RGTC2 :: 0x8DBD;
GL_COMPRESSED_SIGNED_RG_RGTC2 :: 0x8DBE;
GL_RG :: 0x8227;
GL_RG_INTEGER :: 0x8228;
GL_R8 :: 0x8229;
GL_R16 :: 0x822A;
GL_RG8 :: 0x822B;
GL_RG16 :: 0x822C;
GL_R16F :: 0x822D;
GL_R32F :: 0x822E;
GL_RG16F :: 0x822F;
GL_RG32F :: 0x8230;
GL_R8I :: 0x8231;
GL_R8UI :: 0x8232;
GL_R16I :: 0x8233;
GL_R16UI :: 0x8234;
GL_R32I :: 0x8235;
GL_R32UI :: 0x8236;
GL_RG8I :: 0x8237;
GL_RG8UI :: 0x8238;
GL_RG16I :: 0x8239;
GL_RG16UI :: 0x823A;
GL_RG32I :: 0x823B;
GL_RG32UI :: 0x823C;
GL_VERTEX_ARRAY_BINDING :: 0x85B5;

GL_VERSION_3_1 :: 1;
GL_SAMPLER_2D_RECT :: 0x8B63;
GL_SAMPLER_2D_RECT_SHADOW :: 0x8B64;
GL_SAMPLER_BUFFER :: 0x8DC2;
GL_INT_SAMPLER_2D_RECT :: 0x8DCD;
GL_INT_SAMPLER_BUFFER :: 0x8DD0;
GL_UNSIGNED_INT_SAMPLER_2D_RECT :: 0x8DD5;
GL_UNSIGNED_INT_SAMPLER_BUFFER :: 0x8DD8;
GL_TEXTURE_BUFFER :: 0x8C2A;
GL_MAX_TEXTURE_BUFFER_SIZE :: 0x8C2B;
GL_TEXTURE_BINDING_BUFFER :: 0x8C2C;
GL_TEXTURE_BUFFER_DATA_STORE_BINDING :: 0x8C2D;
GL_TEXTURE_RECTANGLE :: 0x84F5;
GL_TEXTURE_BINDING_RECTANGLE :: 0x84F6;
GL_PROXY_TEXTURE_RECTANGLE :: 0x84F7;
GL_MAX_RECTANGLE_TEXTURE_SIZE :: 0x84F8;
GL_R8_SNORM :: 0x8F94;
GL_RG8_SNORM :: 0x8F95;
GL_RGB8_SNORM :: 0x8F96;
GL_RGBA8_SNORM :: 0x8F97;
GL_R16_SNORM :: 0x8F98;
GL_RG16_SNORM :: 0x8F99;
GL_RGB16_SNORM :: 0x8F9A;
GL_RGBA16_SNORM :: 0x8F9B;
GL_SIGNED_NORMALIZED :: 0x8F9C;
GL_PRIMITIVE_RESTART :: 0x8F9D;
GL_PRIMITIVE_RESTART_INDEX :: 0x8F9E;
GL_COPY_READ_BUFFER :: 0x8F36;
GL_COPY_WRITE_BUFFER :: 0x8F37;
GL_UNIFORM_BUFFER :: 0x8A11;
GL_UNIFORM_BUFFER_BINDING :: 0x8A28;
GL_UNIFORM_BUFFER_START :: 0x8A29;
GL_UNIFORM_BUFFER_SIZE :: 0x8A2A;
GL_MAX_VERTEX_UNIFORM_BLOCKS :: 0x8A2B;
GL_MAX_GEOMETRY_UNIFORM_BLOCKS :: 0x8A2C;
GL_MAX_FRAGMENT_UNIFORM_BLOCKS :: 0x8A2D;
GL_MAX_COMBINED_UNIFORM_BLOCKS :: 0x8A2E;
GL_MAX_UNIFORM_BUFFER_BINDINGS :: 0x8A2F;
GL_MAX_UNIFORM_BLOCK_SIZE :: 0x8A30;
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS :: 0x8A31;
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS :: 0x8A32;
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :: 0x8A33;
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT :: 0x8A34;
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH :: 0x8A35;
GL_ACTIVE_UNIFORM_BLOCKS :: 0x8A36;
GL_UNIFORM_TYPE :: 0x8A37;
GL_UNIFORM_SIZE :: 0x8A38;
GL_UNIFORM_NAME_LENGTH :: 0x8A39;
GL_UNIFORM_BLOCK_INDEX :: 0x8A3A;
GL_UNIFORM_OFFSET :: 0x8A3B;
GL_UNIFORM_ARRAY_STRIDE :: 0x8A3C;
GL_UNIFORM_MATRIX_STRIDE :: 0x8A3D;
GL_UNIFORM_IS_ROW_MAJOR :: 0x8A3E;
GL_UNIFORM_BLOCK_BINDING :: 0x8A3F;
GL_UNIFORM_BLOCK_DATA_SIZE :: 0x8A40;
GL_UNIFORM_BLOCK_NAME_LENGTH :: 0x8A41;
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS :: 0x8A42;
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES :: 0x8A43;
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :: 0x8A44;
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER :: 0x8A45;
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :: 0x8A46;
GL_INVALID_INDEX :: 0xFFFFFFFF;

GL_VERSION_3_2 :: 1;

GL_CONTEXT_CORE_PROFILE_BIT :: 0x00000001;
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT :: 0x00000002;
GL_LINES_ADJACENCY :: 0x000A;
GL_LINE_STRIP_ADJACENCY :: 0x000B;
GL_TRIANGLES_ADJACENCY :: 0x000C;
GL_TRIANGLE_STRIP_ADJACENCY :: 0x000D;
GL_PROGRAM_POINT_SIZE :: 0x8642;
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS :: 0x8C29;
GL_FRAMEBUFFER_ATTACHMENT_LAYERED :: 0x8DA7;
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS :: 0x8DA8;
GL_GEOMETRY_SHADER :: 0x8DD9;
GL_GEOMETRY_VERTICES_OUT :: 0x8916;
GL_GEOMETRY_INPUT_TYPE :: 0x8917;
GL_GEOMETRY_OUTPUT_TYPE :: 0x8918;
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS :: 0x8DDF;
GL_MAX_GEOMETRY_OUTPUT_VERTICES :: 0x8DE0;
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS :: 0x8DE1;
GL_MAX_VERTEX_OUTPUT_COMPONENTS :: 0x9122;
GL_MAX_GEOMETRY_INPUT_COMPONENTS :: 0x9123;
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS :: 0x9124;
GL_MAX_FRAGMENT_INPUT_COMPONENTS :: 0x9125;
GL_CONTEXT_PROFILE_MASK :: 0x9126;
GL_DEPTH_CLAMP :: 0x864F;
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION :: 0x8E4C;
GL_FIRST_VERTEX_CONVENTION :: 0x8E4D;
GL_LAST_VERTEX_CONVENTION :: 0x8E4E;
GL_PROVOKING_VERTEX :: 0x8E4F;
GL_TEXTURE_CUBE_MAP_SEAMLESS :: 0x884F;
GL_MAX_SERVER_WAIT_TIMEOUT :: 0x9111;
GL_OBJECT_TYPE :: 0x9112;
GL_SYNC_CONDITION :: 0x9113;
GL_SYNC_STATUS :: 0x9114;
GL_SYNC_FLAGS :: 0x9115;
GL_SYNC_FENCE :: 0x9116;
GL_SYNC_GPU_COMMANDS_COMPLETE :: 0x9117;
GL_UNSIGNALED :: 0x9118;
GL_SIGNALED :: 0x9119;
GL_ALREADY_SIGNALED :: 0x911A;
GL_TIMEOUT_EXPIRED :: 0x911B;
GL_CONDITION_SATISFIED :: 0x911C;
GL_WAIT_FAILED :: 0x911D;
GL_TIMEOUT_IGNORED :: 0xFFFFFFFFFFFFFFFF;
GL_SYNC_FLUSH_COMMANDS_BIT :: 0x00000001;
GL_SAMPLE_POSITION :: 0x8E50;
GL_SAMPLE_MASK :: 0x8E51;
GL_SAMPLE_MASK_VALUE :: 0x8E52;
GL_MAX_SAMPLE_MASK_WORDS :: 0x8E59;
GL_TEXTURE_2D_MULTISAMPLE :: 0x9100;
GL_PROXY_TEXTURE_2D_MULTISAMPLE :: 0x9101;
GL_TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9102;
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9103;
GL_TEXTURE_BINDING_2D_MULTISAMPLE :: 0x9104;
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY :: 0x9105;
GL_TEXTURE_SAMPLES :: 0x9106;
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS :: 0x9107;
GL_SAMPLER_2D_MULTISAMPLE :: 0x9108;
GL_INT_SAMPLER_2D_MULTISAMPLE :: 0x9109;
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE :: 0x910A;
GL_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910B;
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910C;
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910D;
GL_MAX_COLOR_TEXTURE_SAMPLES :: 0x910E;
GL_MAX_DEPTH_TEXTURE_SAMPLES :: 0x910F;
GL_MAX_INTEGER_SAMPLES :: 0x9110;

GL_VERSION_3_3 :: 1;
GL_VERTEX_ATTRIB_ARRAY_DIVISOR :: 0x88FE;
GL_SRC1_COLOR :: 0x88F9;
GL_ONE_MINUS_SRC1_COLOR :: 0x88FA;
GL_ONE_MINUS_SRC1_ALPHA :: 0x88FB;
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS :: 0x88FC;
GL_ANY_SAMPLES_PASSED :: 0x8C2F;
GL_SAMPLER_BINDING :: 0x8919;
GL_RGB10_A2UI :: 0x906F;
GL_TEXTURE_SWIZZLE_R :: 0x8E42;
GL_TEXTURE_SWIZZLE_G :: 0x8E43;
GL_TEXTURE_SWIZZLE_B :: 0x8E44;
GL_TEXTURE_SWIZZLE_A :: 0x8E45;
GL_TEXTURE_SWIZZLE_RGBA :: 0x8E46;
GL_TIME_ELAPSED :: 0x88BF;
GL_TIMESTAMP :: 0x8E28;
GL_INT_2_10_10_10_REV :: 0x8D9F;

GL_VERSION_4_0 :: 1;
GL_SAMPLE_SHADING :: 0x8C36;
GL_MIN_SAMPLE_SHADING_VALUE :: 0x8C37;
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET :: 0x8E5E;
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET :: 0x8E5F;
GL_TEXTURE_CUBE_MAP_ARRAY :: 0x9009;
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY :: 0x900A;
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY :: 0x900B;
GL_SAMPLER_CUBE_MAP_ARRAY :: 0x900C;
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW :: 0x900D;
GL_INT_SAMPLER_CUBE_MAP_ARRAY :: 0x900E;
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY :: 0x900F;
GL_DRAW_INDIRECT_BUFFER :: 0x8F3F;
GL_DRAW_INDIRECT_BUFFER_BINDING :: 0x8F43;
GL_GEOMETRY_SHADER_INVOCATIONS :: 0x887F;
GL_MAX_GEOMETRY_SHADER_INVOCATIONS :: 0x8E5A;
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET :: 0x8E5B;
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET :: 0x8E5C;
GL_FRAGMENT_INTERPOLATION_OFFSET_BITS :: 0x8E5D;
GL_MAX_VERTEX_STREAMS :: 0x8E71;
GL_DOUBLE_VEC2 :: 0x8FFC;
GL_DOUBLE_VEC3 :: 0x8FFD;
GL_DOUBLE_VEC4 :: 0x8FFE;
GL_DOUBLE_MAT2 :: 0x8F46;
GL_DOUBLE_MAT3 :: 0x8F47;
GL_DOUBLE_MAT4 :: 0x8F48;
GL_DOUBLE_MAT2x3 :: 0x8F49;
GL_DOUBLE_MAT2x4 :: 0x8F4A;
GL_DOUBLE_MAT3x2 :: 0x8F4B;
GL_DOUBLE_MAT3x4 :: 0x8F4C;
GL_DOUBLE_MAT4x2 :: 0x8F4D;
GL_DOUBLE_MAT4x3 :: 0x8F4E;
GL_ACTIVE_SUBROUTINES :: 0x8DE5;
GL_ACTIVE_SUBROUTINE_UNIFORMS :: 0x8DE6;
GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS :: 0x8E47;
GL_ACTIVE_SUBROUTINE_MAX_LENGTH :: 0x8E48;
GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH :: 0x8E49;
GL_MAX_SUBROUTINES :: 0x8DE7;
GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS :: 0x8DE8;
GL_NUM_COMPATIBLE_SUBROUTINES :: 0x8E4A;
GL_COMPATIBLE_SUBROUTINES :: 0x8E4B;
GL_PATCHES :: 0x000E;
GL_PATCH_VERTICES :: 0x8E72;
GL_PATCH_DEFAULT_INNER_LEVEL :: 0x8E73;
GL_PATCH_DEFAULT_OUTER_LEVEL :: 0x8E74;
GL_TESS_CONTROL_OUTPUT_VERTICES :: 0x8E75;
GL_TESS_GEN_MODE :: 0x8E76;
GL_TESS_GEN_SPACING :: 0x8E77;
GL_TESS_GEN_VERTEX_ORDER :: 0x8E78;
GL_TESS_GEN_POINT_MODE :: 0x8E79;
GL_ISOLINES :: 0x8E7A;
GL_FRACTIONAL_ODD :: 0x8E7B;
GL_FRACTIONAL_EVEN :: 0x8E7C;
GL_MAX_PATCH_VERTICES :: 0x8E7D;
GL_MAX_TESS_GEN_LEVEL :: 0x8E7E;
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS :: 0x8E7F;
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS :: 0x8E80;
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS :: 0x8E81;
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS :: 0x8E82;
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS :: 0x8E83;
GL_MAX_TESS_PATCH_COMPONENTS :: 0x8E84;
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS :: 0x8E85;
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS :: 0x8E86;
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS :: 0x8E89;
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS :: 0x8E8A;
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS :: 0x886C;
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS :: 0x886D;
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS :: 0x8E1E;
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS :: 0x8E1F;
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x84F0;
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x84F1;
GL_TESS_EVALUATION_SHADER :: 0x8E87;
GL_TESS_CONTROL_SHADER :: 0x8E88;
GL_TRANSFORM_FEEDBACK :: 0x8E22;
GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED :: 0x8E23;
GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE :: 0x8E24;
GL_TRANSFORM_FEEDBACK_BINDING :: 0x8E25;
GL_MAX_TRANSFORM_FEEDBACK_BUFFERS :: 0x8E70;

GL_VERSION_4_1 :: 1;
GL_FIXED :: 0x140C;
GL_IMPLEMENTATION_COLOR_READ_TYPE :: 0x8B9A;
GL_IMPLEMENTATION_COLOR_READ_FORMAT :: 0x8B9B;
GL_LOW_FLOAT :: 0x8DF0;
GL_MEDIUM_FLOAT :: 0x8DF1;
GL_HIGH_FLOAT :: 0x8DF2;
GL_LOW_INT :: 0x8DF3;
GL_MEDIUM_INT :: 0x8DF4;
GL_HIGH_INT :: 0x8DF5;
GL_SHADER_COMPILER :: 0x8DFA;
GL_SHADER_BINARY_FORMATS :: 0x8DF8;
GL_NUM_SHADER_BINARY_FORMATS :: 0x8DF9;
GL_MAX_VERTEX_UNIFORM_VECTORS :: 0x8DFB;
GL_MAX_VARYING_VECTORS :: 0x8DFC;
GL_MAX_FRAGMENT_UNIFORM_VECTORS :: 0x8DFD;
GL_RGB565 :: 0x8D62;
GL_PROGRAM_BINARY_RETRIEVABLE_HINT :: 0x8257;
GL_PROGRAM_BINARY_LENGTH :: 0x8741;
GL_NUM_PROGRAM_BINARY_FORMATS :: 0x87FE;
GL_PROGRAM_BINARY_FORMATS :: 0x87FF;
GL_VERTEX_SHADER_BIT :: 0x00000001;
GL_FRAGMENT_SHADER_BIT :: 0x00000002;
GL_GEOMETRY_SHADER_BIT :: 0x00000004;
GL_TESS_CONTROL_SHADER_BIT :: 0x00000008;
GL_TESS_EVALUATION_SHADER_BIT :: 0x00000010;
GL_ALL_SHADER_BITS :: 0xFFFFFFFF;
GL_PROGRAM_SEPARABLE :: 0x8258;
GL_ACTIVE_PROGRAM :: 0x8259;
GL_PROGRAM_PIPELINE_BINDING :: 0x825A;
GL_MAX_VIEWPORTS :: 0x825B;
GL_VIEWPORT_SUBPIXEL_BITS :: 0x825C;
GL_VIEWPORT_BOUNDS_RANGE :: 0x825D;
GL_LAYER_PROVOKING_VERTEX :: 0x825E;
GL_VIEWPORT_INDEX_PROVOKING_VERTEX :: 0x825F;
GL_UNDEFINED_VERTEX :: 0x8260;

GL_VERSION_4_2 :: 1;
GL_COPY_READ_BUFFER_BINDING :: 0x8F36;
GL_COPY_WRITE_BUFFER_BINDING :: 0x8F37;
GL_TRANSFORM_FEEDBACK_ACTIVE :: 0x8E24;
GL_TRANSFORM_FEEDBACK_PAUSED :: 0x8E23;
GL_UNPACK_COMPRESSED_BLOCK_WIDTH :: 0x9127;
GL_UNPACK_COMPRESSED_BLOCK_HEIGHT :: 0x9128;
GL_UNPACK_COMPRESSED_BLOCK_DEPTH :: 0x9129;
GL_UNPACK_COMPRESSED_BLOCK_SIZE :: 0x912A;
GL_PACK_COMPRESSED_BLOCK_WIDTH :: 0x912B;
GL_PACK_COMPRESSED_BLOCK_HEIGHT :: 0x912C;
GL_PACK_COMPRESSED_BLOCK_DEPTH :: 0x912D;
GL_PACK_COMPRESSED_BLOCK_SIZE :: 0x912E;
GL_NUM_SAMPLE_COUNTS :: 0x9380;
GL_MIN_MAP_BUFFER_ALIGNMENT :: 0x90BC;
GL_ATOMIC_COUNTER_BUFFER :: 0x92C0;
GL_ATOMIC_COUNTER_BUFFER_BINDING :: 0x92C1;
GL_ATOMIC_COUNTER_BUFFER_START :: 0x92C2;
GL_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92C3;
GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE :: 0x92C4;
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS :: 0x92C5;
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES :: 0x92C6;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER :: 0x92C7;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x92C8;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x92C9;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER :: 0x92CA;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER :: 0x92CB;
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS :: 0x92CC;
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS :: 0x92CD;
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS :: 0x92CE;
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS :: 0x92CF;
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS :: 0x92D0;
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS :: 0x92D1;
GL_MAX_VERTEX_ATOMIC_COUNTERS :: 0x92D2;
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS :: 0x92D3;
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS :: 0x92D4;
GL_MAX_GEOMETRY_ATOMIC_COUNTERS :: 0x92D5;
GL_MAX_FRAGMENT_ATOMIC_COUNTERS :: 0x92D6;
GL_MAX_COMBINED_ATOMIC_COUNTERS :: 0x92D7;
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92D8;
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS :: 0x92DC;
GL_ACTIVE_ATOMIC_COUNTER_BUFFERS :: 0x92D9;
GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX :: 0x92DA;
GL_UNSIGNED_INT_ATOMIC_COUNTER :: 0x92DB;
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT :: 0x00000001;
GL_ELEMENT_ARRAY_BARRIER_BIT :: 0x00000002;
GL_UNIFORM_BARRIER_BIT :: 0x00000004;
GL_TEXTURE_FETCH_BARRIER_BIT :: 0x00000008;
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT :: 0x00000020;
GL_COMMAND_BARRIER_BIT :: 0x00000040;
GL_PIXEL_BUFFER_BARRIER_BIT :: 0x00000080;
GL_TEXTURE_UPDATE_BARRIER_BIT :: 0x00000100;
GL_BUFFER_UPDATE_BARRIER_BIT :: 0x00000200;
GL_FRAMEBUFFER_BARRIER_BIT :: 0x00000400;
GL_TRANSFORM_FEEDBACK_BARRIER_BIT :: 0x00000800;
GL_ATOMIC_COUNTER_BARRIER_BIT :: 0x00001000;
GL_ALL_BARRIER_BITS :: 0xFFFFFFFF;
GL_MAX_IMAGE_UNITS :: 0x8F38;
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS :: 0x8F39;
GL_IMAGE_BINDING_NAME :: 0x8F3A;
GL_IMAGE_BINDING_LEVEL :: 0x8F3B;
GL_IMAGE_BINDING_LAYERED :: 0x8F3C;
GL_IMAGE_BINDING_LAYER :: 0x8F3D;
GL_IMAGE_BINDING_ACCESS :: 0x8F3E;
GL_IMAGE_1D :: 0x904C;
GL_IMAGE_2D :: 0x904D;
GL_IMAGE_3D :: 0x904E;
GL_IMAGE_2D_RECT :: 0x904F;
GL_IMAGE_CUBE :: 0x9050;
GL_IMAGE_BUFFER :: 0x9051;
GL_IMAGE_1D_ARRAY :: 0x9052;
GL_IMAGE_2D_ARRAY :: 0x9053;
GL_IMAGE_CUBE_MAP_ARRAY :: 0x9054;
GL_IMAGE_2D_MULTISAMPLE :: 0x9055;
GL_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x9056;
GL_INT_IMAGE_1D :: 0x9057;
GL_INT_IMAGE_2D :: 0x9058;
GL_INT_IMAGE_3D :: 0x9059;
GL_INT_IMAGE_2D_RECT :: 0x905A;
GL_INT_IMAGE_CUBE :: 0x905B;
GL_INT_IMAGE_BUFFER :: 0x905C;
GL_INT_IMAGE_1D_ARRAY :: 0x905D;
GL_INT_IMAGE_2D_ARRAY :: 0x905E;
GL_INT_IMAGE_CUBE_MAP_ARRAY :: 0x905F;
GL_INT_IMAGE_2D_MULTISAMPLE :: 0x9060;
GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x9061;
GL_UNSIGNED_INT_IMAGE_1D :: 0x9062;
GL_UNSIGNED_INT_IMAGE_2D :: 0x9063;
GL_UNSIGNED_INT_IMAGE_3D :: 0x9064;
GL_UNSIGNED_INT_IMAGE_2D_RECT :: 0x9065;
GL_UNSIGNED_INT_IMAGE_CUBE :: 0x9066;
GL_UNSIGNED_INT_IMAGE_BUFFER :: 0x9067;
GL_UNSIGNED_INT_IMAGE_1D_ARRAY :: 0x9068;
GL_UNSIGNED_INT_IMAGE_2D_ARRAY :: 0x9069;
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY :: 0x906A;
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE :: 0x906B;
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x906C;
GL_MAX_IMAGE_SAMPLES :: 0x906D;
GL_IMAGE_BINDING_FORMAT :: 0x906E;
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE :: 0x90C7;
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE :: 0x90C8;
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS :: 0x90C9;
GL_MAX_VERTEX_IMAGE_UNIFORMS :: 0x90CA;
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS :: 0x90CB;
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS :: 0x90CC;
GL_MAX_GEOMETRY_IMAGE_UNIFORMS :: 0x90CD;
GL_MAX_FRAGMENT_IMAGE_UNIFORMS :: 0x90CE;
GL_MAX_COMBINED_IMAGE_UNIFORMS :: 0x90CF;
GL_COMPRESSED_RGBA_BPTC_UNORM :: 0x8E8C;
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM :: 0x8E8D;
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT :: 0x8E8E;
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT :: 0x8E8F;
GL_TEXTURE_IMMUTABLE_FORMAT :: 0x912F;

GL_VERSION_4_3 :: 1;

GL_NUM_SHADING_LANGUAGE_VERSIONS :: 0x82E9;
GL_VERTEX_ATTRIB_ARRAY_LONG :: 0x874E;
GL_COMPRESSED_RGB8_ETC2 :: 0x9274;
GL_COMPRESSED_SRGB8_ETC2 :: 0x9275;
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9276;
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9277;
GL_COMPRESSED_RGBA8_ETC2_EAC :: 0x9278;
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC :: 0x9279;
GL_COMPRESSED_R11_EAC :: 0x9270;
GL_COMPRESSED_SIGNED_R11_EAC :: 0x9271;
GL_COMPRESSED_RG11_EAC :: 0x9272;
GL_COMPRESSED_SIGNED_RG11_EAC :: 0x9273;
GL_PRIMITIVE_RESTART_FIXED_INDEX :: 0x8D69;
GL_ANY_SAMPLES_PASSED_CONSERVATIVE :: 0x8D6A;
GL_MAX_ELEMENT_INDEX :: 0x8D6B;
GL_COMPUTE_SHADER :: 0x91B9;
GL_MAX_COMPUTE_UNIFORM_BLOCKS :: 0x91BB;
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS :: 0x91BC;
GL_MAX_COMPUTE_IMAGE_UNIFORMS :: 0x91BD;
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE :: 0x8262;
GL_MAX_COMPUTE_UNIFORM_COMPONENTS :: 0x8263;
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS :: 0x8264;
GL_MAX_COMPUTE_ATOMIC_COUNTERS :: 0x8265;
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS :: 0x8266;
GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS :: 0x90EB;
GL_MAX_COMPUTE_WORK_GROUP_COUNT :: 0x91BE;
GL_MAX_COMPUTE_WORK_GROUP_SIZE :: 0x91BF;
GL_COMPUTE_WORK_GROUP_SIZE :: 0x8267;
GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER :: 0x90EC;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER :: 0x90ED;
GL_DISPATCH_INDIRECT_BUFFER :: 0x90EE;
GL_DISPATCH_INDIRECT_BUFFER_BINDING :: 0x90EF;
GL_COMPUTE_SHADER_BIT :: 0x00000020;
GL_DEBUG_OUTPUT_SYNCHRONOUS :: 0x8242;
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH :: 0x8243;
GL_DEBUG_CALLBACK_FUNCTION :: 0x8244;
GL_DEBUG_CALLBACK_USER_PARAM :: 0x8245;
GL_DEBUG_SOURCE_API :: 0x8246;
GL_DEBUG_SOURCE_WINDOW_SYSTEM :: 0x8247;
GL_DEBUG_SOURCE_SHADER_COMPILER :: 0x8248;
GL_DEBUG_SOURCE_THIRD_PARTY :: 0x8249;
GL_DEBUG_SOURCE_APPLICATION :: 0x824A;
GL_DEBUG_SOURCE_OTHER :: 0x824B;
GL_DEBUG_TYPE_ERROR :: 0x824C;
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR :: 0x824D;
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR :: 0x824E;
GL_DEBUG_TYPE_PORTABILITY :: 0x824F;
GL_DEBUG_TYPE_PERFORMANCE :: 0x8250;
GL_DEBUG_TYPE_OTHER :: 0x8251;
GL_MAX_DEBUG_MESSAGE_LENGTH :: 0x9143;
GL_MAX_DEBUG_LOGGED_MESSAGES :: 0x9144;
GL_DEBUG_LOGGED_MESSAGES :: 0x9145;
GL_DEBUG_SEVERITY_HIGH :: 0x9146;
GL_DEBUG_SEVERITY_MEDIUM :: 0x9147;
GL_DEBUG_SEVERITY_LOW :: 0x9148;
GL_DEBUG_TYPE_MARKER :: 0x8268;
GL_DEBUG_TYPE_PUSH_GROUP :: 0x8269;
GL_DEBUG_TYPE_POP_GROUP :: 0x826A;
GL_DEBUG_SEVERITY_NOTIFICATION :: 0x826B;
GL_MAX_DEBUG_GROUP_STACK_DEPTH :: 0x826C;
GL_DEBUG_GROUP_STACK_DEPTH :: 0x826D;
GL_BUFFER :: 0x82E0;
GL_SHADER :: 0x82E1;
GL_PROGRAM :: 0x82E2;
GL_QUERY :: 0x82E3;
GL_PROGRAM_PIPELINE :: 0x82E4;
GL_SAMPLER :: 0x82E6;
GL_MAX_LABEL_LENGTH :: 0x82E8;
GL_DEBUG_OUTPUT :: 0x92E0;
GL_CONTEXT_FLAG_DEBUG_BIT :: 0x00000002;
GL_MAX_UNIFORM_LOCATIONS :: 0x826E;
GL_FRAMEBUFFER_DEFAULT_WIDTH :: 0x9310;
GL_FRAMEBUFFER_DEFAULT_HEIGHT :: 0x9311;
GL_FRAMEBUFFER_DEFAULT_LAYERS :: 0x9312;
GL_FRAMEBUFFER_DEFAULT_SAMPLES :: 0x9313;
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS :: 0x9314;
GL_MAX_FRAMEBUFFER_WIDTH :: 0x9315;
GL_MAX_FRAMEBUFFER_HEIGHT :: 0x9316;
GL_MAX_FRAMEBUFFER_LAYERS :: 0x9317;
GL_MAX_FRAMEBUFFER_SAMPLES :: 0x9318;
GL_INTERNALFORMAT_SUPPORTED :: 0x826F;
GL_INTERNALFORMAT_PREFERRED :: 0x8270;
GL_INTERNALFORMAT_RED_SIZE :: 0x8271;
GL_INTERNALFORMAT_GREEN_SIZE :: 0x8272;
GL_INTERNALFORMAT_BLUE_SIZE :: 0x8273;
GL_INTERNALFORMAT_ALPHA_SIZE :: 0x8274;
GL_INTERNALFORMAT_DEPTH_SIZE :: 0x8275;
GL_INTERNALFORMAT_STENCIL_SIZE :: 0x8276;
GL_INTERNALFORMAT_SHARED_SIZE :: 0x8277;
GL_INTERNALFORMAT_RED_TYPE :: 0x8278;
GL_INTERNALFORMAT_GREEN_TYPE :: 0x8279;
GL_INTERNALFORMAT_BLUE_TYPE :: 0x827A;
GL_INTERNALFORMAT_ALPHA_TYPE :: 0x827B;
GL_INTERNALFORMAT_DEPTH_TYPE :: 0x827C;
GL_INTERNALFORMAT_STENCIL_TYPE :: 0x827D;
GL_MAX_WIDTH :: 0x827E;
GL_MAX_HEIGHT :: 0x827F;
GL_MAX_DEPTH :: 0x8280;
GL_MAX_LAYERS :: 0x8281;
GL_MAX_COMBINED_DIMENSIONS :: 0x8282;
GL_COLOR_COMPONENTS :: 0x8283;
GL_DEPTH_COMPONENTS :: 0x8284;
GL_STENCIL_COMPONENTS :: 0x8285;
GL_COLOR_RENDERABLE :: 0x8286;
GL_DEPTH_RENDERABLE :: 0x8287;
GL_STENCIL_RENDERABLE :: 0x8288;
GL_FRAMEBUFFER_RENDERABLE :: 0x8289;
GL_FRAMEBUFFER_RENDERABLE_LAYERED :: 0x828A;
GL_FRAMEBUFFER_BLEND :: 0x828B;
GL_READ_PIXELS :: 0x828C;
GL_READ_PIXELS_FORMAT :: 0x828D;
GL_READ_PIXELS_TYPE :: 0x828E;
GL_TEXTURE_IMAGE_FORMAT :: 0x828F;
GL_TEXTURE_IMAGE_TYPE :: 0x8290;
GL_GET_TEXTURE_IMAGE_FORMAT :: 0x8291;
GL_GET_TEXTURE_IMAGE_TYPE :: 0x8292;
GL_MIPMAP :: 0x8293;
GL_MANUAL_GENERATE_MIPMAP :: 0x8294;
GL_AUTO_GENERATE_MIPMAP :: 0x8295;
GL_COLOR_ENCODING :: 0x8296;
GL_SRGB_READ :: 0x8297;
GL_SRGB_WRITE :: 0x8298;
GL_FILTER :: 0x829A;
GL_VERTEX_TEXTURE :: 0x829B;
GL_TESS_CONTROL_TEXTURE :: 0x829C;
GL_TESS_EVALUATION_TEXTURE :: 0x829D;
GL_GEOMETRY_TEXTURE :: 0x829E;
GL_FRAGMENT_TEXTURE :: 0x829F;
GL_COMPUTE_TEXTURE :: 0x82A0;
GL_TEXTURE_SHADOW :: 0x82A1;
GL_TEXTURE_GATHER :: 0x82A2;
GL_TEXTURE_GATHER_SHADOW :: 0x82A3;
GL_SHADER_IMAGE_LOAD :: 0x82A4;
GL_SHADER_IMAGE_STORE :: 0x82A5;
GL_SHADER_IMAGE_ATOMIC :: 0x82A6;
GL_IMAGE_TEXEL_SIZE :: 0x82A7;
GL_IMAGE_COMPATIBILITY_CLASS :: 0x82A8;
GL_IMAGE_PIXEL_FORMAT :: 0x82A9;
GL_IMAGE_PIXEL_TYPE :: 0x82AA;
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST :: 0x82AC;
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST :: 0x82AD;
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE :: 0x82AE;
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE :: 0x82AF;
GL_TEXTURE_COMPRESSED_BLOCK_WIDTH :: 0x82B1;
GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT :: 0x82B2;
GL_TEXTURE_COMPRESSED_BLOCK_SIZE :: 0x82B3;
GL_CLEAR_BUFFER :: 0x82B4;
GL_TEXTURE_VIEW :: 0x82B5;
GL_VIEW_COMPATIBILITY_CLASS :: 0x82B6;
GL_FULL_SUPPORT :: 0x82B7;
GL_CAVEAT_SUPPORT :: 0x82B8;
GL_IMAGE_CLASS_4_X_32 :: 0x82B9;
GL_IMAGE_CLASS_2_X_32 :: 0x82BA;
GL_IMAGE_CLASS_1_X_32 :: 0x82BB;
GL_IMAGE_CLASS_4_X_16 :: 0x82BC;
GL_IMAGE_CLASS_2_X_16 :: 0x82BD;
GL_IMAGE_CLASS_1_X_16 :: 0x82BE;
GL_IMAGE_CLASS_4_X_8 :: 0x82BF;
GL_IMAGE_CLASS_2_X_8 :: 0x82C0;
GL_IMAGE_CLASS_1_X_8 :: 0x82C1;
GL_IMAGE_CLASS_11_11_10 :: 0x82C2;
GL_IMAGE_CLASS_10_10_10_2 :: 0x82C3;
GL_VIEW_CLASS_128_BITS :: 0x82C4;
GL_VIEW_CLASS_96_BITS :: 0x82C5;
GL_VIEW_CLASS_64_BITS :: 0x82C6;
GL_VIEW_CLASS_48_BITS :: 0x82C7;
GL_VIEW_CLASS_32_BITS :: 0x82C8;
GL_VIEW_CLASS_24_BITS :: 0x82C9;
GL_VIEW_CLASS_16_BITS :: 0x82CA;
GL_VIEW_CLASS_8_BITS :: 0x82CB;
GL_VIEW_CLASS_S3TC_DXT1_RGB :: 0x82CC;
GL_VIEW_CLASS_S3TC_DXT1_RGBA :: 0x82CD;
GL_VIEW_CLASS_S3TC_DXT3_RGBA :: 0x82CE;
GL_VIEW_CLASS_S3TC_DXT5_RGBA :: 0x82CF;
GL_VIEW_CLASS_RGTC1_RED :: 0x82D0;
GL_VIEW_CLASS_RGTC2_RG :: 0x82D1;
GL_VIEW_CLASS_BPTC_UNORM :: 0x82D2;
GL_VIEW_CLASS_BPTC_FLOAT :: 0x82D3;
GL_UNIFORM :: 0x92E1;
GL_UNIFORM_BLOCK :: 0x92E2;
GL_PROGRAM_INPUT :: 0x92E3;
GL_PROGRAM_OUTPUT :: 0x92E4;
GL_BUFFER_VARIABLE :: 0x92E5;
GL_SHADER_STORAGE_BLOCK :: 0x92E6;
GL_VERTEX_SUBROUTINE :: 0x92E8;
GL_TESS_CONTROL_SUBROUTINE :: 0x92E9;
GL_TESS_EVALUATION_SUBROUTINE :: 0x92EA;
GL_GEOMETRY_SUBROUTINE :: 0x92EB;
GL_FRAGMENT_SUBROUTINE :: 0x92EC;
GL_COMPUTE_SUBROUTINE :: 0x92ED;
GL_VERTEX_SUBROUTINE_UNIFORM :: 0x92EE;
GL_TESS_CONTROL_SUBROUTINE_UNIFORM :: 0x92EF;
GL_TESS_EVALUATION_SUBROUTINE_UNIFORM :: 0x92F0;
GL_GEOMETRY_SUBROUTINE_UNIFORM :: 0x92F1;
GL_FRAGMENT_SUBROUTINE_UNIFORM :: 0x92F2;
GL_COMPUTE_SUBROUTINE_UNIFORM :: 0x92F3;
GL_TRANSFORM_FEEDBACK_VARYING :: 0x92F4;
GL_ACTIVE_RESOURCES :: 0x92F5;
GL_MAX_NAME_LENGTH :: 0x92F6;
GL_MAX_NUM_ACTIVE_VARIABLES :: 0x92F7;
GL_MAX_NUM_COMPATIBLE_SUBROUTINES :: 0x92F8;
GL_NAME_LENGTH :: 0x92F9;
GL_TYPE :: 0x92FA;
GL_ARRAY_SIZE :: 0x92FB;
GL_OFFSET :: 0x92FC;
GL_BLOCK_INDEX :: 0x92FD;
GL_ARRAY_STRIDE :: 0x92FE;
GL_MATRIX_STRIDE :: 0x92FF;
GL_IS_ROW_MAJOR :: 0x9300;
GL_ATOMIC_COUNTER_BUFFER_INDEX :: 0x9301;
GL_BUFFER_BINDING :: 0x9302;
GL_BUFFER_DATA_SIZE :: 0x9303;
GL_NUM_ACTIVE_VARIABLES :: 0x9304;
GL_ACTIVE_VARIABLES :: 0x9305;
GL_REFERENCED_BY_VERTEX_SHADER :: 0x9306;
GL_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x9307;
GL_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x9308;
GL_REFERENCED_BY_GEOMETRY_SHADER :: 0x9309;
GL_REFERENCED_BY_FRAGMENT_SHADER :: 0x930A;
GL_REFERENCED_BY_COMPUTE_SHADER :: 0x930B;
GL_TOP_LEVEL_ARRAY_SIZE :: 0x930C;
GL_TOP_LEVEL_ARRAY_STRIDE :: 0x930D;
GL_LOCATION :: 0x930E;
GL_LOCATION_INDEX :: 0x930F;
GL_IS_PER_PATCH :: 0x92E7;
GL_SHADER_STORAGE_BUFFER :: 0x90D2;
GL_SHADER_STORAGE_BUFFER_BINDING :: 0x90D3;
GL_SHADER_STORAGE_BUFFER_START :: 0x90D4;
GL_SHADER_STORAGE_BUFFER_SIZE :: 0x90D5;
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS :: 0x90D6;
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS :: 0x90D7;
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS :: 0x90D8;
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS :: 0x90D9;
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS :: 0x90DA;
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS :: 0x90DB;
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS :: 0x90DC;
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS :: 0x90DD;
GL_MAX_SHADER_STORAGE_BLOCK_SIZE :: 0x90DE;
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT :: 0x90DF;
GL_SHADER_STORAGE_BARRIER_BIT :: 0x00002000;
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES :: 0x8F39;
GL_DEPTH_STENCIL_TEXTURE_MODE :: 0x90EA;
GL_TEXTURE_BUFFER_OFFSET :: 0x919D;
GL_TEXTURE_BUFFER_SIZE :: 0x919E;
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT :: 0x919F;
GL_TEXTURE_VIEW_MIN_LEVEL :: 0x82DB;
GL_TEXTURE_VIEW_NUM_LEVELS :: 0x82DC;
GL_TEXTURE_VIEW_MIN_LAYER :: 0x82DD;
GL_TEXTURE_VIEW_NUM_LAYERS :: 0x82DE;
GL_TEXTURE_IMMUTABLE_LEVELS :: 0x82DF;
GL_VERTEX_ATTRIB_BINDING :: 0x82D4;
GL_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D5;
GL_VERTEX_BINDING_DIVISOR :: 0x82D6;
GL_VERTEX_BINDING_OFFSET :: 0x82D7;
GL_VERTEX_BINDING_STRIDE :: 0x82D8;
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D9;
GL_MAX_VERTEX_ATTRIB_BINDINGS :: 0x82DA;
GL_VERTEX_BINDING_BUFFER :: 0x8F4F;

GL_VERSION_4_4 :: 1;
GL_MAX_VERTEX_ATTRIB_STRIDE :: 0x82E5;
GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED :: 0x8221;
GL_TEXTURE_BUFFER_BINDING :: 0x8C2A;
GL_MAP_PERSISTENT_BIT :: 0x0040;
GL_MAP_COHERENT_BIT :: 0x0080;
GL_DYNAMIC_STORAGE_BIT :: 0x0100;
GL_CLIENT_STORAGE_BIT :: 0x0200;
GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT :: 0x00004000;
GL_BUFFER_IMMUTABLE_STORAGE :: 0x821F;
GL_BUFFER_STORAGE_FLAGS :: 0x8220;
GL_CLEAR_TEXTURE :: 0x9365;
GL_LOCATION_COMPONENT :: 0x934A;
GL_TRANSFORM_FEEDBACK_BUFFER_INDEX :: 0x934B;
GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE :: 0x934C;
GL_QUERY_BUFFER :: 0x9192;
GL_QUERY_BUFFER_BARRIER_BIT :: 0x00008000;
GL_QUERY_BUFFER_BINDING :: 0x9193;
GL_QUERY_RESULT_NO_WAIT :: 0x9194;
GL_MIRROR_CLAMP_TO_EDGE :: 0x8743;

GL_VERSION_4_5 :: 1;
GL_CONTEXT_LOST :: 0x0507;
GL_NEGATIVE_ONE_TO_ONE :: 0x935E;
GL_ZERO_TO_ONE :: 0x935F;
GL_CLIP_ORIGIN :: 0x935C;
GL_CLIP_DEPTH_MODE :: 0x935D;
GL_QUERY_WAIT_INVERTED :: 0x8E17;
GL_QUERY_NO_WAIT_INVERTED :: 0x8E18;
GL_QUERY_BY_REGION_WAIT_INVERTED :: 0x8E19;
GL_QUERY_BY_REGION_NO_WAIT_INVERTED :: 0x8E1A;
GL_MAX_CULL_DISTANCES :: 0x82F9;
GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES :: 0x82FA;
GL_TEXTURE_TARGET :: 0x1006;
GL_QUERY_TARGET :: 0x82EA;
GL_GUILTY_CONTEXT_RESET :: 0x8253;
GL_INNOCENT_CONTEXT_RESET :: 0x8254;
GL_UNKNOWN_CONTEXT_RESET :: 0x8255;
GL_RESET_NOTIFICATION_STRATEGY :: 0x8256;
GL_LOSE_CONTEXT_ON_RESET :: 0x8252;
GL_NO_RESET_NOTIFICATION :: 0x8261;
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT :: 0x00000004;
GL_CONTEXT_RELEASE_BEHAVIOR :: 0x82FB;
GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH :: 0x82FC;

GL_VERSION_4_6 :: 1;
GL_SHADER_BINARY_FORMAT_SPIR_V :: 0x9551;
GL_SPIR_V_BINARY :: 0x9552;
GL_PARAMETER_BUFFER :: 0x80EE;
GL_PARAMETER_BUFFER_BINDING :: 0x80EF;
GL_CONTEXT_FLAG_NO_ERROR_BIT :: 0x00000008;
GL_VERTICES_SUBMITTED :: 0x82EE;
GL_PRIMITIVES_SUBMITTED :: 0x82EF;
GL_VERTEX_SHADER_INVOCATIONS :: 0x82F0;
GL_TESS_CONTROL_SHADER_PATCHES :: 0x82F1;
GL_TESS_EVALUATION_SHADER_INVOCATIONS :: 0x82F2;
GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED :: 0x82F3;
GL_FRAGMENT_SHADER_INVOCATIONS :: 0x82F4;
GL_COMPUTE_SHADER_INVOCATIONS :: 0x82F5;
GL_CLIPPING_INPUT_PRIMITIVES :: 0x82F6;
GL_CLIPPING_OUTPUT_PRIMITIVES :: 0x82F7;
GL_POLYGON_OFFSET_CLAMP :: 0x8E1B;
GL_SPIR_V_EXTENSIONS :: 0x9553;
GL_NUM_SPIR_V_EXTENSIONS :: 0x9554;
GL_TEXTURE_MAX_ANISOTROPY :: 0x84FE;
GL_MAX_TEXTURE_MAX_ANISOTROPY :: 0x84FF;
GL_TRANSFORM_FEEDBACK_OVERFLOW :: 0x82EC;
GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW :: 0x82ED;

GL_ARB_ES2_compatibility :: 1;

GL_ARB_ES3_1_compatibility :: 1;

GL_ARB_ES3_2_compatibility :: 1;
GL_PRIMITIVE_BOUNDING_BOX_ARB :: 0x92BE;
GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB :: 0x9381;
GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB :: 0x9382;

GL_ARB_ES3_compatibility :: 1;

GL_ARB_arrays_of_arrays :: 1;

GL_ARB_base_instance :: 1;

GL_ARB_bindless_texture :: 1;

GL_UNSIGNED_INT64_ARB :: 0x140F;

GL_ARB_blend_func_extended :: 1;

GL_ARB_buffer_storage :: 1;

GL_ARB_cl_event :: 1;

GL_SYNC_CL_EVENT_ARB :: 0x8240;
GL_SYNC_CL_EVENT_COMPLETE_ARB :: 0x8241;

GL_ARB_clear_buffer_object :: 1;

GL_ARB_clear_texture :: 1;

GL_ARB_clip_control :: 1;

GL_ARB_compressed_texture_pixel_storage :: 1;

GL_ARB_compute_shader :: 1;

GL_ARB_compute_variable_group_size :: 1;
GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB :: 0x9344;
GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB :: 0x90EB;
GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB :: 0x9345;
GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB :: 0x91BF;

GL_ARB_conditional_render_inverted :: 1;

GL_ARB_conservative_depth :: 1;

GL_ARB_copy_buffer :: 1;

GL_ARB_copy_image :: 1;

GL_ARB_cull_distance :: 1;

GL_ARB_debug_output :: 1;

GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB :: 0x8242;
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB :: 0x8243;
GL_DEBUG_CALLBACK_FUNCTION_ARB :: 0x8244;
GL_DEBUG_CALLBACK_USER_PARAM_ARB :: 0x8245;
GL_DEBUG_SOURCE_API_ARB :: 0x8246;
GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB :: 0x8247;
GL_DEBUG_SOURCE_SHADER_COMPILER_ARB :: 0x8248;
GL_DEBUG_SOURCE_THIRD_PARTY_ARB :: 0x8249;
GL_DEBUG_SOURCE_APPLICATION_ARB :: 0x824A;
GL_DEBUG_SOURCE_OTHER_ARB :: 0x824B;
GL_DEBUG_TYPE_ERROR_ARB :: 0x824C;
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB :: 0x824D;
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB :: 0x824E;
GL_DEBUG_TYPE_PORTABILITY_ARB :: 0x824F;
GL_DEBUG_TYPE_PERFORMANCE_ARB :: 0x8250;
GL_DEBUG_TYPE_OTHER_ARB :: 0x8251;
GL_MAX_DEBUG_MESSAGE_LENGTH_ARB :: 0x9143;
GL_MAX_DEBUG_LOGGED_MESSAGES_ARB :: 0x9144;
GL_DEBUG_LOGGED_MESSAGES_ARB :: 0x9145;
GL_DEBUG_SEVERITY_HIGH_ARB :: 0x9146;
GL_DEBUG_SEVERITY_MEDIUM_ARB :: 0x9147;
GL_DEBUG_SEVERITY_LOW_ARB :: 0x9148;

GL_ARB_depth_buffer_float :: 1;

GL_ARB_depth_clamp :: 1;

GL_ARB_derivative_control :: 1;

GL_ARB_direct_state_access :: 1;

GL_ARB_draw_buffers_blend :: 1;

GL_ARB_draw_elements_base_vertex :: 1;

GL_ARB_draw_indirect :: 1;

GL_ARB_draw_instanced :: 1;

GL_ARB_enhanced_layouts :: 1;

GL_ARB_explicit_attrib_location :: 1;

GL_ARB_explicit_uniform_location :: 1;

GL_ARB_fragment_coord_conventions :: 1;

GL_ARB_fragment_layer_viewport :: 1;

GL_ARB_fragment_shader_interlock :: 1;

GL_ARB_framebuffer_no_attachments :: 1;

GL_ARB_framebuffer_object :: 1;

GL_ARB_framebuffer_sRGB :: 1;

GL_ARB_geometry_shader4 :: 1;
GL_LINES_ADJACENCY_ARB :: 0x000A;
GL_LINE_STRIP_ADJACENCY_ARB :: 0x000B;
GL_TRIANGLES_ADJACENCY_ARB :: 0x000C;
GL_TRIANGLE_STRIP_ADJACENCY_ARB :: 0x000D;
GL_PROGRAM_POINT_SIZE_ARB :: 0x8642;
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB :: 0x8C29;
GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB :: 0x8DA7;
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB :: 0x8DA8;
GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB :: 0x8DA9;
GL_GEOMETRY_SHADER_ARB :: 0x8DD9;
GL_GEOMETRY_VERTICES_OUT_ARB :: 0x8DDA;
GL_GEOMETRY_INPUT_TYPE_ARB :: 0x8DDB;
GL_GEOMETRY_OUTPUT_TYPE_ARB :: 0x8DDC;
GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB :: 0x8DDD;
GL_MAX_VERTEX_VARYING_COMPONENTS_ARB :: 0x8DDE;
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB :: 0x8DDF;
GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB :: 0x8DE0;
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB :: 0x8DE1;

GL_ARB_get_program_binary :: 1;

GL_ARB_get_texture_sub_image :: 1;

GL_ARB_gl_spirv :: 1;
GL_SHADER_BINARY_FORMAT_SPIR_V_ARB :: 0x9551;
GL_SPIR_V_BINARY_ARB :: 0x9552;

GL_ARB_gpu_shader5 :: 1;

GL_ARB_gpu_shader_fp64 :: 1;

GL_ARB_gpu_shader_int64 :: 1;
GL_INT64_ARB :: 0x140E;
GL_INT64_VEC2_ARB :: 0x8FE9;
GL_INT64_VEC3_ARB :: 0x8FEA;
GL_INT64_VEC4_ARB :: 0x8FEB;
GL_UNSIGNED_INT64_VEC2_ARB :: 0x8FF5;
GL_UNSIGNED_INT64_VEC3_ARB :: 0x8FF6;
GL_UNSIGNED_INT64_VEC4_ARB :: 0x8FF7;

GL_ARB_half_float_vertex :: 1;

GL_ARB_imaging :: 1;

GL_ARB_indirect_parameters :: 1;
GL_PARAMETER_BUFFER_ARB :: 0x80EE;
GL_PARAMETER_BUFFER_BINDING_ARB :: 0x80EF;

GL_ARB_instanced_arrays :: 1;
GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB :: 0x88FE;

GL_ARB_internalformat_query :: 1;

GL_ARB_internalformat_query2 :: 1;
GL_SRGB_DECODE_ARB :: 0x8299;
GL_VIEW_CLASS_EAC_R11 :: 0x9383;
GL_VIEW_CLASS_EAC_RG11 :: 0x9384;
GL_VIEW_CLASS_ETC2_RGB :: 0x9385;
GL_VIEW_CLASS_ETC2_RGBA :: 0x9386;
GL_VIEW_CLASS_ETC2_EAC_RGBA :: 0x9387;
GL_VIEW_CLASS_ASTC_4x4_RGBA :: 0x9388;
GL_VIEW_CLASS_ASTC_5x4_RGBA :: 0x9389;
GL_VIEW_CLASS_ASTC_5x5_RGBA :: 0x938A;
GL_VIEW_CLASS_ASTC_6x5_RGBA :: 0x938B;
GL_VIEW_CLASS_ASTC_6x6_RGBA :: 0x938C;
GL_VIEW_CLASS_ASTC_8x5_RGBA :: 0x938D;
GL_VIEW_CLASS_ASTC_8x6_RGBA :: 0x938E;
GL_VIEW_CLASS_ASTC_8x8_RGBA :: 0x938F;
GL_VIEW_CLASS_ASTC_10x5_RGBA :: 0x9390;
GL_VIEW_CLASS_ASTC_10x6_RGBA :: 0x9391;
GL_VIEW_CLASS_ASTC_10x8_RGBA :: 0x9392;
GL_VIEW_CLASS_ASTC_10x10_RGBA :: 0x9393;
GL_VIEW_CLASS_ASTC_12x10_RGBA :: 0x9394;
GL_VIEW_CLASS_ASTC_12x12_RGBA :: 0x9395;

GL_ARB_invalidate_subdata :: 1;

GL_ARB_map_buffer_alignment :: 1;

GL_ARB_map_buffer_range :: 1;

GL_ARB_multi_bind :: 1;

GL_ARB_multi_draw_indirect :: 1;

GL_ARB_occlusion_query2 :: 1;

GL_ARB_parallel_shader_compile :: 1;
GL_MAX_SHADER_COMPILER_THREADS_ARB :: 0x91B0;
GL_COMPLETION_STATUS_ARB :: 0x91B1;

GL_ARB_pipeline_statistics_query :: 1;
GL_VERTICES_SUBMITTED_ARB :: 0x82EE;
GL_PRIMITIVES_SUBMITTED_ARB :: 0x82EF;
GL_VERTEX_SHADER_INVOCATIONS_ARB :: 0x82F0;
GL_TESS_CONTROL_SHADER_PATCHES_ARB :: 0x82F1;
GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB :: 0x82F2;
GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB :: 0x82F3;
GL_FRAGMENT_SHADER_INVOCATIONS_ARB :: 0x82F4;
GL_COMPUTE_SHADER_INVOCATIONS_ARB :: 0x82F5;
GL_CLIPPING_INPUT_PRIMITIVES_ARB :: 0x82F6;
GL_CLIPPING_OUTPUT_PRIMITIVES_ARB :: 0x82F7;

GL_ARB_pixel_buffer_object :: 1;
GL_PIXEL_PACK_BUFFER_ARB :: 0x88EB;
GL_PIXEL_UNPACK_BUFFER_ARB :: 0x88EC;
GL_PIXEL_PACK_BUFFER_BINDING_ARB :: 0x88ED;
GL_PIXEL_UNPACK_BUFFER_BINDING_ARB :: 0x88EF;

GL_ARB_polygon_offset_clamp :: 1;

GL_ARB_post_depth_coverage :: 1;

GL_ARB_program_interface_query :: 1;

GL_ARB_provoking_vertex :: 1;

GL_ARB_query_buffer_object :: 1;

GL_ARB_robust_buffer_access_behavior :: 1;

GL_ARB_robustness :: 1;
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB :: 0x00000004;
GL_LOSE_CONTEXT_ON_RESET_ARB :: 0x8252;
GL_GUILTY_CONTEXT_RESET_ARB :: 0x8253;
GL_INNOCENT_CONTEXT_RESET_ARB :: 0x8254;
GL_UNKNOWN_CONTEXT_RESET_ARB :: 0x8255;
GL_RESET_NOTIFICATION_STRATEGY_ARB :: 0x8256;
GL_NO_RESET_NOTIFICATION_ARB :: 0x8261;

GL_ARB_robustness_isolation :: 1;

GL_ARB_sample_locations :: 1;
GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB :: 0x933D;
GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB :: 0x933E;
GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB :: 0x933F;
GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB :: 0x9340;
GL_SAMPLE_LOCATION_ARB :: 0x8E50;
GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB :: 0x9341;
GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB :: 0x9342;
GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB :: 0x9343;

GL_ARB_sample_shading :: 1;
GL_SAMPLE_SHADING_ARB :: 0x8C36;
GL_MIN_SAMPLE_SHADING_VALUE_ARB :: 0x8C37;

GL_ARB_sampler_objects :: 1;

GL_ARB_seamless_cube_map :: 1;

GL_ARB_seamless_cubemap_per_texture :: 1;

GL_ARB_separate_shader_objects :: 1;

GL_ARB_shader_atomic_counter_ops :: 1;

GL_ARB_shader_atomic_counters :: 1;

GL_ARB_shader_ballot :: 1;

GL_ARB_shader_bit_encoding :: 1;

GL_ARB_shader_clock :: 1;

GL_ARB_shader_draw_parameters :: 1;

GL_ARB_shader_group_vote :: 1;

GL_ARB_shader_image_load_store :: 1;

GL_ARB_shader_image_size :: 1;

GL_ARB_shader_precision :: 1;

GL_ARB_shader_stencil_export :: 1;

GL_ARB_shader_storage_buffer_object :: 1;

GL_ARB_shader_subroutine :: 1;

GL_ARB_shader_texture_image_samples :: 1;

GL_ARB_shader_viewport_layer_array :: 1;

GL_ARB_shading_language_420pack :: 1;

GL_ARB_shading_language_include :: 1;
GL_SHADER_INCLUDE_ARB :: 0x8DAE;
GL_NAMED_STRING_LENGTH_ARB :: 0x8DE9;
GL_NAMED_STRING_TYPE_ARB :: 0x8DEA;

GL_ARB_shading_language_packing :: 1;

GL_ARB_sparse_buffer :: 1;
GL_SPARSE_STORAGE_BIT_ARB :: 0x0400;
GL_SPARSE_BUFFER_PAGE_SIZE_ARB :: 0x82F8;

GL_ARB_sparse_texture :: 1;
GL_TEXTURE_SPARSE_ARB :: 0x91A6;
GL_VIRTUAL_PAGE_SIZE_INDEX_ARB :: 0x91A7;
GL_NUM_SPARSE_LEVELS_ARB :: 0x91AA;
GL_NUM_VIRTUAL_PAGE_SIZES_ARB :: 0x91A8;
GL_VIRTUAL_PAGE_SIZE_X_ARB :: 0x9195;
GL_VIRTUAL_PAGE_SIZE_Y_ARB :: 0x9196;
GL_VIRTUAL_PAGE_SIZE_Z_ARB :: 0x9197;
GL_MAX_SPARSE_TEXTURE_SIZE_ARB :: 0x9198;
GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB :: 0x9199;
GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB :: 0x919A;
GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB :: 0x91A9;

GL_ARB_sparse_texture2 :: 1;

GL_ARB_sparse_texture_clamp :: 1;

GL_ARB_spirv_extensions :: 1;

GL_ARB_stencil_texturing :: 1;

GL_ARB_sync :: 1;

GL_ARB_tessellation_shader :: 1;

GL_ARB_texture_barrier :: 1;

GL_ARB_texture_border_clamp :: 1;
GL_CLAMP_TO_BORDER_ARB :: 0x812D;

GL_ARB_texture_buffer_object :: 1;
GL_TEXTURE_BUFFER_ARB :: 0x8C2A;
GL_MAX_TEXTURE_BUFFER_SIZE_ARB :: 0x8C2B;
GL_TEXTURE_BINDING_BUFFER_ARB :: 0x8C2C;
GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB :: 0x8C2D;
GL_TEXTURE_BUFFER_FORMAT_ARB :: 0x8C2E;

GL_ARB_texture_buffer_object_rgb32 :: 1;

GL_ARB_texture_buffer_range :: 1;

GL_ARB_texture_compression_bptc :: 1;
GL_COMPRESSED_RGBA_BPTC_UNORM_ARB :: 0x8E8C;
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB :: 0x8E8D;
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB :: 0x8E8E;
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB :: 0x8E8F;

GL_ARB_texture_compression_rgtc :: 1;

GL_ARB_texture_cube_map_array :: 1;
GL_TEXTURE_CUBE_MAP_ARRAY_ARB :: 0x9009;
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB :: 0x900A;
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB :: 0x900B;
GL_SAMPLER_CUBE_MAP_ARRAY_ARB :: 0x900C;
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB :: 0x900D;
GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB :: 0x900E;
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB :: 0x900F;

GL_ARB_texture_filter_anisotropic :: 1;

GL_ARB_texture_filter_minmax :: 1;
GL_TEXTURE_REDUCTION_MODE_ARB :: 0x9366;
GL_WEIGHTED_AVERAGE_ARB :: 0x9367;

GL_ARB_texture_gather :: 1;
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB :: 0x8E5E;
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB :: 0x8E5F;
GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB :: 0x8F9F;

GL_ARB_texture_mirror_clamp_to_edge :: 1;

GL_ARB_texture_mirrored_repeat :: 1;
GL_MIRRORED_REPEAT_ARB :: 0x8370;

GL_ARB_texture_multisample :: 1;

GL_ARB_texture_non_power_of_two :: 1;

GL_ARB_texture_query_levels :: 1;

GL_ARB_texture_query_lod :: 1;

GL_ARB_texture_rg :: 1;

GL_ARB_texture_rgb10_a2ui :: 1;

GL_ARB_texture_stencil8 :: 1;

GL_ARB_texture_storage :: 1;

GL_ARB_texture_storage_multisample :: 1;

GL_ARB_texture_swizzle :: 1;

GL_ARB_texture_view :: 1;

GL_ARB_timer_query :: 1;

GL_ARB_transform_feedback2 :: 1;

GL_ARB_transform_feedback3 :: 1;

GL_ARB_transform_feedback_instanced :: 1;

GL_ARB_transform_feedback_overflow_query :: 1;
GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB :: 0x82EC;
GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB :: 0x82ED;

GL_ARB_uniform_buffer_object :: 1;

GL_ARB_vertex_array_bgra :: 1;

GL_ARB_vertex_array_object :: 1;

GL_ARB_vertex_attrib_64bit :: 1;

GL_ARB_vertex_attrib_binding :: 1;

GL_ARB_vertex_type_10f_11f_11f_rev :: 1;

GL_ARB_vertex_type_2_10_10_10_rev :: 1;

GL_ARB_viewport_array :: 1;

GL_KHR_blend_equation_advanced :: 1;
GL_MULTIPLY_KHR :: 0x9294;
GL_SCREEN_KHR :: 0x9295;
GL_OVERLAY_KHR :: 0x9296;
GL_DARKEN_KHR :: 0x9297;
GL_LIGHTEN_KHR :: 0x9298;
GL_COLORDODGE_KHR :: 0x9299;
GL_COLORBURN_KHR :: 0x929A;
GL_HARDLIGHT_KHR :: 0x929B;
GL_SOFTLIGHT_KHR :: 0x929C;
GL_DIFFERENCE_KHR :: 0x929E;
GL_EXCLUSION_KHR :: 0x92A0;
GL_HSL_HUE_KHR :: 0x92AD;
GL_HSL_SATURATION_KHR :: 0x92AE;
GL_HSL_COLOR_KHR :: 0x92AF;
GL_HSL_LUMINOSITY_KHR :: 0x92B0;

GL_KHR_blend_equation_advanced_coherent :: 1;
GL_BLEND_ADVANCED_COHERENT_KHR :: 0x9285;

GL_KHR_context_flush_control :: 1;

GL_KHR_debug :: 1;

GL_KHR_no_error :: 1;
GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR :: 0x00000008;

GL_KHR_parallel_shader_compile :: 1;
GL_MAX_SHADER_COMPILER_THREADS_KHR :: 0x91B0;
GL_COMPLETION_STATUS_KHR :: 0x91B1;

GL_KHR_robust_buffer_access_behavior :: 1;

GL_KHR_robustness :: 1;
GL_CONTEXT_ROBUST_ACCESS :: 0x90F3;

GL_KHR_shader_subgroup :: 1;
GL_SUBGROUP_SIZE_KHR :: 0x9532;
GL_SUBGROUP_SUPPORTED_STAGES_KHR :: 0x9533;
GL_SUBGROUP_SUPPORTED_FEATURES_KHR :: 0x9534;
GL_SUBGROUP_QUAD_ALL_STAGES_KHR :: 0x9535;
GL_SUBGROUP_FEATURE_BASIC_BIT_KHR :: 0x00000001;
GL_SUBGROUP_FEATURE_VOTE_BIT_KHR :: 0x00000002;
GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR :: 0x00000004;
GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR :: 0x00000008;
GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR :: 0x00000010;
GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR :: 0x00000020;
GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR :: 0x00000040;
GL_SUBGROUP_FEATURE_QUAD_BIT_KHR :: 0x00000080;

GL_KHR_texture_compression_astc_hdr :: 1;
GL_COMPRESSED_RGBA_ASTC_4x4_KHR :: 0x93B0;
GL_COMPRESSED_RGBA_ASTC_5x4_KHR :: 0x93B1;
GL_COMPRESSED_RGBA_ASTC_5x5_KHR :: 0x93B2;
GL_COMPRESSED_RGBA_ASTC_6x5_KHR :: 0x93B3;
GL_COMPRESSED_RGBA_ASTC_6x6_KHR :: 0x93B4;
GL_COMPRESSED_RGBA_ASTC_8x5_KHR :: 0x93B5;
GL_COMPRESSED_RGBA_ASTC_8x6_KHR :: 0x93B6;
GL_COMPRESSED_RGBA_ASTC_8x8_KHR :: 0x93B7;
GL_COMPRESSED_RGBA_ASTC_10x5_KHR :: 0x93B8;
GL_COMPRESSED_RGBA_ASTC_10x6_KHR :: 0x93B9;
GL_COMPRESSED_RGBA_ASTC_10x8_KHR :: 0x93BA;
GL_COMPRESSED_RGBA_ASTC_10x10_KHR :: 0x93BB;
GL_COMPRESSED_RGBA_ASTC_12x10_KHR :: 0x93BC;
GL_COMPRESSED_RGBA_ASTC_12x12_KHR :: 0x93BD;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR :: 0x93D0;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR :: 0x93D1;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR :: 0x93D2;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR :: 0x93D3;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR :: 0x93D4;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR :: 0x93D5;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR :: 0x93D6;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR :: 0x93D7;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR :: 0x93D8;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR :: 0x93D9;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR :: 0x93DA;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR :: 0x93DB;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR :: 0x93DC;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR :: 0x93DD;

GL_KHR_texture_compression_astc_ldr :: 1;

GL_KHR_texture_compression_astc_sliced_3d :: 1;

GL_AMD_framebuffer_multisample_advanced :: 1;
GL_RENDERBUFFER_STORAGE_SAMPLES_AMD :: 0x91B2;
GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD :: 0x91B3;
GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD :: 0x91B4;
GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD :: 0x91B5;
GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD :: 0x91B6;
GL_SUPPORTED_MULTISAMPLE_MODES_AMD :: 0x91B7;

GL_AMD_performance_monitor :: 1;
GL_COUNTER_TYPE_AMD :: 0x8BC0;
GL_COUNTER_RANGE_AMD :: 0x8BC1;
GL_UNSIGNED_INT64_AMD :: 0x8BC2;
GL_PERCENTAGE_AMD :: 0x8BC3;
GL_PERFMON_RESULT_AVAILABLE_AMD :: 0x8BC4;
GL_PERFMON_RESULT_SIZE_AMD :: 0x8BC5;
GL_PERFMON_RESULT_AMD :: 0x8BC6;

GL_APPLE_rgb_422 :: 1;
GL_RGB_422_APPLE :: 0x8A1F;
GL_UNSIGNED_SHORT_8_8_APPLE :: 0x85BA;
GL_UNSIGNED_SHORT_8_8_REV_APPLE :: 0x85BB;
GL_RGB_RAW_422_APPLE :: 0x8A51;

GL_EXT_EGL_image_storage :: 1;

GL_EXT_EGL_sync :: 1;

GL_EXT_debug_label :: 1;
GL_PROGRAM_PIPELINE_OBJECT_EXT :: 0x8A4F;
GL_PROGRAM_OBJECT_EXT :: 0x8B40;
GL_SHADER_OBJECT_EXT :: 0x8B48;
GL_BUFFER_OBJECT_EXT :: 0x9151;
GL_QUERY_OBJECT_EXT :: 0x9153;
GL_VERTEX_ARRAY_OBJECT_EXT :: 0x9154;

GL_EXT_debug_marker :: 1;

GL_EXT_direct_state_access :: 1;
GL_PROGRAM_MATRIX_EXT :: 0x8E2D;
GL_TRANSPOSE_PROGRAM_MATRIX_EXT :: 0x8E2E;
GL_PROGRAM_MATRIX_STACK_DEPTH_EXT :: 0x8E2F;

GL_EXT_draw_instanced :: 1;

GL_EXT_multiview_tessellation_geometry_shader :: 1;

GL_EXT_multiview_texture_multisample :: 1;

GL_EXT_multiview_timer_query :: 1;

GL_EXT_polygon_offset_clamp :: 1;
GL_POLYGON_OFFSET_CLAMP_EXT :: 0x8E1B;

GL_EXT_post_depth_coverage :: 1;

GL_EXT_raster_multisample :: 1;
GL_RASTER_MULTISAMPLE_EXT :: 0x9327;
GL_RASTER_SAMPLES_EXT :: 0x9328;
GL_MAX_RASTER_SAMPLES_EXT :: 0x9329;
GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT :: 0x932A;
GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT :: 0x932B;
GL_EFFECTIVE_RASTER_SAMPLES_EXT :: 0x932C;

GL_EXT_separate_shader_objects :: 1;
GL_ACTIVE_PROGRAM_EXT :: 0x8B8D;

GL_EXT_shader_framebuffer_fetch :: 1;
GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT :: 0x8A52;

GL_EXT_shader_framebuffer_fetch_non_coherent :: 1;

GL_EXT_shader_integer_mix :: 1;

GL_EXT_texture_compression_s3tc :: 1;
GL_COMPRESSED_RGB_S3TC_DXT1_EXT :: 0x83F0;
GL_COMPRESSED_RGBA_S3TC_DXT1_EXT :: 0x83F1;
GL_COMPRESSED_RGBA_S3TC_DXT3_EXT :: 0x83F2;
GL_COMPRESSED_RGBA_S3TC_DXT5_EXT :: 0x83F3;

GL_EXT_texture_filter_minmax :: 1;
GL_TEXTURE_REDUCTION_MODE_EXT :: 0x9366;
GL_WEIGHTED_AVERAGE_EXT :: 0x9367;

GL_EXT_texture_sRGB_R8 :: 1;
GL_SR8_EXT :: 0x8FBD;

GL_EXT_texture_sRGB_RG8 :: 1;
GL_SRG8_EXT :: 0x8FBE;

GL_EXT_texture_sRGB_decode :: 1;
GL_TEXTURE_SRGB_DECODE_EXT :: 0x8A48;
GL_DECODE_EXT :: 0x8A49;
GL_SKIP_DECODE_EXT :: 0x8A4A;

GL_EXT_texture_shadow_lod :: 1;

GL_EXT_texture_storage :: 1;
GL_TEXTURE_IMMUTABLE_FORMAT_EXT :: 0x912F;
GL_ALPHA8_EXT :: 0x803C;
GL_LUMINANCE8_EXT :: 0x8040;
GL_LUMINANCE8_ALPHA8_EXT :: 0x8045;
GL_RGBA32F_EXT :: 0x8814;
GL_RGB32F_EXT :: 0x8815;
GL_ALPHA32F_EXT :: 0x8816;
GL_LUMINANCE32F_EXT :: 0x8818;
GL_LUMINANCE_ALPHA32F_EXT :: 0x8819;
GL_RGBA16F_EXT :: 0x881A;
GL_RGB16F_EXT :: 0x881B;
GL_ALPHA16F_EXT :: 0x881C;
GL_LUMINANCE16F_EXT :: 0x881E;
GL_LUMINANCE_ALPHA16F_EXT :: 0x881F;
GL_RGB10_A2_EXT :: 0x8059;
GL_RGB10_EXT :: 0x8052;
GL_BGRA8_EXT :: 0x93A1;
GL_R8_EXT :: 0x8229;
GL_RG8_EXT :: 0x822B;
GL_R32F_EXT :: 0x822E;
GL_RG32F_EXT :: 0x8230;
GL_R16F_EXT :: 0x822D;
GL_RG16F_EXT :: 0x822F;

GL_EXT_window_rectangles :: 1;
GL_INCLUSIVE_EXT :: 0x8F10;
GL_EXCLUSIVE_EXT :: 0x8F11;
GL_WINDOW_RECTANGLE_EXT :: 0x8F12;
GL_WINDOW_RECTANGLE_MODE_EXT :: 0x8F13;
GL_MAX_WINDOW_RECTANGLES_EXT :: 0x8F14;
GL_NUM_WINDOW_RECTANGLES_EXT :: 0x8F15;

GL_INTEL_blackhole_render :: 1;
GL_BLACKHOLE_RENDER_INTEL :: 0x83FC;

GL_INTEL_conservative_rasterization :: 1;
GL_CONSERVATIVE_RASTERIZATION_INTEL :: 0x83FE;

GL_INTEL_framebuffer_CMAA :: 1;

GL_INTEL_performance_query :: 1;
GL_PERFQUERY_SINGLE_CONTEXT_INTEL :: 0x00000000;
GL_PERFQUERY_GLOBAL_CONTEXT_INTEL :: 0x00000001;
GL_PERFQUERY_WAIT_INTEL :: 0x83FB;
GL_PERFQUERY_FLUSH_INTEL :: 0x83FA;
GL_PERFQUERY_DONOT_FLUSH_INTEL :: 0x83F9;
GL_PERFQUERY_COUNTER_EVENT_INTEL :: 0x94F0;
GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL :: 0x94F1;
GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL :: 0x94F2;
GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL :: 0x94F3;
GL_PERFQUERY_COUNTER_RAW_INTEL :: 0x94F4;
GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL :: 0x94F5;
GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL :: 0x94F8;
GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL :: 0x94F9;
GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL :: 0x94FA;
GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL :: 0x94FB;
GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL :: 0x94FC;
GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL :: 0x94FD;
GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL :: 0x94FE;
GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL :: 0x94FF;
GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL :: 0x9500;

GL_MESA_framebuffer_flip_x :: 1;
GL_FRAMEBUFFER_FLIP_X_MESA :: 0x8BBC;

GL_MESA_framebuffer_flip_y :: 1;
GL_FRAMEBUFFER_FLIP_Y_MESA :: 0x8BBB;

GL_MESA_framebuffer_swap_xy :: 1;
GL_FRAMEBUFFER_SWAP_XY_MESA :: 0x8BBD;

GL_NV_bindless_multi_draw_indirect :: 1;

GL_NV_bindless_multi_draw_indirect_count :: 1;

GL_NV_bindless_texture :: 1;

GL_NV_blend_equation_advanced :: 1;
GL_BLEND_OVERLAP_NV :: 0x9281;
GL_BLEND_PREMULTIPLIED_SRC_NV :: 0x9280;
GL_BLUE_NV :: 0x1905;
GL_COLORBURN_NV :: 0x929A;
GL_COLORDODGE_NV :: 0x9299;
GL_CONJOINT_NV :: 0x9284;
GL_CONTRAST_NV :: 0x92A1;
GL_DARKEN_NV :: 0x9297;
GL_DIFFERENCE_NV :: 0x929E;
GL_DISJOINT_NV :: 0x9283;
GL_DST_ATOP_NV :: 0x928F;
GL_DST_IN_NV :: 0x928B;
GL_DST_NV :: 0x9287;
GL_DST_OUT_NV :: 0x928D;
GL_DST_OVER_NV :: 0x9289;
GL_EXCLUSION_NV :: 0x92A0;
GL_GREEN_NV :: 0x1904;
GL_HARDLIGHT_NV :: 0x929B;
GL_HARDMIX_NV :: 0x92A9;
GL_HSL_COLOR_NV :: 0x92AF;
GL_HSL_HUE_NV :: 0x92AD;
GL_HSL_LUMINOSITY_NV :: 0x92B0;
GL_HSL_SATURATION_NV :: 0x92AE;
GL_INVERT_OVG_NV :: 0x92B4;
GL_INVERT_RGB_NV :: 0x92A3;
GL_LIGHTEN_NV :: 0x9298;
GL_LINEARBURN_NV :: 0x92A5;
GL_LINEARDODGE_NV :: 0x92A4;
GL_LINEARLIGHT_NV :: 0x92A7;
GL_MINUS_CLAMPED_NV :: 0x92B3;
GL_MINUS_NV :: 0x929F;
GL_MULTIPLY_NV :: 0x9294;
GL_OVERLAY_NV :: 0x9296;
GL_PINLIGHT_NV :: 0x92A8;
GL_PLUS_CLAMPED_ALPHA_NV :: 0x92B2;
GL_PLUS_CLAMPED_NV :: 0x92B1;
GL_PLUS_DARKER_NV :: 0x9292;
GL_PLUS_NV :: 0x9291;
GL_RED_NV :: 0x1903;
GL_SCREEN_NV :: 0x9295;
GL_SOFTLIGHT_NV :: 0x929C;
GL_SRC_ATOP_NV :: 0x928E;
GL_SRC_IN_NV :: 0x928A;
GL_SRC_NV :: 0x9286;
GL_SRC_OUT_NV :: 0x928C;
GL_SRC_OVER_NV :: 0x9288;
GL_UNCORRELATED_NV :: 0x9282;
GL_VIVIDLIGHT_NV :: 0x92A6;
GL_XOR_NV :: 0x1506;

GL_NV_blend_equation_advanced_coherent :: 1;
GL_BLEND_ADVANCED_COHERENT_NV :: 0x9285;

GL_NV_blend_minmax_factor :: 1;
GL_FACTOR_MIN_AMD :: 0x901C;
GL_FACTOR_MAX_AMD :: 0x901D;

GL_NV_clip_space_w_scaling :: 1;
GL_VIEWPORT_POSITION_W_SCALE_NV :: 0x937C;
GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV :: 0x937D;
GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV :: 0x937E;

GL_NV_command_list :: 1;
GL_TERMINATE_SEQUENCE_COMMAND_NV :: 0x0000;
GL_NOP_COMMAND_NV :: 0x0001;
GL_DRAW_ELEMENTS_COMMAND_NV :: 0x0002;
GL_DRAW_ARRAYS_COMMAND_NV :: 0x0003;
GL_DRAW_ELEMENTS_STRIP_COMMAND_NV :: 0x0004;
GL_DRAW_ARRAYS_STRIP_COMMAND_NV :: 0x0005;
GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV :: 0x0006;
GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV :: 0x0007;
GL_ELEMENT_ADDRESS_COMMAND_NV :: 0x0008;
GL_ATTRIBUTE_ADDRESS_COMMAND_NV :: 0x0009;
GL_UNIFORM_ADDRESS_COMMAND_NV :: 0x000A;
GL_BLEND_COLOR_COMMAND_NV :: 0x000B;
GL_STENCIL_REF_COMMAND_NV :: 0x000C;
GL_LINE_WIDTH_COMMAND_NV :: 0x000D;
GL_POLYGON_OFFSET_COMMAND_NV :: 0x000E;
GL_ALPHA_REF_COMMAND_NV :: 0x000F;
GL_VIEWPORT_COMMAND_NV :: 0x0010;
GL_SCISSOR_COMMAND_NV :: 0x0011;
GL_FRONT_FACE_COMMAND_NV :: 0x0012;

GL_NV_compute_shader_derivatives :: 1;

GL_NV_conditional_render :: 1;
GL_QUERY_WAIT_NV :: 0x8E13;
GL_QUERY_NO_WAIT_NV :: 0x8E14;
GL_QUERY_BY_REGION_WAIT_NV :: 0x8E15;
GL_QUERY_BY_REGION_NO_WAIT_NV :: 0x8E16;

GL_NV_conservative_raster :: 1;
GL_CONSERVATIVE_RASTERIZATION_NV :: 0x9346;
GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV :: 0x9347;
GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV :: 0x9348;
GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV :: 0x9349;

GL_NV_conservative_raster_dilate :: 1;
GL_CONSERVATIVE_RASTER_DILATE_NV :: 0x9379;
GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV :: 0x937A;
GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV :: 0x937B;

GL_NV_conservative_raster_pre_snap :: 1;
GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV :: 0x9550;

GL_NV_conservative_raster_pre_snap_triangles :: 1;
GL_CONSERVATIVE_RASTER_MODE_NV :: 0x954D;
GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV :: 0x954E;
GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV :: 0x954F;

GL_NV_conservative_raster_underestimation :: 1;

GL_NV_depth_buffer_float :: 1;
GL_DEPTH_COMPONENT32F_NV :: 0x8DAB;
GL_DEPTH32F_STENCIL8_NV :: 0x8DAC;
GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV :: 0x8DAD;
GL_DEPTH_BUFFER_FLOAT_MODE_NV :: 0x8DAF;

GL_NV_draw_vulkan_image :: 1;

GL_NV_fill_rectangle :: 1;
GL_FILL_RECTANGLE_NV :: 0x933C;

GL_NV_fragment_coverage_to_color :: 1;
GL_FRAGMENT_COVERAGE_TO_COLOR_NV :: 0x92DD;
GL_FRAGMENT_COVERAGE_COLOR_NV :: 0x92DE;

GL_NV_fragment_shader_barycentric :: 1;

GL_NV_fragment_shader_interlock :: 1;

GL_NV_framebuffer_mixed_samples :: 1;
GL_COVERAGE_MODULATION_TABLE_NV :: 0x9331;
GL_COLOR_SAMPLES_NV :: 0x8E20;
GL_DEPTH_SAMPLES_NV :: 0x932D;
GL_STENCIL_SAMPLES_NV :: 0x932E;
GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV :: 0x932F;
GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV :: 0x9330;
GL_COVERAGE_MODULATION_NV :: 0x9332;
GL_COVERAGE_MODULATION_TABLE_SIZE_NV :: 0x9333;

GL_NV_framebuffer_multisample_coverage :: 1;
GL_RENDERBUFFER_COVERAGE_SAMPLES_NV :: 0x8CAB;
GL_RENDERBUFFER_COLOR_SAMPLES_NV :: 0x8E10;
GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV :: 0x8E11;
GL_MULTISAMPLE_COVERAGE_MODES_NV :: 0x8E12;

GL_NV_geometry_shader_passthrough :: 1;

GL_NV_gpu_shader5 :: 1;

GL_INT64_NV :: 0x140E;
GL_UNSIGNED_INT64_NV :: 0x140F;
GL_INT8_NV :: 0x8FE0;
GL_INT8_VEC2_NV :: 0x8FE1;
GL_INT8_VEC3_NV :: 0x8FE2;
GL_INT8_VEC4_NV :: 0x8FE3;
GL_INT16_NV :: 0x8FE4;
GL_INT16_VEC2_NV :: 0x8FE5;
GL_INT16_VEC3_NV :: 0x8FE6;
GL_INT16_VEC4_NV :: 0x8FE7;
GL_INT64_VEC2_NV :: 0x8FE9;
GL_INT64_VEC3_NV :: 0x8FEA;
GL_INT64_VEC4_NV :: 0x8FEB;
GL_UNSIGNED_INT8_NV :: 0x8FEC;
GL_UNSIGNED_INT8_VEC2_NV :: 0x8FED;
GL_UNSIGNED_INT8_VEC3_NV :: 0x8FEE;
GL_UNSIGNED_INT8_VEC4_NV :: 0x8FEF;
GL_UNSIGNED_INT16_NV :: 0x8FF0;
GL_UNSIGNED_INT16_VEC2_NV :: 0x8FF1;
GL_UNSIGNED_INT16_VEC3_NV :: 0x8FF2;
GL_UNSIGNED_INT16_VEC4_NV :: 0x8FF3;
GL_UNSIGNED_INT64_VEC2_NV :: 0x8FF5;
GL_UNSIGNED_INT64_VEC3_NV :: 0x8FF6;
GL_UNSIGNED_INT64_VEC4_NV :: 0x8FF7;
GL_FLOAT16_NV :: 0x8FF8;
GL_FLOAT16_VEC2_NV :: 0x8FF9;
GL_FLOAT16_VEC3_NV :: 0x8FFA;
GL_FLOAT16_VEC4_NV :: 0x8FFB;

GL_NV_internalformat_sample_query :: 1;
GL_MULTISAMPLES_NV :: 0x9371;
GL_SUPERSAMPLE_SCALE_X_NV :: 0x9372;
GL_SUPERSAMPLE_SCALE_Y_NV :: 0x9373;
GL_CONFORMANT_NV :: 0x9374;

GL_NV_memory_attachment :: 1;
GL_ATTACHED_MEMORY_OBJECT_NV :: 0x95A4;
GL_ATTACHED_MEMORY_OFFSET_NV :: 0x95A5;
GL_MEMORY_ATTACHABLE_ALIGNMENT_NV :: 0x95A6;
GL_MEMORY_ATTACHABLE_SIZE_NV :: 0x95A7;
GL_MEMORY_ATTACHABLE_NV :: 0x95A8;
GL_DETACHED_MEMORY_INCARNATION_NV :: 0x95A9;
GL_DETACHED_TEXTURES_NV :: 0x95AA;
GL_DETACHED_BUFFERS_NV :: 0x95AB;
GL_MAX_DETACHED_TEXTURES_NV :: 0x95AC;
GL_MAX_DETACHED_BUFFERS_NV :: 0x95AD;

GL_NV_memory_object_sparse :: 1;

GL_NV_mesh_shader :: 1;
GL_MESH_SHADER_NV :: 0x9559;
GL_TASK_SHADER_NV :: 0x955A;
GL_MAX_MESH_UNIFORM_BLOCKS_NV :: 0x8E60;
GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV :: 0x8E61;
GL_MAX_MESH_IMAGE_UNIFORMS_NV :: 0x8E62;
GL_MAX_MESH_UNIFORM_COMPONENTS_NV :: 0x8E63;
GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV :: 0x8E64;
GL_MAX_MESH_ATOMIC_COUNTERS_NV :: 0x8E65;
GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV :: 0x8E66;
GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV :: 0x8E67;
GL_MAX_TASK_UNIFORM_BLOCKS_NV :: 0x8E68;
GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV :: 0x8E69;
GL_MAX_TASK_IMAGE_UNIFORMS_NV :: 0x8E6A;
GL_MAX_TASK_UNIFORM_COMPONENTS_NV :: 0x8E6B;
GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV :: 0x8E6C;
GL_MAX_TASK_ATOMIC_COUNTERS_NV :: 0x8E6D;
GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV :: 0x8E6E;
GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV :: 0x8E6F;
GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV :: 0x95A2;
GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV :: 0x95A3;
GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV :: 0x9536;
GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV :: 0x9537;
GL_MAX_MESH_OUTPUT_VERTICES_NV :: 0x9538;
GL_MAX_MESH_OUTPUT_PRIMITIVES_NV :: 0x9539;
GL_MAX_TASK_OUTPUT_COUNT_NV :: 0x953A;
GL_MAX_DRAW_MESH_TASKS_COUNT_NV :: 0x953D;
GL_MAX_MESH_VIEWS_NV :: 0x9557;
GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV :: 0x92DF;
GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV :: 0x9543;
GL_MAX_MESH_WORK_GROUP_SIZE_NV :: 0x953B;
GL_MAX_TASK_WORK_GROUP_SIZE_NV :: 0x953C;
GL_MESH_WORK_GROUP_SIZE_NV :: 0x953E;
GL_TASK_WORK_GROUP_SIZE_NV :: 0x953F;
GL_MESH_VERTICES_OUT_NV :: 0x9579;
GL_MESH_PRIMITIVES_OUT_NV :: 0x957A;
GL_MESH_OUTPUT_TYPE_NV :: 0x957B;
GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV :: 0x959C;
GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV :: 0x959D;
GL_REFERENCED_BY_MESH_SHADER_NV :: 0x95A0;
GL_REFERENCED_BY_TASK_SHADER_NV :: 0x95A1;
GL_MESH_SHADER_BIT_NV :: 0x00000040;
GL_TASK_SHADER_BIT_NV :: 0x00000080;
GL_MESH_SUBROUTINE_NV :: 0x957C;
GL_TASK_SUBROUTINE_NV :: 0x957D;
GL_MESH_SUBROUTINE_UNIFORM_NV :: 0x957E;
GL_TASK_SUBROUTINE_UNIFORM_NV :: 0x957F;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV :: 0x959E;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV :: 0x959F;

GL_NV_path_rendering :: 1;
GL_PATH_FORMAT_SVG_NV :: 0x9070;
GL_PATH_FORMAT_PS_NV :: 0x9071;
GL_STANDARD_FONT_NAME_NV :: 0x9072;
GL_SYSTEM_FONT_NAME_NV :: 0x9073;
GL_FILE_NAME_NV :: 0x9074;
GL_PATH_STROKE_WIDTH_NV :: 0x9075;
GL_PATH_END_CAPS_NV :: 0x9076;
GL_PATH_INITIAL_END_CAP_NV :: 0x9077;
GL_PATH_TERMINAL_END_CAP_NV :: 0x9078;
GL_PATH_JOIN_STYLE_NV :: 0x9079;
GL_PATH_MITER_LIMIT_NV :: 0x907A;
GL_PATH_DASH_CAPS_NV :: 0x907B;
GL_PATH_INITIAL_DASH_CAP_NV :: 0x907C;
GL_PATH_TERMINAL_DASH_CAP_NV :: 0x907D;
GL_PATH_DASH_OFFSET_NV :: 0x907E;
GL_PATH_CLIENT_LENGTH_NV :: 0x907F;
GL_PATH_FILL_MODE_NV :: 0x9080;
GL_PATH_FILL_MASK_NV :: 0x9081;
GL_PATH_FILL_COVER_MODE_NV :: 0x9082;
GL_PATH_STROKE_COVER_MODE_NV :: 0x9083;
GL_PATH_STROKE_MASK_NV :: 0x9084;
GL_COUNT_UP_NV :: 0x9088;
GL_COUNT_DOWN_NV :: 0x9089;
GL_PATH_OBJECT_BOUNDING_BOX_NV :: 0x908A;
GL_CONVEX_HULL_NV :: 0x908B;
GL_BOUNDING_BOX_NV :: 0x908D;
GL_TRANSLATE_X_NV :: 0x908E;
GL_TRANSLATE_Y_NV :: 0x908F;
GL_TRANSLATE_2D_NV :: 0x9090;
GL_TRANSLATE_3D_NV :: 0x9091;
GL_AFFINE_2D_NV :: 0x9092;
GL_AFFINE_3D_NV :: 0x9094;
GL_TRANSPOSE_AFFINE_2D_NV :: 0x9096;
GL_TRANSPOSE_AFFINE_3D_NV :: 0x9098;
GL_UTF8_NV :: 0x909A;
GL_UTF16_NV :: 0x909B;
GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV :: 0x909C;
GL_PATH_COMMAND_COUNT_NV :: 0x909D;
GL_PATH_COORD_COUNT_NV :: 0x909E;
GL_PATH_DASH_ARRAY_COUNT_NV :: 0x909F;
GL_PATH_COMPUTED_LENGTH_NV :: 0x90A0;
GL_PATH_FILL_BOUNDING_BOX_NV :: 0x90A1;
GL_PATH_STROKE_BOUNDING_BOX_NV :: 0x90A2;
GL_SQUARE_NV :: 0x90A3;
GL_ROUND_NV :: 0x90A4;
GL_TRIANGULAR_NV :: 0x90A5;
GL_BEVEL_NV :: 0x90A6;
GL_MITER_REVERT_NV :: 0x90A7;
GL_MITER_TRUNCATE_NV :: 0x90A8;
GL_SKIP_MISSING_GLYPH_NV :: 0x90A9;
GL_USE_MISSING_GLYPH_NV :: 0x90AA;
GL_PATH_ERROR_POSITION_NV :: 0x90AB;
GL_ACCUM_ADJACENT_PAIRS_NV :: 0x90AD;
GL_ADJACENT_PAIRS_NV :: 0x90AE;
GL_FIRST_TO_REST_NV :: 0x90AF;
GL_PATH_GEN_MODE_NV :: 0x90B0;
GL_PATH_GEN_COEFF_NV :: 0x90B1;
GL_PATH_GEN_COMPONENTS_NV :: 0x90B3;
GL_PATH_STENCIL_FUNC_NV :: 0x90B7;
GL_PATH_STENCIL_REF_NV :: 0x90B8;
GL_PATH_STENCIL_VALUE_MASK_NV :: 0x90B9;
GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV :: 0x90BD;
GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV :: 0x90BE;
GL_PATH_COVER_DEPTH_FUNC_NV :: 0x90BF;
GL_PATH_DASH_OFFSET_RESET_NV :: 0x90B4;
GL_MOVE_TO_RESETS_NV :: 0x90B5;
GL_MOVE_TO_CONTINUES_NV :: 0x90B6;
GL_CLOSE_PATH_NV :: 0x00;
GL_MOVE_TO_NV :: 0x02;
GL_RELATIVE_MOVE_TO_NV :: 0x03;
GL_LINE_TO_NV :: 0x04;
GL_RELATIVE_LINE_TO_NV :: 0x05;
GL_HORIZONTAL_LINE_TO_NV :: 0x06;
GL_RELATIVE_HORIZONTAL_LINE_TO_NV :: 0x07;
GL_VERTICAL_LINE_TO_NV :: 0x08;
GL_RELATIVE_VERTICAL_LINE_TO_NV :: 0x09;
GL_QUADRATIC_CURVE_TO_NV :: 0x0A;
GL_RELATIVE_QUADRATIC_CURVE_TO_NV :: 0x0B;
GL_CUBIC_CURVE_TO_NV :: 0x0C;
GL_RELATIVE_CUBIC_CURVE_TO_NV :: 0x0D;
GL_SMOOTH_QUADRATIC_CURVE_TO_NV :: 0x0E;
GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV :: 0x0F;
GL_SMOOTH_CUBIC_CURVE_TO_NV :: 0x10;
GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV :: 0x11;
GL_SMALL_CCW_ARC_TO_NV :: 0x12;
GL_RELATIVE_SMALL_CCW_ARC_TO_NV :: 0x13;
GL_SMALL_CW_ARC_TO_NV :: 0x14;
GL_RELATIVE_SMALL_CW_ARC_TO_NV :: 0x15;
GL_LARGE_CCW_ARC_TO_NV :: 0x16;
GL_RELATIVE_LARGE_CCW_ARC_TO_NV :: 0x17;
GL_LARGE_CW_ARC_TO_NV :: 0x18;
GL_RELATIVE_LARGE_CW_ARC_TO_NV :: 0x19;
GL_RESTART_PATH_NV :: 0xF0;
GL_DUP_FIRST_CUBIC_CURVE_TO_NV :: 0xF2;
GL_DUP_LAST_CUBIC_CURVE_TO_NV :: 0xF4;
GL_RECT_NV :: 0xF6;
GL_CIRCULAR_CCW_ARC_TO_NV :: 0xF8;
GL_CIRCULAR_CW_ARC_TO_NV :: 0xFA;
GL_CIRCULAR_TANGENT_ARC_TO_NV :: 0xFC;
GL_ARC_TO_NV :: 0xFE;
GL_RELATIVE_ARC_TO_NV :: 0xFF;
GL_BOLD_BIT_NV :: 0x01;
GL_ITALIC_BIT_NV :: 0x02;
GL_GLYPH_WIDTH_BIT_NV :: 0x01;
GL_GLYPH_HEIGHT_BIT_NV :: 0x02;
GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV :: 0x04;
GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV :: 0x08;
GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV :: 0x10;
GL_GLYPH_VERTICAL_BEARING_X_BIT_NV :: 0x20;
GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV :: 0x40;
GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV :: 0x80;
GL_GLYPH_HAS_KERNING_BIT_NV :: 0x100;
GL_FONT_X_MIN_BOUNDS_BIT_NV :: 0x00010000;
GL_FONT_Y_MIN_BOUNDS_BIT_NV :: 0x00020000;
GL_FONT_X_MAX_BOUNDS_BIT_NV :: 0x00040000;
GL_FONT_Y_MAX_BOUNDS_BIT_NV :: 0x00080000;
GL_FONT_UNITS_PER_EM_BIT_NV :: 0x00100000;
GL_FONT_ASCENDER_BIT_NV :: 0x00200000;
GL_FONT_DESCENDER_BIT_NV :: 0x00400000;
GL_FONT_HEIGHT_BIT_NV :: 0x00800000;
GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV :: 0x01000000;
GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV :: 0x02000000;
GL_FONT_UNDERLINE_POSITION_BIT_NV :: 0x04000000;
GL_FONT_UNDERLINE_THICKNESS_BIT_NV :: 0x08000000;
GL_FONT_HAS_KERNING_BIT_NV :: 0x10000000;
GL_ROUNDED_RECT_NV :: 0xE8;
GL_RELATIVE_ROUNDED_RECT_NV :: 0xE9;
GL_ROUNDED_RECT2_NV :: 0xEA;
GL_RELATIVE_ROUNDED_RECT2_NV :: 0xEB;
GL_ROUNDED_RECT4_NV :: 0xEC;
GL_RELATIVE_ROUNDED_RECT4_NV :: 0xED;
GL_ROUNDED_RECT8_NV :: 0xEE;
GL_RELATIVE_ROUNDED_RECT8_NV :: 0xEF;
GL_RELATIVE_RECT_NV :: 0xF7;
GL_FONT_GLYPHS_AVAILABLE_NV :: 0x9368;
GL_FONT_TARGET_UNAVAILABLE_NV :: 0x9369;
GL_FONT_UNAVAILABLE_NV :: 0x936A;
GL_FONT_UNINTELLIGIBLE_NV :: 0x936B;
GL_CONIC_CURVE_TO_NV :: 0x1A;
GL_RELATIVE_CONIC_CURVE_TO_NV :: 0x1B;
GL_FONT_NUM_GLYPH_INDICES_BIT_NV :: 0x20000000;
GL_STANDARD_FONT_FORMAT_NV :: 0x936C;
GL_PATH_PROJECTION_NV :: 0x1701;
GL_PATH_MODELVIEW_NV :: 0x1700;
GL_PATH_MODELVIEW_STACK_DEPTH_NV :: 0x0BA3;
GL_PATH_MODELVIEW_MATRIX_NV :: 0x0BA6;
GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV :: 0x0D36;
GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV :: 0x84E3;
GL_PATH_PROJECTION_STACK_DEPTH_NV :: 0x0BA4;
GL_PATH_PROJECTION_MATRIX_NV :: 0x0BA7;
GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV :: 0x0D38;
GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV :: 0x84E4;
GL_FRAGMENT_INPUT_NV :: 0x936D;

GL_NV_path_rendering_shared_edge :: 1;
GL_SHARED_EDGE_NV :: 0xC0;

GL_NV_primitive_shading_rate :: 1;
GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV :: 0x95B1;
GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV :: 0x95B2;

GL_NV_representative_fragment_test :: 1;
GL_REPRESENTATIVE_FRAGMENT_TEST_NV :: 0x937F;

GL_NV_sample_locations :: 1;
GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV :: 0x933D;
GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV :: 0x933E;
GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV :: 0x933F;
GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV :: 0x9340;
GL_SAMPLE_LOCATION_NV :: 0x8E50;
GL_PROGRAMMABLE_SAMPLE_LOCATION_NV :: 0x9341;
GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV :: 0x9342;
GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV :: 0x9343;

GL_NV_sample_mask_override_coverage :: 1;

GL_NV_scissor_exclusive :: 1;
GL_SCISSOR_TEST_EXCLUSIVE_NV :: 0x9555;
GL_SCISSOR_BOX_EXCLUSIVE_NV :: 0x9556;

GL_NV_shader_atomic_counters :: 1;

GL_NV_shader_atomic_float :: 1;

GL_NV_shader_atomic_float64 :: 1;

GL_NV_shader_atomic_fp16_vector :: 1;

GL_NV_shader_atomic_int64 :: 1;

GL_NV_shader_buffer_load :: 1;
GL_BUFFER_GPU_ADDRESS_NV :: 0x8F1D;
GL_GPU_ADDRESS_NV :: 0x8F34;
GL_MAX_SHADER_BUFFER_ADDRESS_NV :: 0x8F35;

GL_NV_shader_buffer_store :: 1;
GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV :: 0x00000010;

GL_NV_shader_subgroup_partitioned :: 1;
GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV :: 0x00000100;

GL_NV_shader_texture_footprint :: 1;

GL_NV_shader_thread_group :: 1;
GL_WARP_SIZE_NV :: 0x9339;
GL_WARPS_PER_SM_NV :: 0x933A;
GL_SM_COUNT_NV :: 0x933B;

GL_NV_shader_thread_shuffle :: 1;

GL_NV_shading_rate_image :: 1;
GL_SHADING_RATE_IMAGE_NV :: 0x9563;
GL_SHADING_RATE_NO_INVOCATIONS_NV :: 0x9564;
GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV :: 0x9565;
GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV :: 0x9566;
GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV :: 0x9567;
GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV :: 0x9568;
GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV :: 0x9569;
GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV :: 0x956A;
GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV :: 0x956B;
GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV :: 0x956C;
GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV :: 0x956D;
GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV :: 0x956E;
GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV :: 0x956F;
GL_SHADING_RATE_IMAGE_BINDING_NV :: 0x955B;
GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV :: 0x955C;
GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV :: 0x955D;
GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV :: 0x955E;
GL_MAX_COARSE_FRAGMENT_SAMPLES_NV :: 0x955F;
GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV :: 0x95AE;
GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV :: 0x95AF;
GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV :: 0x95B0;

GL_NV_stereo_view_rendering :: 1;

GL_NV_texture_barrier :: 1;

GL_NV_texture_rectangle_compressed :: 1;

GL_NV_uniform_buffer_unified_memory :: 1;
GL_UNIFORM_BUFFER_UNIFIED_NV :: 0x936E;
GL_UNIFORM_BUFFER_ADDRESS_NV :: 0x936F;
GL_UNIFORM_BUFFER_LENGTH_NV :: 0x9370;

GL_NV_vertex_attrib_integer_64bit :: 1;

GL_NV_vertex_buffer_unified_memory :: 1;
GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV :: 0x8F1E;
GL_ELEMENT_ARRAY_UNIFIED_NV :: 0x8F1F;
GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV :: 0x8F20;
GL_VERTEX_ARRAY_ADDRESS_NV :: 0x8F21;
GL_NORMAL_ARRAY_ADDRESS_NV :: 0x8F22;
GL_COLOR_ARRAY_ADDRESS_NV :: 0x8F23;
GL_INDEX_ARRAY_ADDRESS_NV :: 0x8F24;
GL_TEXTURE_COORD_ARRAY_ADDRESS_NV :: 0x8F25;
GL_EDGE_FLAG_ARRAY_ADDRESS_NV :: 0x8F26;
GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV :: 0x8F27;
GL_FOG_COORD_ARRAY_ADDRESS_NV :: 0x8F28;
GL_ELEMENT_ARRAY_ADDRESS_NV :: 0x8F29;
GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV :: 0x8F2A;
GL_VERTEX_ARRAY_LENGTH_NV :: 0x8F2B;
GL_NORMAL_ARRAY_LENGTH_NV :: 0x8F2C;
GL_COLOR_ARRAY_LENGTH_NV :: 0x8F2D;
GL_INDEX_ARRAY_LENGTH_NV :: 0x8F2E;
GL_TEXTURE_COORD_ARRAY_LENGTH_NV :: 0x8F2F;
GL_EDGE_FLAG_ARRAY_LENGTH_NV :: 0x8F30;
GL_SECONDARY_COLOR_ARRAY_LENGTH_NV :: 0x8F31;
GL_FOG_COORD_ARRAY_LENGTH_NV :: 0x8F32;
GL_ELEMENT_ARRAY_LENGTH_NV :: 0x8F33;
GL_DRAW_INDIRECT_UNIFIED_NV :: 0x8F40;
GL_DRAW_INDIRECT_ADDRESS_NV :: 0x8F41;
GL_DRAW_INDIRECT_LENGTH_NV :: 0x8F42;

GL_NV_viewport_array2 :: 1;

GL_NV_viewport_swizzle :: 1;
GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV :: 0x9350;
GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV :: 0x9351;
GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV :: 0x9352;
GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV :: 0x9353;
GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV :: 0x9354;
GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV :: 0x9355;
GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV :: 0x9356;
GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV :: 0x9357;
GL_VIEWPORT_SWIZZLE_X_NV :: 0x9358;
GL_VIEWPORT_SWIZZLE_Y_NV :: 0x9359;
GL_VIEWPORT_SWIZZLE_Z_NV :: 0x935A;
GL_VIEWPORT_SWIZZLE_W_NV :: 0x935B;

GL_OVR_multiview :: 1;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR :: 0x9630;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR :: 0x9632;
GL_MAX_VIEWS_OVR :: 0x9631;
GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR :: 0x9633;

GL_OVR_multiview2 :: 1;

GLvoid :: void;
GLenum :: u32;

GLfloat :: float;
GLint :: s32;
GLsizei :: s32;
GLbitfield :: u32;
GLdouble :: float64;
GLuint :: u32;
GLboolean :: u8;
GLubyte :: u8;

PFNGLCULLFACEPROC :: #type (mode: GLenum) -> void #c_call;
PFNGLFRONTFACEPROC :: #type (mode: GLenum) -> void #c_call;
PFNGLHINTPROC :: #type (target: GLenum, mode: GLenum) -> void #c_call;
PFNGLLINEWIDTHPROC :: #type (width: GLfloat) -> void #c_call;
PFNGLPOINTSIZEPROC :: #type (size: GLfloat) -> void #c_call;
PFNGLPOLYGONMODEPROC :: #type (face: GLenum, mode: GLenum) -> void #c_call;
PFNGLSCISSORPROC :: #type (x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLTEXPARAMETERFPROC :: #type (target: GLenum, pname: GLenum, param: GLfloat) -> void #c_call;
PFNGLTEXPARAMETERFVPROC :: #type (target: GLenum, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLTEXPARAMETERIPROC :: #type (target: GLenum, pname: GLenum, param: GLint) -> void #c_call;
PFNGLTEXPARAMETERIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLTEXIMAGE1DPROC :: #type (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLTEXIMAGE2DPROC :: #type (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLDRAWBUFFERPROC :: #type (buf: GLenum) -> void #c_call;
PFNGLCLEARPROC :: #type (mask: GLbitfield) -> void #c_call;
PFNGLCLEARCOLORPROC :: #type (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void #c_call;
PFNGLCLEARSTENCILPROC :: #type (s: GLint) -> void #c_call;
PFNGLCLEARDEPTHPROC :: #type (depth: GLdouble) -> void #c_call;
PFNGLSTENCILMASKPROC :: #type (mask: GLuint) -> void #c_call;
PFNGLCOLORMASKPROC :: #type (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> void #c_call;
PFNGLDEPTHMASKPROC :: #type (flag: GLboolean) -> void #c_call;
PFNGLDISABLEPROC :: #type (cap: GLenum) -> void #c_call;
PFNGLENABLEPROC :: #type (cap: GLenum) -> void #c_call;
PFNGLFINISHPROC :: #type () -> void #c_call;
PFNGLFLUSHPROC :: #type () -> void #c_call;
PFNGLBLENDFUNCPROC :: #type (sfactor: GLenum, dfactor: GLenum) -> void #c_call;
PFNGLLOGICOPPROC :: #type (opcode: GLenum) -> void #c_call;
PFNGLSTENCILFUNCPROC :: #type (func: GLenum, ref: GLint, mask: GLuint) -> void #c_call;
PFNGLSTENCILOPPROC :: #type (fail: GLenum, zfail: GLenum, zpass: GLenum) -> void #c_call;
PFNGLDEPTHFUNCPROC :: #type (func: GLenum) -> void #c_call;
PFNGLPIXELSTOREFPROC :: #type (pname: GLenum, param: GLfloat) -> void #c_call;
PFNGLPIXELSTOREIPROC :: #type (pname: GLenum, param: GLint) -> void #c_call;
PFNGLREADBUFFERPROC :: #type (src: GLenum) -> void #c_call;
PFNGLREADPIXELSPROC :: #type (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLGETBOOLEANVPROC :: #type (pname: GLenum, data: *GLboolean) -> void #c_call;
PFNGLGETDOUBLEVPROC :: #type (pname: GLenum, data: *GLdouble) -> void #c_call;
PFNGLGETERRORPROC :: #type () -> GLenum #c_call;
PFNGLGETFLOATVPROC :: #type (pname: GLenum, data: *GLfloat) -> void #c_call;
PFNGLGETINTEGERVPROC :: #type (pname: GLenum, data: *GLint) -> void #c_call;
PFNGLGETSTRINGPROC :: #type (name: GLenum) -> *GLubyte #c_call;
PFNGLGETTEXIMAGEPROC :: #type (target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLGETTEXPARAMETERFVPROC :: #type (target: GLenum, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLGETTEXPARAMETERIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETTEXLEVELPARAMETERFVPROC :: #type (target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLGETTEXLEVELPARAMETERIVPROC :: #type (target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLISENABLEDPROC :: #type (cap: GLenum) -> GLboolean #c_call;
PFNGLDEPTHRANGEPROC :: #type (n: GLdouble, f: GLdouble) -> void #c_call;
PFNGLVIEWPORTPROC :: #type (x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;

GLclampf :: float;
GLclampd :: float64;

PFNGLDRAWARRAYSPROC :: #type (mode: GLenum, first: GLint, count: GLsizei) -> void #c_call;
PFNGLDRAWELEMENTSPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void) -> void #c_call;
PFNGLGETPOINTERVPROC :: #type (pname: GLenum, params: **void) -> void #c_call;
PFNGLPOLYGONOFFSETPROC :: #type (factor: GLfloat, units: GLfloat) -> void #c_call;
PFNGLCOPYTEXIMAGE1DPROC :: #type (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> void #c_call;
PFNGLCOPYTEXIMAGE2DPROC :: #type (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> void #c_call;
PFNGLCOPYTEXSUBIMAGE1DPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> void #c_call;
PFNGLCOPYTEXSUBIMAGE2DPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLTEXSUBIMAGE1DPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLTEXSUBIMAGE2DPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLBINDTEXTUREPROC :: #type (target: GLenum, texture: GLuint) -> void #c_call;
PFNGLDELETETEXTURESPROC :: #type (n: GLsizei, textures: *GLuint) -> void #c_call;
PFNGLGENTEXTURESPROC :: #type (n: GLsizei, textures: *GLuint) -> void #c_call;
PFNGLISTEXTUREPROC :: #type (texture: GLuint) -> GLboolean #c_call;

PFNGLDRAWRANGEELEMENTSPROC :: #type (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void) -> void #c_call;
PFNGLTEXIMAGE3DPROC :: #type (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLTEXSUBIMAGE3DPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLCOPYTEXSUBIMAGE3DPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;

PFNGLACTIVETEXTUREPROC :: #type (texture: GLenum) -> void #c_call;
PFNGLSAMPLECOVERAGEPROC :: #type (value: GLfloat, invert: GLboolean) -> void #c_call;
PFNGLCOMPRESSEDTEXIMAGE3DPROC :: #type (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXIMAGE2DPROC :: #type (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXIMAGE1DPROC :: #type (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) -> void #c_call;
PFNGLGETCOMPRESSEDTEXIMAGEPROC :: #type (target: GLenum, level: GLint, img: *void) -> void #c_call;

PFNGLBLENDFUNCSEPARATEPROC :: #type (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> void #c_call;
PFNGLMULTIDRAWARRAYSPROC :: #type (mode: GLenum, first: *GLint, count: *GLsizei, drawcount: GLsizei) -> void #c_call;
PFNGLMULTIDRAWELEMENTSPROC :: #type (mode: GLenum, count: *GLsizei, type: GLenum, indices: **void, drawcount: GLsizei) -> void #c_call;
PFNGLPOINTPARAMETERFPROC :: #type (pname: GLenum, param: GLfloat) -> void #c_call;
PFNGLPOINTPARAMETERFVPROC :: #type (pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLPOINTPARAMETERIPROC :: #type (pname: GLenum, param: GLint) -> void #c_call;
PFNGLPOINTPARAMETERIVPROC :: #type (pname: GLenum, params: *GLint) -> void #c_call;
PFNGLBLENDCOLORPROC :: #type (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void #c_call;
PFNGLBLENDEQUATIONPROC :: #type (mode: GLenum) -> void #c_call;

GLsizeiptr :: s64;
GLintptr :: s64;

PFNGLGENQUERIESPROC :: #type (n: GLsizei, ids: *GLuint) -> void #c_call;
PFNGLDELETEQUERIESPROC :: #type (n: GLsizei, ids: *GLuint) -> void #c_call;
PFNGLISQUERYPROC :: #type (id: GLuint) -> GLboolean #c_call;
PFNGLBEGINQUERYPROC :: #type (target: GLenum, id: GLuint) -> void #c_call;
PFNGLENDQUERYPROC :: #type (target: GLenum) -> void #c_call;
PFNGLGETQUERYIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETQUERYOBJECTIVPROC :: #type (id: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETQUERYOBJECTUIVPROC :: #type (id: GLuint, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLBINDBUFFERPROC :: #type (target: GLenum, buffer: GLuint) -> void #c_call;
PFNGLDELETEBUFFERSPROC :: #type (n: GLsizei, buffers: *GLuint) -> void #c_call;
PFNGLGENBUFFERSPROC :: #type (n: GLsizei, buffers: *GLuint) -> void #c_call;
PFNGLISBUFFERPROC :: #type (buffer: GLuint) -> GLboolean #c_call;
PFNGLBUFFERDATAPROC :: #type (target: GLenum, size: GLsizeiptr, data: *void, usage: GLenum) -> void #c_call;
PFNGLBUFFERSUBDATAPROC :: #type (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *void) -> void #c_call;
PFNGLGETBUFFERSUBDATAPROC :: #type (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *void) -> void #c_call;
PFNGLMAPBUFFERPROC :: #type (target: GLenum, access: GLenum) -> *void #c_call;
PFNGLUNMAPBUFFERPROC :: #type (target: GLenum) -> GLboolean #c_call;
PFNGLGETBUFFERPARAMETERIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETBUFFERPOINTERVPROC :: #type (target: GLenum, pname: GLenum, params: **void) -> void #c_call;

GLchar :: u8;
GLshort :: s16;
GLbyte :: s8;
GLushort :: u16;

PFNGLBLENDEQUATIONSEPARATEPROC :: #type (modeRGB: GLenum, modeAlpha: GLenum) -> void #c_call;
PFNGLDRAWBUFFERSPROC :: #type (n: GLsizei, bufs: *GLenum) -> void #c_call;
PFNGLSTENCILOPSEPARATEPROC :: #type (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> void #c_call;
PFNGLSTENCILFUNCSEPARATEPROC :: #type (face: GLenum, func: GLenum, ref: GLint, mask: GLuint) -> void #c_call;
PFNGLSTENCILMASKSEPARATEPROC :: #type (face: GLenum, mask: GLuint) -> void #c_call;
PFNGLATTACHSHADERPROC :: #type (program: GLuint, shader: GLuint) -> void #c_call;
PFNGLBINDATTRIBLOCATIONPROC :: #type (program: GLuint, index: GLuint, name: *GLchar) -> void #c_call;
PFNGLCOMPILESHADERPROC :: #type (shader: GLuint) -> void #c_call;
PFNGLCREATEPROGRAMPROC :: #type () -> GLuint #c_call;
PFNGLCREATESHADERPROC :: #type (type: GLenum) -> GLuint #c_call;
PFNGLDELETEPROGRAMPROC :: #type (program: GLuint) -> void #c_call;
PFNGLDELETESHADERPROC :: #type (shader: GLuint) -> void #c_call;
PFNGLDETACHSHADERPROC :: #type (program: GLuint, shader: GLuint) -> void #c_call;
PFNGLDISABLEVERTEXATTRIBARRAYPROC :: #type (index: GLuint) -> void #c_call;
PFNGLENABLEVERTEXATTRIBARRAYPROC :: #type (index: GLuint) -> void #c_call;
PFNGLGETACTIVEATTRIBPROC :: #type (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLchar) -> void #c_call;
PFNGLGETACTIVEUNIFORMPROC :: #type (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLchar) -> void #c_call;
PFNGLGETATTACHEDSHADERSPROC :: #type (program: GLuint, maxCount: GLsizei, count: *GLsizei, shaders: *GLuint) -> void #c_call;
PFNGLGETATTRIBLOCATIONPROC :: #type (program: GLuint, name: *GLchar) -> GLint #c_call;
PFNGLGETPROGRAMIVPROC :: #type (program: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETPROGRAMINFOLOGPROC :: #type (program: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> void #c_call;
PFNGLGETSHADERIVPROC :: #type (shader: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETSHADERINFOLOGPROC :: #type (shader: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> void #c_call;
PFNGLGETSHADERSOURCEPROC :: #type (shader: GLuint, bufSize: GLsizei, length: *GLsizei, source: *GLchar) -> void #c_call;
PFNGLGETUNIFORMLOCATIONPROC :: #type (program: GLuint, name: *GLchar) -> GLint #c_call;
PFNGLGETUNIFORMFVPROC :: #type (program: GLuint, location: GLint, params: *GLfloat) -> void #c_call;
PFNGLGETUNIFORMIVPROC :: #type (program: GLuint, location: GLint, params: *GLint) -> void #c_call;
PFNGLGETVERTEXATTRIBDVPROC :: #type (index: GLuint, pname: GLenum, params: *GLdouble) -> void #c_call;
PFNGLGETVERTEXATTRIBFVPROC :: #type (index: GLuint, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLGETVERTEXATTRIBIVPROC :: #type (index: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETVERTEXATTRIBPOINTERVPROC :: #type (index: GLuint, pname: GLenum, pointer: **void) -> void #c_call;
PFNGLISPROGRAMPROC :: #type (program: GLuint) -> GLboolean #c_call;
PFNGLISSHADERPROC :: #type (shader: GLuint) -> GLboolean #c_call;
PFNGLLINKPROGRAMPROC :: #type (program: GLuint) -> void #c_call;
PFNGLSHADERSOURCEPROC :: #type (shader: GLuint, count: GLsizei, _string: **GLchar, length: *GLint) -> void #c_call;
PFNGLUSEPROGRAMPROC :: #type (program: GLuint) -> void #c_call;
PFNGLUNIFORM1FPROC :: #type (location: GLint, v0: GLfloat) -> void #c_call;
PFNGLUNIFORM2FPROC :: #type (location: GLint, v0: GLfloat, v1: GLfloat) -> void #c_call;
PFNGLUNIFORM3FPROC :: #type (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> void #c_call;
PFNGLUNIFORM4FPROC :: #type (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> void #c_call;
PFNGLUNIFORM1IPROC :: #type (location: GLint, v0: GLint) -> void #c_call;
PFNGLUNIFORM2IPROC :: #type (location: GLint, v0: GLint, v1: GLint) -> void #c_call;
PFNGLUNIFORM3IPROC :: #type (location: GLint, v0: GLint, v1: GLint, v2: GLint) -> void #c_call;
PFNGLUNIFORM4IPROC :: #type (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> void #c_call;
PFNGLUNIFORM1FVPROC :: #type (location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLUNIFORM2FVPROC :: #type (location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLUNIFORM3FVPROC :: #type (location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLUNIFORM4FVPROC :: #type (location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLUNIFORM1IVPROC :: #type (location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLUNIFORM2IVPROC :: #type (location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLUNIFORM3IVPROC :: #type (location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLUNIFORM4IVPROC :: #type (location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLUNIFORMMATRIX2FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX3FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX4FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLVALIDATEPROGRAMPROC :: #type (program: GLuint) -> void #c_call;
PFNGLVERTEXATTRIB1DPROC :: #type (index: GLuint, x: GLdouble) -> void #c_call;
PFNGLVERTEXATTRIB1DVPROC :: #type (index: GLuint, v: *GLdouble) -> void #c_call;
PFNGLVERTEXATTRIB1FPROC :: #type (index: GLuint, x: GLfloat) -> void #c_call;
PFNGLVERTEXATTRIB1FVPROC :: #type (index: GLuint, v: *GLfloat) -> void #c_call;
PFNGLVERTEXATTRIB1SPROC :: #type (index: GLuint, x: GLshort) -> void #c_call;
PFNGLVERTEXATTRIB1SVPROC :: #type (index: GLuint, v: *GLshort) -> void #c_call;
PFNGLVERTEXATTRIB2DPROC :: #type (index: GLuint, x: GLdouble, y: GLdouble) -> void #c_call;
PFNGLVERTEXATTRIB2DVPROC :: #type (index: GLuint, v: *GLdouble) -> void #c_call;
PFNGLVERTEXATTRIB2FPROC :: #type (index: GLuint, x: GLfloat, y: GLfloat) -> void #c_call;
PFNGLVERTEXATTRIB2FVPROC :: #type (index: GLuint, v: *GLfloat) -> void #c_call;
PFNGLVERTEXATTRIB2SPROC :: #type (index: GLuint, x: GLshort, y: GLshort) -> void #c_call;
PFNGLVERTEXATTRIB2SVPROC :: #type (index: GLuint, v: *GLshort) -> void #c_call;
PFNGLVERTEXATTRIB3DPROC :: #type (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> void #c_call;
PFNGLVERTEXATTRIB3DVPROC :: #type (index: GLuint, v: *GLdouble) -> void #c_call;
PFNGLVERTEXATTRIB3FPROC :: #type (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> void #c_call;
PFNGLVERTEXATTRIB3FVPROC :: #type (index: GLuint, v: *GLfloat) -> void #c_call;
PFNGLVERTEXATTRIB3SPROC :: #type (index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> void #c_call;
PFNGLVERTEXATTRIB3SVPROC :: #type (index: GLuint, v: *GLshort) -> void #c_call;
PFNGLVERTEXATTRIB4NBVPROC :: #type (index: GLuint, v: *GLbyte) -> void #c_call;
PFNGLVERTEXATTRIB4NIVPROC :: #type (index: GLuint, v: *GLint) -> void #c_call;
PFNGLVERTEXATTRIB4NSVPROC :: #type (index: GLuint, v: *GLshort) -> void #c_call;
PFNGLVERTEXATTRIB4NUBPROC :: #type (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> void #c_call;
PFNGLVERTEXATTRIB4NUBVPROC :: #type (index: GLuint, v: *GLubyte) -> void #c_call;
PFNGLVERTEXATTRIB4NUIVPROC :: #type (index: GLuint, v: *GLuint) -> void #c_call;
PFNGLVERTEXATTRIB4NUSVPROC :: #type (index: GLuint, v: *GLushort) -> void #c_call;
PFNGLVERTEXATTRIB4BVPROC :: #type (index: GLuint, v: *GLbyte) -> void #c_call;
PFNGLVERTEXATTRIB4DPROC :: #type (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void #c_call;
PFNGLVERTEXATTRIB4DVPROC :: #type (index: GLuint, v: *GLdouble) -> void #c_call;
PFNGLVERTEXATTRIB4FPROC :: #type (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void #c_call;
PFNGLVERTEXATTRIB4FVPROC :: #type (index: GLuint, v: *GLfloat) -> void #c_call;
PFNGLVERTEXATTRIB4IVPROC :: #type (index: GLuint, v: *GLint) -> void #c_call;
PFNGLVERTEXATTRIB4SPROC :: #type (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> void #c_call;
PFNGLVERTEXATTRIB4SVPROC :: #type (index: GLuint, v: *GLshort) -> void #c_call;
PFNGLVERTEXATTRIB4UBVPROC :: #type (index: GLuint, v: *GLubyte) -> void #c_call;
PFNGLVERTEXATTRIB4UIVPROC :: #type (index: GLuint, v: *GLuint) -> void #c_call;
PFNGLVERTEXATTRIB4USVPROC :: #type (index: GLuint, v: *GLushort) -> void #c_call;
PFNGLVERTEXATTRIBPOINTERPROC :: #type (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *void) -> void #c_call;

PFNGLUNIFORMMATRIX2X3FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX3X2FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX2X4FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX4X2FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX3X4FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX4X3FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;

GLhalf :: u16;

PFNGLCOLORMASKIPROC :: #type (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> void #c_call;
PFNGLGETBOOLEANI_VPROC :: #type (target: GLenum, index: GLuint, data: *GLboolean) -> void #c_call;
PFNGLGETINTEGERI_VPROC :: #type (target: GLenum, index: GLuint, data: *GLint) -> void #c_call;
PFNGLENABLEIPROC :: #type (target: GLenum, index: GLuint) -> void #c_call;
PFNGLDISABLEIPROC :: #type (target: GLenum, index: GLuint) -> void #c_call;
PFNGLISENABLEDIPROC :: #type (target: GLenum, index: GLuint) -> GLboolean #c_call;
PFNGLBEGINTRANSFORMFEEDBACKPROC :: #type (primitiveMode: GLenum) -> void #c_call;
PFNGLENDTRANSFORMFEEDBACKPROC :: #type () -> void #c_call;
PFNGLBINDBUFFERRANGEPROC :: #type (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void #c_call;
PFNGLBINDBUFFERBASEPROC :: #type (target: GLenum, index: GLuint, buffer: GLuint) -> void #c_call;
PFNGLTRANSFORMFEEDBACKVARYINGSPROC :: #type (program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) -> void #c_call;
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC :: #type (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type: *GLenum, name: *GLchar) -> void #c_call;
PFNGLCLAMPCOLORPROC :: #type (target: GLenum, clamp: GLenum) -> void #c_call;
PFNGLBEGINCONDITIONALRENDERPROC :: #type (id: GLuint, mode: GLenum) -> void #c_call;
PFNGLENDCONDITIONALRENDERPROC :: #type () -> void #c_call;
PFNGLVERTEXATTRIBIPOINTERPROC :: #type (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) -> void #c_call;
PFNGLGETVERTEXATTRIBIIVPROC :: #type (index: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETVERTEXATTRIBIUIVPROC :: #type (index: GLuint, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLVERTEXATTRIBI1IPROC :: #type (index: GLuint, x: GLint) -> void #c_call;
PFNGLVERTEXATTRIBI2IPROC :: #type (index: GLuint, x: GLint, y: GLint) -> void #c_call;
PFNGLVERTEXATTRIBI3IPROC :: #type (index: GLuint, x: GLint, y: GLint, z: GLint) -> void #c_call;
PFNGLVERTEXATTRIBI4IPROC :: #type (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> void #c_call;
PFNGLVERTEXATTRIBI1UIPROC :: #type (index: GLuint, x: GLuint) -> void #c_call;
PFNGLVERTEXATTRIBI2UIPROC :: #type (index: GLuint, x: GLuint, y: GLuint) -> void #c_call;
PFNGLVERTEXATTRIBI3UIPROC :: #type (index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> void #c_call;
PFNGLVERTEXATTRIBI4UIPROC :: #type (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> void #c_call;
PFNGLVERTEXATTRIBI1IVPROC :: #type (index: GLuint, v: *GLint) -> void #c_call;
PFNGLVERTEXATTRIBI2IVPROC :: #type (index: GLuint, v: *GLint) -> void #c_call;
PFNGLVERTEXATTRIBI3IVPROC :: #type (index: GLuint, v: *GLint) -> void #c_call;
PFNGLVERTEXATTRIBI4IVPROC :: #type (index: GLuint, v: *GLint) -> void #c_call;
PFNGLVERTEXATTRIBI1UIVPROC :: #type (index: GLuint, v: *GLuint) -> void #c_call;
PFNGLVERTEXATTRIBI2UIVPROC :: #type (index: GLuint, v: *GLuint) -> void #c_call;
PFNGLVERTEXATTRIBI3UIVPROC :: #type (index: GLuint, v: *GLuint) -> void #c_call;
PFNGLVERTEXATTRIBI4UIVPROC :: #type (index: GLuint, v: *GLuint) -> void #c_call;
PFNGLVERTEXATTRIBI4BVPROC :: #type (index: GLuint, v: *GLbyte) -> void #c_call;
PFNGLVERTEXATTRIBI4SVPROC :: #type (index: GLuint, v: *GLshort) -> void #c_call;
PFNGLVERTEXATTRIBI4UBVPROC :: #type (index: GLuint, v: *GLubyte) -> void #c_call;
PFNGLVERTEXATTRIBI4USVPROC :: #type (index: GLuint, v: *GLushort) -> void #c_call;
PFNGLGETUNIFORMUIVPROC :: #type (program: GLuint, location: GLint, params: *GLuint) -> void #c_call;
PFNGLBINDFRAGDATALOCATIONPROC :: #type (program: GLuint, color: GLuint, name: *GLchar) -> void #c_call;
PFNGLGETFRAGDATALOCATIONPROC :: #type (program: GLuint, name: *GLchar) -> GLint #c_call;
PFNGLUNIFORM1UIPROC :: #type (location: GLint, v0: GLuint) -> void #c_call;
PFNGLUNIFORM2UIPROC :: #type (location: GLint, v0: GLuint, v1: GLuint) -> void #c_call;
PFNGLUNIFORM3UIPROC :: #type (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> void #c_call;
PFNGLUNIFORM4UIPROC :: #type (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> void #c_call;
PFNGLUNIFORM1UIVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLUNIFORM2UIVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLUNIFORM3UIVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLUNIFORM4UIVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLTEXPARAMETERIIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLTEXPARAMETERIUIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLGETTEXPARAMETERIIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETTEXPARAMETERIUIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLCLEARBUFFERIVPROC :: #type (buffer: GLenum, drawbuffer: GLint, value: *GLint) -> void #c_call;
PFNGLCLEARBUFFERUIVPROC :: #type (buffer: GLenum, drawbuffer: GLint, value: *GLuint) -> void #c_call;
PFNGLCLEARBUFFERFVPROC :: #type (buffer: GLenum, drawbuffer: GLint, value: *GLfloat) -> void #c_call;
PFNGLCLEARBUFFERFIPROC :: #type (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> void #c_call;
PFNGLGETSTRINGIPROC :: #type (name: GLenum, index: GLuint) -> *GLubyte #c_call;
PFNGLISRENDERBUFFERPROC :: #type (renderbuffer: GLuint) -> GLboolean #c_call;
PFNGLBINDRENDERBUFFERPROC :: #type (target: GLenum, renderbuffer: GLuint) -> void #c_call;
PFNGLDELETERENDERBUFFERSPROC :: #type (n: GLsizei, renderbuffers: *GLuint) -> void #c_call;
PFNGLGENRENDERBUFFERSPROC :: #type (n: GLsizei, renderbuffers: *GLuint) -> void #c_call;
PFNGLRENDERBUFFERSTORAGEPROC :: #type (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLGETRENDERBUFFERPARAMETERIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLISFRAMEBUFFERPROC :: #type (framebuffer: GLuint) -> GLboolean #c_call;
PFNGLBINDFRAMEBUFFERPROC :: #type (target: GLenum, framebuffer: GLuint) -> void #c_call;
PFNGLDELETEFRAMEBUFFERSPROC :: #type (n: GLsizei, framebuffers: *GLuint) -> void #c_call;
PFNGLGENFRAMEBUFFERSPROC :: #type (n: GLsizei, framebuffers: *GLuint) -> void #c_call;
PFNGLCHECKFRAMEBUFFERSTATUSPROC :: #type (target: GLenum) -> GLenum #c_call;
PFNGLFRAMEBUFFERTEXTURE1DPROC :: #type (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> void #c_call;
PFNGLFRAMEBUFFERTEXTURE2DPROC :: #type (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> void #c_call;
PFNGLFRAMEBUFFERTEXTURE3DPROC :: #type (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> void #c_call;
PFNGLFRAMEBUFFERRENDERBUFFERPROC :: #type (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> void #c_call;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC :: #type (target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGENERATEMIPMAPPROC :: #type (target: GLenum) -> void #c_call;
PFNGLBLITFRAMEBUFFERPROC :: #type (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> void #c_call;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC :: #type (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLFRAMEBUFFERTEXTURELAYERPROC :: #type (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> void #c_call;
PFNGLMAPBUFFERRANGEPROC :: #type (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *void #c_call;
PFNGLFLUSHMAPPEDBUFFERRANGEPROC :: #type (target: GLenum, offset: GLintptr, length: GLsizeiptr) -> void #c_call;
PFNGLBINDVERTEXARRAYPROC :: #type (array: GLuint) -> void #c_call;
PFNGLDELETEVERTEXARRAYSPROC :: #type (n: GLsizei, arrays: *GLuint) -> void #c_call;
PFNGLGENVERTEXARRAYSPROC :: #type (n: GLsizei, arrays: *GLuint) -> void #c_call;
PFNGLISVERTEXARRAYPROC :: #type (array: GLuint) -> GLboolean #c_call;

PFNGLDRAWARRAYSINSTANCEDPROC :: #type (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) -> void #c_call;
PFNGLDRAWELEMENTSINSTANCEDPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei) -> void #c_call;
PFNGLTEXBUFFERPROC :: #type (target: GLenum, internalformat: GLenum, buffer: GLuint) -> void #c_call;
PFNGLPRIMITIVERESTARTINDEXPROC :: #type (index: GLuint) -> void #c_call;
PFNGLCOPYBUFFERSUBDATAPROC :: #type (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> void #c_call;
PFNGLGETUNIFORMINDICESPROC :: #type (program: GLuint, uniformCount: GLsizei, uniformNames: **GLchar, uniformIndices: *GLuint) -> void #c_call;
PFNGLGETACTIVEUNIFORMSIVPROC :: #type (program: GLuint, uniformCount: GLsizei, uniformIndices: *GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETACTIVEUNIFORMNAMEPROC :: #type (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformName: *GLchar) -> void #c_call;
PFNGLGETUNIFORMBLOCKINDEXPROC :: #type (program: GLuint, uniformBlockName: *GLchar) -> GLuint #c_call;
PFNGLGETACTIVEUNIFORMBLOCKIVPROC :: #type (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC :: #type (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformBlockName: *GLchar) -> void #c_call;
PFNGLUNIFORMBLOCKBINDINGPROC :: #type (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) -> void #c_call;

__GLsync :: struct {}
GLsync :: *__GLsync;
GLuint64 :: u64;
GLint64 :: s64;

PFNGLDRAWELEMENTSBASEVERTEXPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) -> void #c_call;
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC :: #type (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) -> void #c_call;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint) -> void #c_call;
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC :: #type (mode: GLenum, count: *GLsizei, type: GLenum, indices: **void, drawcount: GLsizei, basevertex: *GLint) -> void #c_call;
PFNGLPROVOKINGVERTEXPROC :: #type (mode: GLenum) -> void #c_call;
PFNGLFENCESYNCPROC :: #type (condition: GLenum, flags: GLbitfield) -> GLsync #c_call;
PFNGLISSYNCPROC :: #type (sync: GLsync) -> GLboolean #c_call;
PFNGLDELETESYNCPROC :: #type (sync: GLsync) -> void #c_call;
PFNGLCLIENTWAITSYNCPROC :: #type (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum #c_call;
PFNGLWAITSYNCPROC :: #type (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> void #c_call;
PFNGLGETINTEGER64VPROC :: #type (pname: GLenum, data: *GLint64) -> void #c_call;
PFNGLGETSYNCIVPROC :: #type (sync: GLsync, pname: GLenum, count: GLsizei, length: *GLsizei, values: *GLint) -> void #c_call;
PFNGLGETINTEGER64I_VPROC :: #type (target: GLenum, index: GLuint, data: *GLint64) -> void #c_call;
PFNGLGETBUFFERPARAMETERI64VPROC :: #type (target: GLenum, pname: GLenum, params: *GLint64) -> void #c_call;
PFNGLFRAMEBUFFERTEXTUREPROC :: #type (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> void #c_call;
PFNGLTEXIMAGE2DMULTISAMPLEPROC :: #type (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> void #c_call;
PFNGLTEXIMAGE3DMULTISAMPLEPROC :: #type (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> void #c_call;
PFNGLGETMULTISAMPLEFVPROC :: #type (pname: GLenum, index: GLuint, val: *GLfloat) -> void #c_call;
PFNGLSAMPLEMASKIPROC :: #type (maskNumber: GLuint, mask: GLbitfield) -> void #c_call;

PFNGLBINDFRAGDATALOCATIONINDEXEDPROC :: #type (program: GLuint, colorNumber: GLuint, index: GLuint, name: *GLchar) -> void #c_call;
PFNGLGETFRAGDATAINDEXPROC :: #type (program: GLuint, name: *GLchar) -> GLint #c_call;
PFNGLGENSAMPLERSPROC :: #type (count: GLsizei, samplers: *GLuint) -> void #c_call;
PFNGLDELETESAMPLERSPROC :: #type (count: GLsizei, samplers: *GLuint) -> void #c_call;
PFNGLISSAMPLERPROC :: #type (sampler: GLuint) -> GLboolean #c_call;
PFNGLBINDSAMPLERPROC :: #type (unit: GLuint, sampler: GLuint) -> void #c_call;
PFNGLSAMPLERPARAMETERIPROC :: #type (sampler: GLuint, pname: GLenum, param: GLint) -> void #c_call;
PFNGLSAMPLERPARAMETERIVPROC :: #type (sampler: GLuint, pname: GLenum, param: *GLint) -> void #c_call;
PFNGLSAMPLERPARAMETERFPROC :: #type (sampler: GLuint, pname: GLenum, param: GLfloat) -> void #c_call;
PFNGLSAMPLERPARAMETERFVPROC :: #type (sampler: GLuint, pname: GLenum, param: *GLfloat) -> void #c_call;
PFNGLSAMPLERPARAMETERIIVPROC :: #type (sampler: GLuint, pname: GLenum, param: *GLint) -> void #c_call;
PFNGLSAMPLERPARAMETERIUIVPROC :: #type (sampler: GLuint, pname: GLenum, param: *GLuint) -> void #c_call;
PFNGLGETSAMPLERPARAMETERIVPROC :: #type (sampler: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETSAMPLERPARAMETERIIVPROC :: #type (sampler: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETSAMPLERPARAMETERFVPROC :: #type (sampler: GLuint, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLGETSAMPLERPARAMETERIUIVPROC :: #type (sampler: GLuint, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLQUERYCOUNTERPROC :: #type (id: GLuint, target: GLenum) -> void #c_call;
PFNGLGETQUERYOBJECTI64VPROC :: #type (id: GLuint, pname: GLenum, params: *GLint64) -> void #c_call;
PFNGLGETQUERYOBJECTUI64VPROC :: #type (id: GLuint, pname: GLenum, params: *GLuint64) -> void #c_call;
PFNGLVERTEXATTRIBDIVISORPROC :: #type (index: GLuint, divisor: GLuint) -> void #c_call;
PFNGLVERTEXATTRIBP1UIPROC :: #type (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) -> void #c_call;
PFNGLVERTEXATTRIBP1UIVPROC :: #type (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) -> void #c_call;
PFNGLVERTEXATTRIBP2UIPROC :: #type (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) -> void #c_call;
PFNGLVERTEXATTRIBP2UIVPROC :: #type (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) -> void #c_call;
PFNGLVERTEXATTRIBP3UIPROC :: #type (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) -> void #c_call;
PFNGLVERTEXATTRIBP3UIVPROC :: #type (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) -> void #c_call;
PFNGLVERTEXATTRIBP4UIPROC :: #type (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) -> void #c_call;
PFNGLVERTEXATTRIBP4UIVPROC :: #type (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) -> void #c_call;

PFNGLMINSAMPLESHADINGPROC :: #type (value: GLfloat) -> void #c_call;
PFNGLBLENDEQUATIONIPROC :: #type (buf: GLuint, mode: GLenum) -> void #c_call;
PFNGLBLENDEQUATIONSEPARATEIPROC :: #type (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> void #c_call;
PFNGLBLENDFUNCIPROC :: #type (buf: GLuint, src: GLenum, dst: GLenum) -> void #c_call;
PFNGLBLENDFUNCSEPARATEIPROC :: #type (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> void #c_call;
PFNGLDRAWARRAYSINDIRECTPROC :: #type (mode: GLenum, indirect: *void) -> void #c_call;
PFNGLDRAWELEMENTSINDIRECTPROC :: #type (mode: GLenum, type: GLenum, indirect: *void) -> void #c_call;
PFNGLUNIFORM1DPROC :: #type (location: GLint, x: GLdouble) -> void #c_call;
PFNGLUNIFORM2DPROC :: #type (location: GLint, x: GLdouble, y: GLdouble) -> void #c_call;
PFNGLUNIFORM3DPROC :: #type (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> void #c_call;
PFNGLUNIFORM4DPROC :: #type (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void #c_call;
PFNGLUNIFORM1DVPROC :: #type (location: GLint, count: GLsizei, value: *GLdouble) -> void #c_call;
PFNGLUNIFORM2DVPROC :: #type (location: GLint, count: GLsizei, value: *GLdouble) -> void #c_call;
PFNGLUNIFORM3DVPROC :: #type (location: GLint, count: GLsizei, value: *GLdouble) -> void #c_call;
PFNGLUNIFORM4DVPROC :: #type (location: GLint, count: GLsizei, value: *GLdouble) -> void #c_call;
PFNGLUNIFORMMATRIX2DVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLUNIFORMMATRIX3DVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLUNIFORMMATRIX4DVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLUNIFORMMATRIX2X3DVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLUNIFORMMATRIX2X4DVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLUNIFORMMATRIX3X2DVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLUNIFORMMATRIX3X4DVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLUNIFORMMATRIX4X2DVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLUNIFORMMATRIX4X3DVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLGETUNIFORMDVPROC :: #type (program: GLuint, location: GLint, params: *GLdouble) -> void #c_call;
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC :: #type (program: GLuint, shadertype: GLenum, name: *GLchar) -> GLint #c_call;
PFNGLGETSUBROUTINEINDEXPROC :: #type (program: GLuint, shadertype: GLenum, name: *GLchar) -> GLuint #c_call;
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC :: #type (program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: *GLint) -> void #c_call;
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC :: #type (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) -> void #c_call;
PFNGLGETACTIVESUBROUTINENAMEPROC :: #type (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) -> void #c_call;
PFNGLUNIFORMSUBROUTINESUIVPROC :: #type (shadertype: GLenum, count: GLsizei, indices: *GLuint) -> void #c_call;
PFNGLGETUNIFORMSUBROUTINEUIVPROC :: #type (shadertype: GLenum, location: GLint, params: *GLuint) -> void #c_call;
PFNGLGETPROGRAMSTAGEIVPROC :: #type (program: GLuint, shadertype: GLenum, pname: GLenum, values: *GLint) -> void #c_call;
PFNGLPATCHPARAMETERIPROC :: #type (pname: GLenum, value: GLint) -> void #c_call;
PFNGLPATCHPARAMETERFVPROC :: #type (pname: GLenum, values: *GLfloat) -> void #c_call;
PFNGLBINDTRANSFORMFEEDBACKPROC :: #type (target: GLenum, id: GLuint) -> void #c_call;
PFNGLDELETETRANSFORMFEEDBACKSPROC :: #type (n: GLsizei, ids: *GLuint) -> void #c_call;
PFNGLGENTRANSFORMFEEDBACKSPROC :: #type (n: GLsizei, ids: *GLuint) -> void #c_call;
PFNGLISTRANSFORMFEEDBACKPROC :: #type (id: GLuint) -> GLboolean #c_call;
PFNGLPAUSETRANSFORMFEEDBACKPROC :: #type () -> void #c_call;
PFNGLRESUMETRANSFORMFEEDBACKPROC :: #type () -> void #c_call;
PFNGLDRAWTRANSFORMFEEDBACKPROC :: #type (mode: GLenum, id: GLuint) -> void #c_call;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC :: #type (mode: GLenum, id: GLuint, stream: GLuint) -> void #c_call;
PFNGLBEGINQUERYINDEXEDPROC :: #type (target: GLenum, index: GLuint, id: GLuint) -> void #c_call;
PFNGLENDQUERYINDEXEDPROC :: #type (target: GLenum, index: GLuint) -> void #c_call;
PFNGLGETQUERYINDEXEDIVPROC :: #type (target: GLenum, index: GLuint, pname: GLenum, params: *GLint) -> void #c_call;

PFNGLRELEASESHADERCOMPILERPROC :: #type () -> void #c_call;
PFNGLSHADERBINARYPROC :: #type (count: GLsizei, shaders: *GLuint, binaryFormat: GLenum, binary: *void, length: GLsizei) -> void #c_call;
PFNGLGETSHADERPRECISIONFORMATPROC :: #type (shadertype: GLenum, precisiontype: GLenum, range: *GLint, precision: *GLint) -> void #c_call;
PFNGLDEPTHRANGEFPROC :: #type (n: GLfloat, f: GLfloat) -> void #c_call;
PFNGLCLEARDEPTHFPROC :: #type (d: GLfloat) -> void #c_call;
PFNGLGETPROGRAMBINARYPROC :: #type (program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *void) -> void #c_call;
PFNGLPROGRAMBINARYPROC :: #type (program: GLuint, binaryFormat: GLenum, binary: *void, length: GLsizei) -> void #c_call;
PFNGLPROGRAMPARAMETERIPROC :: #type (program: GLuint, pname: GLenum, value: GLint) -> void #c_call;
PFNGLUSEPROGRAMSTAGESPROC :: #type (pipeline: GLuint, stages: GLbitfield, program: GLuint) -> void #c_call;
PFNGLACTIVESHADERPROGRAMPROC :: #type (pipeline: GLuint, program: GLuint) -> void #c_call;
PFNGLCREATESHADERPROGRAMVPROC :: #type (type: GLenum, count: GLsizei, strings: **GLchar) -> GLuint #c_call;
PFNGLBINDPROGRAMPIPELINEPROC :: #type (pipeline: GLuint) -> void #c_call;
PFNGLDELETEPROGRAMPIPELINESPROC :: #type (n: GLsizei, pipelines: *GLuint) -> void #c_call;
PFNGLGENPROGRAMPIPELINESPROC :: #type (n: GLsizei, pipelines: *GLuint) -> void #c_call;
PFNGLISPROGRAMPIPELINEPROC :: #type (pipeline: GLuint) -> GLboolean #c_call;
PFNGLGETPROGRAMPIPELINEIVPROC :: #type (pipeline: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM1IPROC :: #type (program: GLuint, location: GLint, v0: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM1IVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM1FPROC :: #type (program: GLuint, location: GLint, v0: GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM1FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM1DPROC :: #type (program: GLuint, location: GLint, v0: GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORM1DVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORM1UIPROC :: #type (program: GLuint, location: GLint, v0: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM1UIVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM2IPROC :: #type (program: GLuint, location: GLint, v0: GLint, v1: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM2IVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM2FPROC :: #type (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM2FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM2DPROC :: #type (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORM2DVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORM2UIPROC :: #type (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM2UIVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM3IPROC :: #type (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM3IVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM3FPROC :: #type (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM3FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM3DPROC :: #type (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORM3DVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORM3UIPROC :: #type (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM3UIVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM4IPROC :: #type (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM4IVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM4FPROC :: #type (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM4FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM4DPROC :: #type (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORM4DVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORM4UIPROC :: #type (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM4UIVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2DVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3DVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4DVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLVALIDATEPROGRAMPIPELINEPROC :: #type (pipeline: GLuint) -> void #c_call;
PFNGLGETPROGRAMPIPELINEINFOLOGPROC :: #type (pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> void #c_call;
PFNGLVERTEXATTRIBL1DPROC :: #type (index: GLuint, x: GLdouble) -> void #c_call;
PFNGLVERTEXATTRIBL2DPROC :: #type (index: GLuint, x: GLdouble, y: GLdouble) -> void #c_call;
PFNGLVERTEXATTRIBL3DPROC :: #type (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> void #c_call;
PFNGLVERTEXATTRIBL4DPROC :: #type (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void #c_call;
PFNGLVERTEXATTRIBL1DVPROC :: #type (index: GLuint, v: *GLdouble) -> void #c_call;
PFNGLVERTEXATTRIBL2DVPROC :: #type (index: GLuint, v: *GLdouble) -> void #c_call;
PFNGLVERTEXATTRIBL3DVPROC :: #type (index: GLuint, v: *GLdouble) -> void #c_call;
PFNGLVERTEXATTRIBL4DVPROC :: #type (index: GLuint, v: *GLdouble) -> void #c_call;
PFNGLVERTEXATTRIBLPOINTERPROC :: #type (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) -> void #c_call;
PFNGLGETVERTEXATTRIBLDVPROC :: #type (index: GLuint, pname: GLenum, params: *GLdouble) -> void #c_call;
PFNGLVIEWPORTARRAYVPROC :: #type (first: GLuint, count: GLsizei, v: *GLfloat) -> void #c_call;
PFNGLVIEWPORTINDEXEDFPROC :: #type (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) -> void #c_call;
PFNGLVIEWPORTINDEXEDFVPROC :: #type (index: GLuint, v: *GLfloat) -> void #c_call;
PFNGLSCISSORARRAYVPROC :: #type (first: GLuint, count: GLsizei, v: *GLint) -> void #c_call;
PFNGLSCISSORINDEXEDPROC :: #type (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLSCISSORINDEXEDVPROC :: #type (index: GLuint, v: *GLint) -> void #c_call;
PFNGLDEPTHRANGEARRAYVPROC :: #type (first: GLuint, count: GLsizei, v: *GLdouble) -> void #c_call;
PFNGLDEPTHRANGEINDEXEDPROC :: #type (index: GLuint, n: GLdouble, f: GLdouble) -> void #c_call;
PFNGLGETFLOATI_VPROC :: #type (target: GLenum, index: GLuint, data: *GLfloat) -> void #c_call;
PFNGLGETDOUBLEI_VPROC :: #type (target: GLenum, index: GLuint, data: *GLdouble) -> void #c_call;

PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC :: #type (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) -> void #c_call;
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, baseinstance: GLuint) -> void #c_call;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) -> void #c_call;
PFNGLGETINTERNALFORMATIVPROC :: #type (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: *GLint) -> void #c_call;
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC :: #type (program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLBINDIMAGETEXTUREPROC :: #type (unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) -> void #c_call;
PFNGLMEMORYBARRIERPROC :: #type (barriers: GLbitfield) -> void #c_call;
PFNGLTEXSTORAGE1DPROC :: #type (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> void #c_call;
PFNGLTEXSTORAGE2DPROC :: #type (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLTEXSTORAGE3DPROC :: #type (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> void #c_call;
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC :: #type (mode: GLenum, id: GLuint, instancecount: GLsizei) -> void #c_call;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC :: #type (mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) -> void #c_call;

GLDEBUGPROC :: #type (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *GLchar, userParam: *void) -> void #c_call;

PFNGLCLEARBUFFERDATAPROC :: #type (target: GLenum, internalformat: GLenum, format: GLenum, type: GLenum, data: *void) -> void #c_call;
PFNGLCLEARBUFFERSUBDATAPROC :: #type (target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: *void) -> void #c_call;
PFNGLDISPATCHCOMPUTEPROC :: #type (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) -> void #c_call;
PFNGLDISPATCHCOMPUTEINDIRECTPROC :: #type (indirect: GLintptr) -> void #c_call;
PFNGLCOPYIMAGESUBDATAPROC :: #type (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) -> void #c_call;
PFNGLFRAMEBUFFERPARAMETERIPROC :: #type (target: GLenum, pname: GLenum, param: GLint) -> void #c_call;
PFNGLGETFRAMEBUFFERPARAMETERIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETINTERNALFORMATI64VPROC :: #type (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: *GLint64) -> void #c_call;
PFNGLINVALIDATETEXSUBIMAGEPROC :: #type (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> void #c_call;
PFNGLINVALIDATETEXIMAGEPROC :: #type (texture: GLuint, level: GLint) -> void #c_call;
PFNGLINVALIDATEBUFFERSUBDATAPROC :: #type (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> void #c_call;
PFNGLINVALIDATEBUFFERDATAPROC :: #type (buffer: GLuint) -> void #c_call;
PFNGLINVALIDATEFRAMEBUFFERPROC :: #type (target: GLenum, numAttachments: GLsizei, attachments: *GLenum) -> void #c_call;
PFNGLINVALIDATESUBFRAMEBUFFERPROC :: #type (target: GLenum, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLMULTIDRAWARRAYSINDIRECTPROC :: #type (mode: GLenum, indirect: *void, drawcount: GLsizei, stride: GLsizei) -> void #c_call;
PFNGLMULTIDRAWELEMENTSINDIRECTPROC :: #type (mode: GLenum, type: GLenum, indirect: *void, drawcount: GLsizei, stride: GLsizei) -> void #c_call;
PFNGLGETPROGRAMINTERFACEIVPROC :: #type (program: GLuint, programInterface: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETPROGRAMRESOURCEINDEXPROC :: #type (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLuint #c_call;
PFNGLGETPROGRAMRESOURCENAMEPROC :: #type (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) -> void #c_call;
PFNGLGETPROGRAMRESOURCEIVPROC :: #type (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, count: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETPROGRAMRESOURCELOCATIONPROC :: #type (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint #c_call;
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC :: #type (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint #c_call;
PFNGLSHADERSTORAGEBLOCKBINDINGPROC :: #type (program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) -> void #c_call;
PFNGLTEXBUFFERRANGEPROC :: #type (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void #c_call;
PFNGLTEXSTORAGE2DMULTISAMPLEPROC :: #type (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> void #c_call;
PFNGLTEXSTORAGE3DMULTISAMPLEPROC :: #type (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> void #c_call;
PFNGLTEXTUREVIEWPROC :: #type (texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) -> void #c_call;
PFNGLBINDVERTEXBUFFERPROC :: #type (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> void #c_call;
PFNGLVERTEXATTRIBFORMATPROC :: #type (attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> void #c_call;
PFNGLVERTEXATTRIBIFORMATPROC :: #type (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) -> void #c_call;
PFNGLVERTEXATTRIBLFORMATPROC :: #type (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) -> void #c_call;
PFNGLVERTEXATTRIBBINDINGPROC :: #type (attribindex: GLuint, bindingindex: GLuint) -> void #c_call;
PFNGLVERTEXBINDINGDIVISORPROC :: #type (bindingindex: GLuint, divisor: GLuint) -> void #c_call;
PFNGLDEBUGMESSAGECONTROLPROC :: #type (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> void #c_call;
PFNGLDEBUGMESSAGEINSERTPROC :: #type (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> void #c_call;
PFNGLDEBUGMESSAGECALLBACKPROC :: #type (callback: GLDEBUGPROC, userParam: *void) -> void #c_call;
PFNGLGETDEBUGMESSAGELOGPROC :: #type (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #c_call;
PFNGLPUSHDEBUGGROUPPROC :: #type (source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) -> void #c_call;
PFNGLPOPDEBUGGROUPPROC :: #type () -> void #c_call;
PFNGLOBJECTLABELPROC :: #type (identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) -> void #c_call;
PFNGLGETOBJECTLABELPROC :: #type (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> void #c_call;
PFNGLOBJECTPTRLABELPROC :: #type (ptr: *void, length: GLsizei, label: *GLchar) -> void #c_call;
PFNGLGETOBJECTPTRLABELPROC :: #type (ptr: *void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> void #c_call;

PFNGLBUFFERSTORAGEPROC :: #type (target: GLenum, size: GLsizeiptr, data: *void, flags: GLbitfield) -> void #c_call;
PFNGLCLEARTEXIMAGEPROC :: #type (texture: GLuint, level: GLint, format: GLenum, type: GLenum, data: *void) -> void #c_call;
PFNGLCLEARTEXSUBIMAGEPROC :: #type (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, data: *void) -> void #c_call;
PFNGLBINDBUFFERSBASEPROC :: #type (target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint) -> void #c_call;
PFNGLBINDBUFFERSRANGEPROC :: #type (target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, sizes: *GLsizeiptr) -> void #c_call;
PFNGLBINDTEXTURESPROC :: #type (first: GLuint, count: GLsizei, textures: *GLuint) -> void #c_call;
PFNGLBINDSAMPLERSPROC :: #type (first: GLuint, count: GLsizei, samplers: *GLuint) -> void #c_call;
PFNGLBINDIMAGETEXTURESPROC :: #type (first: GLuint, count: GLsizei, textures: *GLuint) -> void #c_call;
PFNGLBINDVERTEXBUFFERSPROC :: #type (first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) -> void #c_call;

PFNGLCLIPCONTROLPROC :: #type (origin: GLenum, depth: GLenum) -> void #c_call;
PFNGLCREATETRANSFORMFEEDBACKSPROC :: #type (n: GLsizei, ids: *GLuint) -> void #c_call;
PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC :: #type (xfb: GLuint, index: GLuint, buffer: GLuint) -> void #c_call;
PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC :: #type (xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void #c_call;
PFNGLGETTRANSFORMFEEDBACKIVPROC :: #type (xfb: GLuint, pname: GLenum, param: *GLint) -> void #c_call;
PFNGLGETTRANSFORMFEEDBACKI_VPROC :: #type (xfb: GLuint, pname: GLenum, index: GLuint, param: *GLint) -> void #c_call;
PFNGLGETTRANSFORMFEEDBACKI64_VPROC :: #type (xfb: GLuint, pname: GLenum, index: GLuint, param: *GLint64) -> void #c_call;
PFNGLCREATEBUFFERSPROC :: #type (n: GLsizei, buffers: *GLuint) -> void #c_call;
PFNGLNAMEDBUFFERSTORAGEPROC :: #type (buffer: GLuint, size: GLsizeiptr, data: *void, flags: GLbitfield) -> void #c_call;
PFNGLNAMEDBUFFERDATAPROC :: #type (buffer: GLuint, size: GLsizeiptr, data: *void, usage: GLenum) -> void #c_call;
PFNGLNAMEDBUFFERSUBDATAPROC :: #type (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) -> void #c_call;
PFNGLCOPYNAMEDBUFFERSUBDATAPROC :: #type (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> void #c_call;
PFNGLCLEARNAMEDBUFFERDATAPROC :: #type (buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: *void) -> void #c_call;
PFNGLCLEARNAMEDBUFFERSUBDATAPROC :: #type (buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: *void) -> void #c_call;
PFNGLMAPNAMEDBUFFERPROC :: #type (buffer: GLuint, access: GLenum) -> *void #c_call;
PFNGLMAPNAMEDBUFFERRANGEPROC :: #type (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *void #c_call;
PFNGLUNMAPNAMEDBUFFERPROC :: #type (buffer: GLuint) -> GLboolean #c_call;
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC :: #type (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> void #c_call;
PFNGLGETNAMEDBUFFERPARAMETERIVPROC :: #type (buffer: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETNAMEDBUFFERPARAMETERI64VPROC :: #type (buffer: GLuint, pname: GLenum, params: *GLint64) -> void #c_call;
PFNGLGETNAMEDBUFFERPOINTERVPROC :: #type (buffer: GLuint, pname: GLenum, params: **void) -> void #c_call;
PFNGLGETNAMEDBUFFERSUBDATAPROC :: #type (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) -> void #c_call;
PFNGLCREATEFRAMEBUFFERSPROC :: #type (n: GLsizei, framebuffers: *GLuint) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC :: #type (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC :: #type (framebuffer: GLuint, pname: GLenum, param: GLint) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERTEXTUREPROC :: #type (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC :: #type (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC :: #type (framebuffer: GLuint, buf: GLenum) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC :: #type (framebuffer: GLuint, n: GLsizei, bufs: *GLenum) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC :: #type (framebuffer: GLuint, src: GLenum) -> void #c_call;
PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC :: #type (framebuffer: GLuint, numAttachments: GLsizei, attachments: *GLenum) -> void #c_call;
PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC :: #type (framebuffer: GLuint, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLCLEARNAMEDFRAMEBUFFERIVPROC :: #type (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLint) -> void #c_call;
PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC :: #type (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLuint) -> void #c_call;
PFNGLCLEARNAMEDFRAMEBUFFERFVPROC :: #type (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLfloat) -> void #c_call;
PFNGLCLEARNAMEDFRAMEBUFFERFIPROC :: #type (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> void #c_call;
PFNGLBLITNAMEDFRAMEBUFFERPROC :: #type (readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> void #c_call;
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC :: #type (framebuffer: GLuint, target: GLenum) -> GLenum #c_call;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC :: #type (framebuffer: GLuint, pname: GLenum, param: *GLint) -> void #c_call;
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC :: #type (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLCREATERENDERBUFFERSPROC :: #type (n: GLsizei, renderbuffers: *GLuint) -> void #c_call;
PFNGLNAMEDRENDERBUFFERSTORAGEPROC :: #type (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC :: #type (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC :: #type (renderbuffer: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLCREATETEXTURESPROC :: #type (target: GLenum, n: GLsizei, textures: *GLuint) -> void #c_call;
PFNGLTEXTUREBUFFERPROC :: #type (texture: GLuint, internalformat: GLenum, buffer: GLuint) -> void #c_call;
PFNGLTEXTUREBUFFERRANGEPROC :: #type (texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void #c_call;
PFNGLTEXTURESTORAGE1DPROC :: #type (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> void #c_call;
PFNGLTEXTURESTORAGE2DPROC :: #type (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLTEXTURESTORAGE3DPROC :: #type (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> void #c_call;
PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC :: #type (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> void #c_call;
PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC :: #type (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> void #c_call;
PFNGLTEXTURESUBIMAGE1DPROC :: #type (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLTEXTURESUBIMAGE2DPROC :: #type (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLTEXTURESUBIMAGE3DPROC :: #type (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC :: #type (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC :: #type (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC :: #type (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) -> void #c_call;
PFNGLCOPYTEXTURESUBIMAGE1DPROC :: #type (texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> void #c_call;
PFNGLCOPYTEXTURESUBIMAGE2DPROC :: #type (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLCOPYTEXTURESUBIMAGE3DPROC :: #type (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLTEXTUREPARAMETERFPROC :: #type (texture: GLuint, pname: GLenum, param: GLfloat) -> void #c_call;
PFNGLTEXTUREPARAMETERFVPROC :: #type (texture: GLuint, pname: GLenum, param: *GLfloat) -> void #c_call;
PFNGLTEXTUREPARAMETERIPROC :: #type (texture: GLuint, pname: GLenum, param: GLint) -> void #c_call;
PFNGLTEXTUREPARAMETERIIVPROC :: #type (texture: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLTEXTUREPARAMETERIUIVPROC :: #type (texture: GLuint, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLTEXTUREPARAMETERIVPROC :: #type (texture: GLuint, pname: GLenum, param: *GLint) -> void #c_call;
PFNGLGENERATETEXTUREMIPMAPPROC :: #type (texture: GLuint) -> void #c_call;
PFNGLBINDTEXTUREUNITPROC :: #type (unit: GLuint, texture: GLuint) -> void #c_call;
PFNGLGETTEXTUREIMAGEPROC :: #type (texture: GLuint, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) -> void #c_call;
PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC :: #type (texture: GLuint, level: GLint, bufSize: GLsizei, pixels: *void) -> void #c_call;
PFNGLGETTEXTURELEVELPARAMETERFVPROC :: #type (texture: GLuint, level: GLint, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLGETTEXTURELEVELPARAMETERIVPROC :: #type (texture: GLuint, level: GLint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETTEXTUREPARAMETERFVPROC :: #type (texture: GLuint, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLGETTEXTUREPARAMETERIIVPROC :: #type (texture: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETTEXTUREPARAMETERIUIVPROC :: #type (texture: GLuint, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLGETTEXTUREPARAMETERIVPROC :: #type (texture: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLCREATEVERTEXARRAYSPROC :: #type (n: GLsizei, arrays: *GLuint) -> void #c_call;
PFNGLDISABLEVERTEXARRAYATTRIBPROC :: #type (vaobj: GLuint, index: GLuint) -> void #c_call;
PFNGLENABLEVERTEXARRAYATTRIBPROC :: #type (vaobj: GLuint, index: GLuint) -> void #c_call;
PFNGLVERTEXARRAYELEMENTBUFFERPROC :: #type (vaobj: GLuint, buffer: GLuint) -> void #c_call;
PFNGLVERTEXARRAYVERTEXBUFFERPROC :: #type (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> void #c_call;
PFNGLVERTEXARRAYVERTEXBUFFERSPROC :: #type (vaobj: GLuint, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) -> void #c_call;
PFNGLVERTEXARRAYATTRIBBINDINGPROC :: #type (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) -> void #c_call;
PFNGLVERTEXARRAYATTRIBFORMATPROC :: #type (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> void #c_call;
PFNGLVERTEXARRAYATTRIBIFORMATPROC :: #type (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) -> void #c_call;
PFNGLVERTEXARRAYATTRIBLFORMATPROC :: #type (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) -> void #c_call;
PFNGLVERTEXARRAYBINDINGDIVISORPROC :: #type (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) -> void #c_call;
PFNGLGETVERTEXARRAYIVPROC :: #type (vaobj: GLuint, pname: GLenum, param: *GLint) -> void #c_call;
PFNGLGETVERTEXARRAYINDEXEDIVPROC :: #type (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) -> void #c_call;
PFNGLGETVERTEXARRAYINDEXED64IVPROC :: #type (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint64) -> void #c_call;
PFNGLCREATESAMPLERSPROC :: #type (n: GLsizei, samplers: *GLuint) -> void #c_call;
PFNGLCREATEPROGRAMPIPELINESPROC :: #type (n: GLsizei, pipelines: *GLuint) -> void #c_call;
PFNGLCREATEQUERIESPROC :: #type (target: GLenum, n: GLsizei, ids: *GLuint) -> void #c_call;
PFNGLGETQUERYBUFFEROBJECTI64VPROC :: #type (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) -> void #c_call;
PFNGLGETQUERYBUFFEROBJECTIVPROC :: #type (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) -> void #c_call;
PFNGLGETQUERYBUFFEROBJECTUI64VPROC :: #type (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) -> void #c_call;
PFNGLGETQUERYBUFFEROBJECTUIVPROC :: #type (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) -> void #c_call;
PFNGLMEMORYBARRIERBYREGIONPROC :: #type (barriers: GLbitfield) -> void #c_call;
PFNGLGETTEXTURESUBIMAGEPROC :: #type (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) -> void #c_call;
PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC :: #type (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: *void) -> void #c_call;
PFNGLGETGRAPHICSRESETSTATUSPROC :: #type () -> GLenum #c_call;
PFNGLGETNCOMPRESSEDTEXIMAGEPROC :: #type (target: GLenum, lod: GLint, bufSize: GLsizei, pixels: *void) -> void #c_call;
PFNGLGETNTEXIMAGEPROC :: #type (target: GLenum, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) -> void #c_call;
PFNGLGETNUNIFORMDVPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLdouble) -> void #c_call;
PFNGLGETNUNIFORMFVPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> void #c_call;
PFNGLGETNUNIFORMIVPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> void #c_call;
PFNGLGETNUNIFORMUIVPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) -> void #c_call;
PFNGLREADNPIXELSPROC :: #type (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: *void) -> void #c_call;
PFNGLTEXTUREBARRIERPROC :: #type () -> void #c_call;

PFNGLSPECIALIZESHADERPROC :: #type (shader: GLuint, pEntryPoint: *GLchar, numSpecializationConstants: GLuint, pConstantIndex: *GLuint, pConstantValue: *GLuint) -> void #c_call;
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC :: #type (mode: GLenum, indirect: *void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> void #c_call;
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC :: #type (mode: GLenum, type: GLenum, indirect: *void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> void #c_call;
PFNGLPOLYGONOFFSETCLAMPPROC :: #type (factor: GLfloat, units: GLfloat, clamp: GLfloat) -> void #c_call;

PFNGLPRIMITIVEBOUNDINGBOXARBPROC :: #type (minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) -> void #c_call;

GLuint64EXT :: u64;

PFNGLGETTEXTUREHANDLEARBPROC :: #type (texture: GLuint) -> GLuint64 #c_call;
PFNGLGETTEXTURESAMPLERHANDLEARBPROC :: #type (texture: GLuint, sampler: GLuint) -> GLuint64 #c_call;
PFNGLMAKETEXTUREHANDLERESIDENTARBPROC :: #type (handle: GLuint64) -> void #c_call;
PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC :: #type (handle: GLuint64) -> void #c_call;
PFNGLGETIMAGEHANDLEARBPROC :: #type (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 #c_call;
PFNGLMAKEIMAGEHANDLERESIDENTARBPROC :: #type (handle: GLuint64, access: GLenum) -> void #c_call;
PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC :: #type (handle: GLuint64) -> void #c_call;
PFNGLUNIFORMHANDLEUI64ARBPROC :: #type (location: GLint, value: GLuint64) -> void #c_call;
PFNGLUNIFORMHANDLEUI64VARBPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64) -> void #c_call;
PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC :: #type (program: GLuint, location: GLint, value: GLuint64) -> void #c_call;
PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC :: #type (program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) -> void #c_call;
PFNGLISTEXTUREHANDLERESIDENTARBPROC :: #type (handle: GLuint64) -> GLboolean #c_call;
PFNGLISIMAGEHANDLERESIDENTARBPROC :: #type (handle: GLuint64) -> GLboolean #c_call;
PFNGLVERTEXATTRIBL1UI64ARBPROC :: #type (index: GLuint, x: GLuint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBL1UI64VARBPROC :: #type (index: GLuint, v: *GLuint64EXT) -> void #c_call;
PFNGLGETVERTEXATTRIBLUI64VARBPROC :: #type (index: GLuint, pname: GLenum, params: *GLuint64EXT) -> void #c_call;

_cl_context :: struct {}
_cl_event :: struct {}

PFNGLCREATESYNCFROMCLEVENTARBPROC :: #type (_context: *_cl_context, event: *_cl_event, flags: GLbitfield) -> GLsync #c_call;

PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC :: #type (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint) -> void #c_call;

GLDEBUGPROCARB :: #type (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *GLchar, userParam: *void) -> void #c_call;

PFNGLDEBUGMESSAGECONTROLARBPROC :: #type (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> void #c_call;
PFNGLDEBUGMESSAGEINSERTARBPROC :: #type (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> void #c_call;
PFNGLDEBUGMESSAGECALLBACKARBPROC :: #type (callback: GLDEBUGPROCARB, userParam: *void) -> void #c_call;
PFNGLGETDEBUGMESSAGELOGARBPROC :: #type (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #c_call;

PFNGLBLENDEQUATIONIARBPROC :: #type (buf: GLuint, mode: GLenum) -> void #c_call;
PFNGLBLENDEQUATIONSEPARATEIARBPROC :: #type (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> void #c_call;
PFNGLBLENDFUNCIARBPROC :: #type (buf: GLuint, src: GLenum, dst: GLenum) -> void #c_call;
PFNGLBLENDFUNCSEPARATEIARBPROC :: #type (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> void #c_call;

PFNGLDRAWARRAYSINSTANCEDARBPROC :: #type (mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> void #c_call;
PFNGLDRAWELEMENTSINSTANCEDARBPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, primcount: GLsizei) -> void #c_call;

PFNGLPROGRAMPARAMETERIARBPROC :: #type (program: GLuint, pname: GLenum, value: GLint) -> void #c_call;
PFNGLFRAMEBUFFERTEXTUREARBPROC :: #type (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> void #c_call;
PFNGLFRAMEBUFFERTEXTURELAYERARBPROC :: #type (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> void #c_call;
PFNGLFRAMEBUFFERTEXTUREFACEARBPROC :: #type (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> void #c_call;

PFNGLSPECIALIZESHADERARBPROC :: #type (shader: GLuint, pEntryPoint: *GLchar, numSpecializationConstants: GLuint, pConstantIndex: *GLuint, pConstantValue: *GLuint) -> void #c_call;

PFNGLUNIFORM1I64ARBPROC :: #type (location: GLint, x: GLint64) -> void #c_call;
PFNGLUNIFORM2I64ARBPROC :: #type (location: GLint, x: GLint64, y: GLint64) -> void #c_call;
PFNGLUNIFORM3I64ARBPROC :: #type (location: GLint, x: GLint64, y: GLint64, z: GLint64) -> void #c_call;
PFNGLUNIFORM4I64ARBPROC :: #type (location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64) -> void #c_call;
PFNGLUNIFORM1I64VARBPROC :: #type (location: GLint, count: GLsizei, value: *GLint64) -> void #c_call;
PFNGLUNIFORM2I64VARBPROC :: #type (location: GLint, count: GLsizei, value: *GLint64) -> void #c_call;
PFNGLUNIFORM3I64VARBPROC :: #type (location: GLint, count: GLsizei, value: *GLint64) -> void #c_call;
PFNGLUNIFORM4I64VARBPROC :: #type (location: GLint, count: GLsizei, value: *GLint64) -> void #c_call;
PFNGLUNIFORM1UI64ARBPROC :: #type (location: GLint, x: GLuint64) -> void #c_call;
PFNGLUNIFORM2UI64ARBPROC :: #type (location: GLint, x: GLuint64, y: GLuint64) -> void #c_call;
PFNGLUNIFORM3UI64ARBPROC :: #type (location: GLint, x: GLuint64, y: GLuint64, z: GLuint64) -> void #c_call;
PFNGLUNIFORM4UI64ARBPROC :: #type (location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64) -> void #c_call;
PFNGLUNIFORM1UI64VARBPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64) -> void #c_call;
PFNGLUNIFORM2UI64VARBPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64) -> void #c_call;
PFNGLUNIFORM3UI64VARBPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64) -> void #c_call;
PFNGLUNIFORM4UI64VARBPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64) -> void #c_call;
PFNGLGETUNIFORMI64VARBPROC :: #type (program: GLuint, location: GLint, params: *GLint64) -> void #c_call;
PFNGLGETUNIFORMUI64VARBPROC :: #type (program: GLuint, location: GLint, params: *GLuint64) -> void #c_call;
PFNGLGETNUNIFORMI64VARBPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint64) -> void #c_call;
PFNGLGETNUNIFORMUI64VARBPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint64) -> void #c_call;
PFNGLPROGRAMUNIFORM1I64ARBPROC :: #type (program: GLuint, location: GLint, x: GLint64) -> void #c_call;
PFNGLPROGRAMUNIFORM2I64ARBPROC :: #type (program: GLuint, location: GLint, x: GLint64, y: GLint64) -> void #c_call;
PFNGLPROGRAMUNIFORM3I64ARBPROC :: #type (program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64) -> void #c_call;
PFNGLPROGRAMUNIFORM4I64ARBPROC :: #type (program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64) -> void #c_call;
PFNGLPROGRAMUNIFORM1I64VARBPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint64) -> void #c_call;
PFNGLPROGRAMUNIFORM2I64VARBPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint64) -> void #c_call;
PFNGLPROGRAMUNIFORM3I64VARBPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint64) -> void #c_call;
PFNGLPROGRAMUNIFORM4I64VARBPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint64) -> void #c_call;
PFNGLPROGRAMUNIFORM1UI64ARBPROC :: #type (program: GLuint, location: GLint, x: GLuint64) -> void #c_call;
PFNGLPROGRAMUNIFORM2UI64ARBPROC :: #type (program: GLuint, location: GLint, x: GLuint64, y: GLuint64) -> void #c_call;
PFNGLPROGRAMUNIFORM3UI64ARBPROC :: #type (program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64) -> void #c_call;
PFNGLPROGRAMUNIFORM4UI64ARBPROC :: #type (program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64) -> void #c_call;
PFNGLPROGRAMUNIFORM1UI64VARBPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64) -> void #c_call;
PFNGLPROGRAMUNIFORM2UI64VARBPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64) -> void #c_call;
PFNGLPROGRAMUNIFORM3UI64VARBPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64) -> void #c_call;
PFNGLPROGRAMUNIFORM4UI64VARBPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64) -> void #c_call;

PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC :: #type (mode: GLenum, indirect: *void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> void #c_call;
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC :: #type (mode: GLenum, type: GLenum, indirect: *void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> void #c_call;

PFNGLVERTEXATTRIBDIVISORARBPROC :: #type (index: GLuint, divisor: GLuint) -> void #c_call;

PFNGLMAXSHADERCOMPILERTHREADSARBPROC :: #type (count: GLuint) -> void #c_call;

PFNGLGETGRAPHICSRESETSTATUSARBPROC :: #type () -> GLenum #c_call;
PFNGLGETNTEXIMAGEARBPROC :: #type (target: GLenum, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, img: *void) -> void #c_call;
PFNGLREADNPIXELSARBPROC :: #type (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: *void) -> void #c_call;
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC :: #type (target: GLenum, lod: GLint, bufSize: GLsizei, img: *void) -> void #c_call;
PFNGLGETNUNIFORMFVARBPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> void #c_call;
PFNGLGETNUNIFORMIVARBPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> void #c_call;
PFNGLGETNUNIFORMUIVARBPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) -> void #c_call;
PFNGLGETNUNIFORMDVARBPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLdouble) -> void #c_call;

PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC :: #type (target: GLenum, start: GLuint, count: GLsizei, v: *GLfloat) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC :: #type (framebuffer: GLuint, start: GLuint, count: GLsizei, v: *GLfloat) -> void #c_call;
PFNGLEVALUATEDEPTHVALUESARBPROC :: #type () -> void #c_call;

PFNGLMINSAMPLESHADINGARBPROC :: #type (value: GLfloat) -> void #c_call;

PFNGLNAMEDSTRINGARBPROC :: #type (type: GLenum, namelen: GLint, name: *GLchar, stringlen: GLint, _string: *GLchar) -> void #c_call;
PFNGLDELETENAMEDSTRINGARBPROC :: #type (namelen: GLint, name: *GLchar) -> void #c_call;
PFNGLCOMPILESHADERINCLUDEARBPROC :: #type (shader: GLuint, count: GLsizei, path: **GLchar, length: *GLint) -> void #c_call;
PFNGLISNAMEDSTRINGARBPROC :: #type (namelen: GLint, name: *GLchar) -> GLboolean #c_call;
PFNGLGETNAMEDSTRINGARBPROC :: #type (namelen: GLint, name: *GLchar, bufSize: GLsizei, stringlen: *GLint, _string: *GLchar) -> void #c_call;
PFNGLGETNAMEDSTRINGIVARBPROC :: #type (namelen: GLint, name: *GLchar, pname: GLenum, params: *GLint) -> void #c_call;

PFNGLBUFFERPAGECOMMITMENTARBPROC :: #type (target: GLenum, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) -> void #c_call;
PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC :: #type (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) -> void #c_call;
PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC :: #type (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) -> void #c_call;

PFNGLTEXPAGECOMMITMENTARBPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) -> void #c_call;

PFNGLTEXBUFFERARBPROC :: #type (target: GLenum, internalformat: GLenum, buffer: GLuint) -> void #c_call;

PFNGLDEPTHRANGEARRAYDVNVPROC :: #type (first: GLuint, count: GLsizei, v: *GLdouble) -> void #c_call;
PFNGLDEPTHRANGEINDEXEDDNVPROC :: #type (index: GLuint, n: GLdouble, f: GLdouble) -> void #c_call;

PFNGLBLENDBARRIERKHRPROC :: #type () -> void #c_call;

PFNGLMAXSHADERCOMPILERTHREADSKHRPROC :: #type (count: GLuint) -> void #c_call;

PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC :: #type (target: GLenum, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC :: #type (renderbuffer: GLuint, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;

PFNGLGETPERFMONITORGROUPSAMDPROC :: #type (numGroups: *GLint, groupsSize: GLsizei, groups: *GLuint) -> void #c_call;
PFNGLGETPERFMONITORCOUNTERSAMDPROC :: #type (group: GLuint, numCounters: *GLint, maxActiveCounters: *GLint, counterSize: GLsizei, counters: *GLuint) -> void #c_call;
PFNGLGETPERFMONITORGROUPSTRINGAMDPROC :: #type (group: GLuint, bufSize: GLsizei, length: *GLsizei, groupString: *GLchar) -> void #c_call;
PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC :: #type (group: GLuint, counter: GLuint, bufSize: GLsizei, length: *GLsizei, counterString: *GLchar) -> void #c_call;
PFNGLGETPERFMONITORCOUNTERINFOAMDPROC :: #type (group: GLuint, counter: GLuint, pname: GLenum, data: *void) -> void #c_call;
PFNGLGENPERFMONITORSAMDPROC :: #type (n: GLsizei, monitors: *GLuint) -> void #c_call;
PFNGLDELETEPERFMONITORSAMDPROC :: #type (n: GLsizei, monitors: *GLuint) -> void #c_call;
PFNGLSELECTPERFMONITORCOUNTERSAMDPROC :: #type (monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: *GLuint) -> void #c_call;
PFNGLBEGINPERFMONITORAMDPROC :: #type (monitor: GLuint) -> void #c_call;
PFNGLENDPERFMONITORAMDPROC :: #type (monitor: GLuint) -> void #c_call;
PFNGLGETPERFMONITORCOUNTERDATAAMDPROC :: #type (monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: *GLuint, bytesWritten: *GLint) -> void #c_call;

GLeglImageOES :: *void;
PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC :: #type (target: GLenum, image: GLeglImageOES, attrib_list: *GLint) -> void #c_call;
PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC :: #type (texture: GLuint, image: GLeglImageOES, attrib_list: *GLint) -> void #c_call;

PFNGLLABELOBJECTEXTPROC :: #type (type: GLenum, object: GLuint, length: GLsizei, label: *GLchar) -> void #c_call;
PFNGLGETOBJECTLABELEXTPROC :: #type (type: GLenum, object: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> void #c_call;

PFNGLINSERTEVENTMARKEREXTPROC :: #type (length: GLsizei, marker: *GLchar) -> void #c_call;
PFNGLPUSHGROUPMARKEREXTPROC :: #type (length: GLsizei, marker: *GLchar) -> void #c_call;
PFNGLPOPGROUPMARKEREXTPROC :: #type () -> void #c_call;

PFNGLMATRIXLOADFEXTPROC :: #type (mode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXLOADDEXTPROC :: #type (mode: GLenum, m: *GLdouble) -> void #c_call;
PFNGLMATRIXMULTFEXTPROC :: #type (mode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXMULTDEXTPROC :: #type (mode: GLenum, m: *GLdouble) -> void #c_call;
PFNGLMATRIXLOADIDENTITYEXTPROC :: #type (mode: GLenum) -> void #c_call;
PFNGLMATRIXROTATEFEXTPROC :: #type (mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> void #c_call;
PFNGLMATRIXROTATEDEXTPROC :: #type (mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> void #c_call;
PFNGLMATRIXSCALEFEXTPROC :: #type (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> void #c_call;
PFNGLMATRIXSCALEDEXTPROC :: #type (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> void #c_call;
PFNGLMATRIXTRANSLATEFEXTPROC :: #type (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> void #c_call;
PFNGLMATRIXTRANSLATEDEXTPROC :: #type (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> void #c_call;
PFNGLMATRIXFRUSTUMEXTPROC :: #type (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> void #c_call;
PFNGLMATRIXORTHOEXTPROC :: #type (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> void #c_call;
PFNGLMATRIXPOPEXTPROC :: #type (mode: GLenum) -> void #c_call;
PFNGLMATRIXPUSHEXTPROC :: #type (mode: GLenum) -> void #c_call;
PFNGLCLIENTATTRIBDEFAULTEXTPROC :: #type (mask: GLbitfield) -> void #c_call;
PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC :: #type (mask: GLbitfield) -> void #c_call;
PFNGLTEXTUREPARAMETERFEXTPROC :: #type (texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat) -> void #c_call;
PFNGLTEXTUREPARAMETERFVEXTPROC :: #type (texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLTEXTUREPARAMETERIEXTPROC :: #type (texture: GLuint, target: GLenum, pname: GLenum, param: GLint) -> void #c_call;
PFNGLTEXTUREPARAMETERIVEXTPROC :: #type (texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLTEXTUREIMAGE1DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLTEXTUREIMAGE2DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLTEXTURESUBIMAGE1DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLTEXTURESUBIMAGE2DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLCOPYTEXTUREIMAGE1DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> void #c_call;
PFNGLCOPYTEXTUREIMAGE2DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> void #c_call;
PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> void #c_call;
PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLGETTEXTUREIMAGEEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLGETTEXTUREPARAMETERFVEXTPROC :: #type (texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLGETTEXTUREPARAMETERIVEXTPROC :: #type (texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLTEXTUREIMAGE3DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLTEXTURESUBIMAGE3DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLBINDMULTITEXTUREEXTPROC :: #type (texunit: GLenum, target: GLenum, texture: GLuint) -> void #c_call;
PFNGLMULTITEXCOORDPOINTEREXTPROC :: #type (texunit: GLenum, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) -> void #c_call;
PFNGLMULTITEXENVFEXTPROC :: #type (texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) -> void #c_call;
PFNGLMULTITEXENVFVEXTPROC :: #type (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLMULTITEXENVIEXTPROC :: #type (texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) -> void #c_call;
PFNGLMULTITEXENVIVEXTPROC :: #type (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLMULTITEXGENDEXTPROC :: #type (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble) -> void #c_call;
PFNGLMULTITEXGENDVEXTPROC :: #type (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) -> void #c_call;
PFNGLMULTITEXGENFEXTPROC :: #type (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat) -> void #c_call;
PFNGLMULTITEXGENFVEXTPROC :: #type (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLMULTITEXGENIEXTPROC :: #type (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint) -> void #c_call;
PFNGLMULTITEXGENIVEXTPROC :: #type (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETMULTITEXENVFVEXTPROC :: #type (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLGETMULTITEXENVIVEXTPROC :: #type (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETMULTITEXGENDVEXTPROC :: #type (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) -> void #c_call;
PFNGLGETMULTITEXGENFVEXTPROC :: #type (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLGETMULTITEXGENIVEXTPROC :: #type (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLMULTITEXPARAMETERIEXTPROC :: #type (texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) -> void #c_call;
PFNGLMULTITEXPARAMETERIVEXTPROC :: #type (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLMULTITEXPARAMETERFEXTPROC :: #type (texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) -> void #c_call;
PFNGLMULTITEXPARAMETERFVEXTPROC :: #type (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLMULTITEXIMAGE1DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLMULTITEXIMAGE2DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLMULTITEXSUBIMAGE1DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLMULTITEXSUBIMAGE2DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLCOPYMULTITEXIMAGE1DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> void #c_call;
PFNGLCOPYMULTITEXIMAGE2DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> void #c_call;
PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> void #c_call;
PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLGETMULTITEXIMAGEEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLGETMULTITEXPARAMETERFVEXTPROC :: #type (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLGETMULTITEXPARAMETERIVEXTPROC :: #type (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLMULTITEXIMAGE3DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLMULTITEXSUBIMAGE3DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLENABLECLIENTSTATEINDEXEDEXTPROC :: #type (array: GLenum, index: GLuint) -> void #c_call;
PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC :: #type (array: GLenum, index: GLuint) -> void #c_call;
PFNGLGETFLOATINDEXEDVEXTPROC :: #type (target: GLenum, index: GLuint, data: *GLfloat) -> void #c_call;
PFNGLGETDOUBLEINDEXEDVEXTPROC :: #type (target: GLenum, index: GLuint, data: *GLdouble) -> void #c_call;
PFNGLGETPOINTERINDEXEDVEXTPROC :: #type (target: GLenum, index: GLuint, data: **void) -> void #c_call;
PFNGLENABLEINDEXEDEXTPROC :: #type (target: GLenum, index: GLuint) -> void #c_call;
PFNGLDISABLEINDEXEDEXTPROC :: #type (target: GLenum, index: GLuint) -> void #c_call;
PFNGLISENABLEDINDEXEDEXTPROC :: #type (target: GLenum, index: GLuint) -> GLboolean #c_call;
PFNGLGETINTEGERINDEXEDVEXTPROC :: #type (target: GLenum, index: GLuint, data: *GLint) -> void #c_call;
PFNGLGETBOOLEANINDEXEDVEXTPROC :: #type (target: GLenum, index: GLuint, data: *GLboolean) -> void #c_call;
PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC :: #type (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) -> void #c_call;
PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC :: #type (texture: GLuint, target: GLenum, lod: GLint, img: *void) -> void #c_call;
PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) -> void #c_call;
PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) -> void #c_call;
PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) -> void #c_call;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) -> void #c_call;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) -> void #c_call;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC :: #type (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) -> void #c_call;
PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC :: #type (texunit: GLenum, target: GLenum, lod: GLint, img: *void) -> void #c_call;
PFNGLMATRIXLOADTRANSPOSEFEXTPROC :: #type (mode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXLOADTRANSPOSEDEXTPROC :: #type (mode: GLenum, m: *GLdouble) -> void #c_call;
PFNGLMATRIXMULTTRANSPOSEFEXTPROC :: #type (mode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXMULTTRANSPOSEDEXTPROC :: #type (mode: GLenum, m: *GLdouble) -> void #c_call;
PFNGLNAMEDBUFFERDATAEXTPROC :: #type (buffer: GLuint, size: GLsizeiptr, data: *void, usage: GLenum) -> void #c_call;
PFNGLNAMEDBUFFERSUBDATAEXTPROC :: #type (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) -> void #c_call;
PFNGLMAPNAMEDBUFFEREXTPROC :: #type (buffer: GLuint, access: GLenum) -> *void #c_call;
PFNGLUNMAPNAMEDBUFFEREXTPROC :: #type (buffer: GLuint) -> GLboolean #c_call;
PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC :: #type (buffer: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETNAMEDBUFFERPOINTERVEXTPROC :: #type (buffer: GLuint, pname: GLenum, params: **void) -> void #c_call;
PFNGLGETNAMEDBUFFERSUBDATAEXTPROC :: #type (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) -> void #c_call;
PFNGLPROGRAMUNIFORM1FEXTPROC :: #type (program: GLuint, location: GLint, v0: GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM2FEXTPROC :: #type (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM3FEXTPROC :: #type (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM4FEXTPROC :: #type (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM1IEXTPROC :: #type (program: GLuint, location: GLint, v0: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM2IEXTPROC :: #type (program: GLuint, location: GLint, v0: GLint, v1: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM3IEXTPROC :: #type (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM4IEXTPROC :: #type (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM1FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM2FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM3FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM4FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM1IVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM2IVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM3IVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM4IVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLTEXTUREBUFFEREXTPROC :: #type (texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint) -> void #c_call;
PFNGLMULTITEXBUFFEREXTPROC :: #type (texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint) -> void #c_call;
PFNGLTEXTUREPARAMETERIIVEXTPROC :: #type (texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLTEXTUREPARAMETERIUIVEXTPROC :: #type (texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLGETTEXTUREPARAMETERIIVEXTPROC :: #type (texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETTEXTUREPARAMETERIUIVEXTPROC :: #type (texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLMULTITEXPARAMETERIIVEXTPROC :: #type (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLMULTITEXPARAMETERIUIVEXTPROC :: #type (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLGETMULTITEXPARAMETERIIVEXTPROC :: #type (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETMULTITEXPARAMETERIUIVEXTPROC :: #type (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM1UIEXTPROC :: #type (program: GLuint, location: GLint, v0: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM2UIEXTPROC :: #type (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM3UIEXTPROC :: #type (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM4UIEXTPROC :: #type (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM1UIVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM2UIVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM3UIVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM4UIVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC :: #type (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> void #c_call;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC :: #type (program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> void #c_call;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC :: #type (program: GLuint, target: GLenum, index: GLuint, params: *GLint) -> void #c_call;
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC :: #type (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> void #c_call;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC :: #type (program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> void #c_call;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC :: #type (program: GLuint, target: GLenum, index: GLuint, params: *GLuint) -> void #c_call;
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC :: #type (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> void #c_call;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC :: #type (program: GLuint, target: GLenum, index: GLuint, params: *GLint) -> void #c_call;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC :: #type (program: GLuint, target: GLenum, index: GLuint, params: *GLuint) -> void #c_call;
PFNGLENABLECLIENTSTATEIEXTPROC :: #type (array: GLenum, index: GLuint) -> void #c_call;
PFNGLDISABLECLIENTSTATEIEXTPROC :: #type (array: GLenum, index: GLuint) -> void #c_call;
PFNGLGETFLOATI_VEXTPROC :: #type (pname: GLenum, index: GLuint, params: *GLfloat) -> void #c_call;
PFNGLGETDOUBLEI_VEXTPROC :: #type (pname: GLenum, index: GLuint, params: *GLdouble) -> void #c_call;
PFNGLGETPOINTERI_VEXTPROC :: #type (pname: GLenum, index: GLuint, params: **void) -> void #c_call;
PFNGLNAMEDPROGRAMSTRINGEXTPROC :: #type (program: GLuint, target: GLenum, format: GLenum, len: GLsizei, _string: *void) -> void #c_call;
PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC :: #type (program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void #c_call;
PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC :: #type (program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) -> void #c_call;
PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC :: #type (program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void #c_call;
PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC :: #type (program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) -> void #c_call;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC :: #type (program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) -> void #c_call;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC :: #type (program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) -> void #c_call;
PFNGLGETNAMEDPROGRAMIVEXTPROC :: #type (program: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETNAMEDPROGRAMSTRINGEXTPROC :: #type (program: GLuint, target: GLenum, pname: GLenum, _string: *void) -> void #c_call;
PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC :: #type (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC :: #type (renderbuffer: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC :: #type (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC :: #type (renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC :: #type (framebuffer: GLuint, target: GLenum) -> GLenum #c_call;
PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC :: #type (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC :: #type (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC :: #type (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC :: #type (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> void #c_call;
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC :: #type (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGENERATETEXTUREMIPMAPEXTPROC :: #type (texture: GLuint, target: GLenum) -> void #c_call;
PFNGLGENERATEMULTITEXMIPMAPEXTPROC :: #type (texunit: GLenum, target: GLenum) -> void #c_call;
PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC :: #type (framebuffer: GLuint, mode: GLenum) -> void #c_call;
PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC :: #type (framebuffer: GLuint, n: GLsizei, bufs: *GLenum) -> void #c_call;
PFNGLFRAMEBUFFERREADBUFFEREXTPROC :: #type (framebuffer: GLuint, mode: GLenum) -> void #c_call;
PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC :: #type (framebuffer: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC :: #type (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC :: #type (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC :: #type (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC :: #type (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> void #c_call;
PFNGLTEXTURERENDERBUFFEREXTPROC :: #type (texture: GLuint, target: GLenum, renderbuffer: GLuint) -> void #c_call;
PFNGLMULTITEXRENDERBUFFEREXTPROC :: #type (texunit: GLenum, target: GLenum, renderbuffer: GLuint) -> void #c_call;
PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC :: #type (vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) -> void #c_call;
PFNGLVERTEXARRAYCOLOROFFSETEXTPROC :: #type (vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) -> void #c_call;
PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC :: #type (vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr) -> void #c_call;
PFNGLVERTEXARRAYINDEXOFFSETEXTPROC :: #type (vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr) -> void #c_call;
PFNGLVERTEXARRAYNORMALOFFSETEXTPROC :: #type (vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr) -> void #c_call;
PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC :: #type (vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) -> void #c_call;
PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC :: #type (vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) -> void #c_call;
PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC :: #type (vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr) -> void #c_call;
PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC :: #type (vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) -> void #c_call;
PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC :: #type (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr) -> void #c_call;
PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC :: #type (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) -> void #c_call;
PFNGLENABLEVERTEXARRAYEXTPROC :: #type (vaobj: GLuint, array: GLenum) -> void #c_call;
PFNGLDISABLEVERTEXARRAYEXTPROC :: #type (vaobj: GLuint, array: GLenum) -> void #c_call;
PFNGLENABLEVERTEXARRAYATTRIBEXTPROC :: #type (vaobj: GLuint, index: GLuint) -> void #c_call;
PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC :: #type (vaobj: GLuint, index: GLuint) -> void #c_call;
PFNGLGETVERTEXARRAYINTEGERVEXTPROC :: #type (vaobj: GLuint, pname: GLenum, param: *GLint) -> void #c_call;
PFNGLGETVERTEXARRAYPOINTERVEXTPROC :: #type (vaobj: GLuint, pname: GLenum, param: **void) -> void #c_call;
PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC :: #type (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) -> void #c_call;
PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC :: #type (vaobj: GLuint, index: GLuint, pname: GLenum, param: **void) -> void #c_call;
PFNGLMAPNAMEDBUFFERRANGEEXTPROC :: #type (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *void #c_call;
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC :: #type (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> void #c_call;
PFNGLNAMEDBUFFERSTORAGEEXTPROC :: #type (buffer: GLuint, size: GLsizeiptr, data: *void, flags: GLbitfield) -> void #c_call;
PFNGLCLEARNAMEDBUFFERDATAEXTPROC :: #type (buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: *void) -> void #c_call;
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC :: #type (buffer: GLuint, internalformat: GLenum, offset: GLsizeiptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: *void) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC :: #type (framebuffer: GLuint, pname: GLenum, param: GLint) -> void #c_call;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC :: #type (framebuffer: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM1DEXTPROC :: #type (program: GLuint, location: GLint, x: GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORM2DEXTPROC :: #type (program: GLuint, location: GLint, x: GLdouble, y: GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORM3DEXTPROC :: #type (program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORM4DEXTPROC :: #type (program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORM1DVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORM2DVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORM3DVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORM4DVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> void #c_call;
PFNGLTEXTUREBUFFERRANGEEXTPROC :: #type (texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void #c_call;
PFNGLTEXTURESTORAGE1DEXTPROC :: #type (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> void #c_call;
PFNGLTEXTURESTORAGE2DEXTPROC :: #type (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLTEXTURESTORAGE3DEXTPROC :: #type (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> void #c_call;
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC :: #type (texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> void #c_call;
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC :: #type (texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> void #c_call;
PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC :: #type (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> void #c_call;
PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC :: #type (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> void #c_call;
PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC :: #type (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) -> void #c_call;
PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC :: #type (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) -> void #c_call;
PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC :: #type (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) -> void #c_call;
PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC :: #type (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) -> void #c_call;
PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC :: #type (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) -> void #c_call;
PFNGLTEXTUREPAGECOMMITMENTEXTPROC :: #type (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) -> void #c_call;
PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC :: #type (vaobj: GLuint, index: GLuint, divisor: GLuint) -> void #c_call;

PFNGLDRAWARRAYSINSTANCEDEXTPROC :: #type (mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) -> void #c_call;
PFNGLDRAWELEMENTSINSTANCEDEXTPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, primcount: GLsizei) -> void #c_call;

PFNGLPOLYGONOFFSETCLAMPEXTPROC :: #type (factor: GLfloat, units: GLfloat, clamp: GLfloat) -> void #c_call;

PFNGLRASTERSAMPLESEXTPROC :: #type (samples: GLuint, fixedsamplelocations: GLboolean) -> void #c_call;

PFNGLUSESHADERPROGRAMEXTPROC :: #type (type: GLenum, program: GLuint) -> void #c_call;
PFNGLACTIVEPROGRAMEXTPROC :: #type (program: GLuint) -> void #c_call;
PFNGLCREATESHADERPROGRAMEXTPROC :: #type (type: GLenum, _string: *GLchar) -> GLuint #c_call;

PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC :: #type () -> void #c_call;

PFNGLTEXSTORAGE1DEXTPROC :: #type (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> void #c_call;
PFNGLTEXSTORAGE2DEXTPROC :: #type (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLTEXSTORAGE3DEXTPROC :: #type (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> void #c_call;

PFNGLWINDOWRECTANGLESEXTPROC :: #type (mode: GLenum, count: GLsizei, box: *GLint) -> void #c_call;

PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC :: #type () -> void #c_call;

PFNGLBEGINPERFQUERYINTELPROC :: #type (queryHandle: GLuint) -> void #c_call;
PFNGLCREATEPERFQUERYINTELPROC :: #type (queryId: GLuint, queryHandle: *GLuint) -> void #c_call;
PFNGLDELETEPERFQUERYINTELPROC :: #type (queryHandle: GLuint) -> void #c_call;
PFNGLENDPERFQUERYINTELPROC :: #type (queryHandle: GLuint) -> void #c_call;
PFNGLGETFIRSTPERFQUERYIDINTELPROC :: #type (queryId: *GLuint) -> void #c_call;
PFNGLGETNEXTPERFQUERYIDINTELPROC :: #type (queryId: GLuint, nextQueryId: *GLuint) -> void #c_call;
PFNGLGETPERFCOUNTERINFOINTELPROC :: #type (queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: *GLchar, counterDescLength: GLuint, counterDesc: *GLchar, counterOffset: *GLuint, counterDataSize: *GLuint, counterTypeEnum: *GLuint, counterDataTypeEnum: *GLuint, rawCounterMaxValue: *GLuint64) -> void #c_call;
PFNGLGETPERFQUERYDATAINTELPROC :: #type (queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: *void, bytesWritten: *GLuint) -> void #c_call;
PFNGLGETPERFQUERYIDBYNAMEINTELPROC :: #type (queryName: *GLchar, queryId: *GLuint) -> void #c_call;
PFNGLGETPERFQUERYINFOINTELPROC :: #type (queryId: GLuint, queryNameLength: GLuint, queryName: *GLchar, dataSize: *GLuint, noCounters: *GLuint, noInstances: *GLuint, capsMask: *GLuint) -> void #c_call;

PFNGLFRAMEBUFFERPARAMETERIMESAPROC :: #type (target: GLenum, pname: GLenum, param: GLint) -> void #c_call;
PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;

PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC :: #type (mode: GLenum, indirect: *void, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> void #c_call;
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC :: #type (mode: GLenum, type: GLenum, indirect: *void, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> void #c_call;

PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC :: #type (mode: GLenum, indirect: *void, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> void #c_call;
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC :: #type (mode: GLenum, type: GLenum, indirect: *void, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> void #c_call;

PFNGLGETTEXTUREHANDLENVPROC :: #type (texture: GLuint) -> GLuint64 #c_call;
PFNGLGETTEXTURESAMPLERHANDLENVPROC :: #type (texture: GLuint, sampler: GLuint) -> GLuint64 #c_call;
PFNGLMAKETEXTUREHANDLERESIDENTNVPROC :: #type (handle: GLuint64) -> void #c_call;
PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC :: #type (handle: GLuint64) -> void #c_call;
PFNGLGETIMAGEHANDLENVPROC :: #type (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 #c_call;
PFNGLMAKEIMAGEHANDLERESIDENTNVPROC :: #type (handle: GLuint64, access: GLenum) -> void #c_call;
PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC :: #type (handle: GLuint64) -> void #c_call;
PFNGLUNIFORMHANDLEUI64NVPROC :: #type (location: GLint, value: GLuint64) -> void #c_call;
PFNGLUNIFORMHANDLEUI64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64) -> void #c_call;
PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC :: #type (program: GLuint, location: GLint, value: GLuint64) -> void #c_call;
PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) -> void #c_call;
PFNGLISTEXTUREHANDLERESIDENTNVPROC :: #type (handle: GLuint64) -> GLboolean #c_call;
PFNGLISIMAGEHANDLERESIDENTNVPROC :: #type (handle: GLuint64) -> GLboolean #c_call;

PFNGLBLENDPARAMETERINVPROC :: #type (pname: GLenum, value: GLint) -> void #c_call;
PFNGLBLENDBARRIERNVPROC :: #type () -> void #c_call;

PFNGLVIEWPORTPOSITIONWSCALENVPROC :: #type (index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) -> void #c_call;

PFNGLCREATESTATESNVPROC :: #type (n: GLsizei, states: *GLuint) -> void #c_call;
PFNGLDELETESTATESNVPROC :: #type (n: GLsizei, states: *GLuint) -> void #c_call;
PFNGLISSTATENVPROC :: #type (state: GLuint) -> GLboolean #c_call;
PFNGLSTATECAPTURENVPROC :: #type (state: GLuint, mode: GLenum) -> void #c_call;
PFNGLGETCOMMANDHEADERNVPROC :: #type (tokenID: GLenum, size: GLuint) -> GLuint #c_call;
PFNGLGETSTAGEINDEXNVPROC :: #type (shadertype: GLenum) -> GLushort #c_call;
PFNGLDRAWCOMMANDSNVPROC :: #type (primitiveMode: GLenum, buffer: GLuint, indirects: *GLintptr, sizes: *GLsizei, count: GLuint) -> void #c_call;
PFNGLDRAWCOMMANDSADDRESSNVPROC :: #type (primitiveMode: GLenum, indirects: *GLuint64, sizes: *GLsizei, count: GLuint) -> void #c_call;
PFNGLDRAWCOMMANDSSTATESNVPROC :: #type (buffer: GLuint, indirects: *GLintptr, sizes: *GLsizei, states: *GLuint, fbos: *GLuint, count: GLuint) -> void #c_call;
PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC :: #type (indirects: *GLuint64, sizes: *GLsizei, states: *GLuint, fbos: *GLuint, count: GLuint) -> void #c_call;
PFNGLCREATECOMMANDLISTSNVPROC :: #type (n: GLsizei, lists: *GLuint) -> void #c_call;
PFNGLDELETECOMMANDLISTSNVPROC :: #type (n: GLsizei, lists: *GLuint) -> void #c_call;
PFNGLISCOMMANDLISTNVPROC :: #type (list: GLuint) -> GLboolean #c_call;
PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC :: #type (list: GLuint, segment: GLuint, indirects: **void, sizes: *GLsizei, states: *GLuint, fbos: *GLuint, count: GLuint) -> void #c_call;
PFNGLCOMMANDLISTSEGMENTSNVPROC :: #type (list: GLuint, segments: GLuint) -> void #c_call;
PFNGLCOMPILECOMMANDLISTNVPROC :: #type (list: GLuint) -> void #c_call;
PFNGLCALLCOMMANDLISTNVPROC :: #type (list: GLuint) -> void #c_call;

PFNGLBEGINCONDITIONALRENDERNVPROC :: #type (id: GLuint, mode: GLenum) -> void #c_call;
PFNGLENDCONDITIONALRENDERNVPROC :: #type () -> void #c_call;

PFNGLSUBPIXELPRECISIONBIASNVPROC :: #type (xbits: GLuint, ybits: GLuint) -> void #c_call;

PFNGLCONSERVATIVERASTERPARAMETERFNVPROC :: #type (pname: GLenum, value: GLfloat) -> void #c_call;

PFNGLCONSERVATIVERASTERPARAMETERINVPROC :: #type (pname: GLenum, param: GLint) -> void #c_call;

PFNGLDEPTHRANGEDNVPROC :: #type (zNear: GLdouble, zFar: GLdouble) -> void #c_call;
PFNGLCLEARDEPTHDNVPROC :: #type (depth: GLdouble) -> void #c_call;
PFNGLDEPTHBOUNDSDNVPROC :: #type (zmin: GLdouble, zmax: GLdouble) -> void #c_call;

GLVULKANPROCNV :: #type () -> void #c_call;
PFNGLDRAWVKIMAGENVPROC :: #type (vkImage: GLuint64, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) -> void #c_call;
PFNGLGETVKPROCADDRNVPROC :: #type (name: *GLchar) -> GLVULKANPROCNV #c_call;
PFNGLWAITVKSEMAPHORENVPROC :: #type (vkSemaphore: GLuint64) -> void #c_call;
PFNGLSIGNALVKSEMAPHORENVPROC :: #type (vkSemaphore: GLuint64) -> void #c_call;
PFNGLSIGNALVKFENCENVPROC :: #type (vkFence: GLuint64) -> void #c_call;

PFNGLFRAGMENTCOVERAGECOLORNVPROC :: #type (color: GLuint) -> void #c_call;

PFNGLCOVERAGEMODULATIONTABLENVPROC :: #type (n: GLsizei, v: *GLfloat) -> void #c_call;
PFNGLGETCOVERAGEMODULATIONTABLENVPROC :: #type (bufSize: GLsizei, v: *GLfloat) -> void #c_call;
PFNGLCOVERAGEMODULATIONNVPROC :: #type (components: GLenum) -> void #c_call;

PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC :: #type (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;

GLint64EXT :: s64;

PFNGLUNIFORM1I64NVPROC :: #type (location: GLint, x: GLint64EXT) -> void #c_call;
PFNGLUNIFORM2I64NVPROC :: #type (location: GLint, x: GLint64EXT, y: GLint64EXT) -> void #c_call;
PFNGLUNIFORM3I64NVPROC :: #type (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> void #c_call;
PFNGLUNIFORM4I64NVPROC :: #type (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> void #c_call;
PFNGLUNIFORM1I64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLint64EXT) -> void #c_call;
PFNGLUNIFORM2I64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLint64EXT) -> void #c_call;
PFNGLUNIFORM3I64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLint64EXT) -> void #c_call;
PFNGLUNIFORM4I64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLint64EXT) -> void #c_call;
PFNGLUNIFORM1UI64NVPROC :: #type (location: GLint, x: GLuint64EXT) -> void #c_call;
PFNGLUNIFORM2UI64NVPROC :: #type (location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> void #c_call;
PFNGLUNIFORM3UI64NVPROC :: #type (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> void #c_call;
PFNGLUNIFORM4UI64NVPROC :: #type (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> void #c_call;
PFNGLUNIFORM1UI64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;
PFNGLUNIFORM2UI64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;
PFNGLUNIFORM3UI64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;
PFNGLUNIFORM4UI64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;
PFNGLGETUNIFORMI64VNVPROC :: #type (program: GLuint, location: GLint, params: *GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM1I64NVPROC :: #type (program: GLuint, location: GLint, x: GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM2I64NVPROC :: #type (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM3I64NVPROC :: #type (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM4I64NVPROC :: #type (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM1I64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM2I64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM3I64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM4I64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM1UI64NVPROC :: #type (program: GLuint, location: GLint, x: GLuint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM2UI64NVPROC :: #type (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM3UI64NVPROC :: #type (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM4UI64NVPROC :: #type (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM1UI64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM2UI64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM3UI64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM4UI64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;

PFNGLGETINTERNALFORMATSAMPLEIVNVPROC :: #type (target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, count: GLsizei, params: *GLint) -> void #c_call;

PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC :: #type (memory: GLuint, pname: GLenum, first: GLint, count: GLsizei, params: *GLuint) -> void #c_call;
PFNGLRESETMEMORYOBJECTPARAMETERNVPROC :: #type (memory: GLuint, pname: GLenum) -> void #c_call;
PFNGLTEXATTACHMEMORYNVPROC :: #type (target: GLenum, memory: GLuint, offset: GLuint64) -> void #c_call;
PFNGLBUFFERATTACHMEMORYNVPROC :: #type (target: GLenum, memory: GLuint, offset: GLuint64) -> void #c_call;
PFNGLTEXTUREATTACHMEMORYNVPROC :: #type (texture: GLuint, memory: GLuint, offset: GLuint64) -> void #c_call;
PFNGLNAMEDBUFFERATTACHMEMORYNVPROC :: #type (buffer: GLuint, memory: GLuint, offset: GLuint64) -> void #c_call;

PFNGLBUFFERPAGECOMMITMENTMEMNVPROC :: #type (target: GLenum, offset: GLintptr, size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean) -> void #c_call;
PFNGLTEXPAGECOMMITMENTMEMNVPROC :: #type (target: GLenum, layer: GLint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, commit: GLboolean) -> void #c_call;
PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC :: #type (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean) -> void #c_call;
PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC :: #type (texture: GLuint, layer: GLint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, commit: GLboolean) -> void #c_call;

PFNGLDRAWMESHTASKSNVPROC :: #type (first: GLuint, count: GLuint) -> void #c_call;
PFNGLDRAWMESHTASKSINDIRECTNVPROC :: #type (indirect: GLintptr) -> void #c_call;
PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC :: #type (indirect: GLintptr, drawcount: GLsizei, stride: GLsizei) -> void #c_call;
PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC :: #type (indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> void #c_call;

PFNGLGENPATHSNVPROC :: #type (range: GLsizei) -> GLuint #c_call;
PFNGLDELETEPATHSNVPROC :: #type (path: GLuint, range: GLsizei) -> void #c_call;
PFNGLISPATHNVPROC :: #type (path: GLuint) -> GLboolean #c_call;
PFNGLPATHCOMMANDSNVPROC :: #type (path: GLuint, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *void) -> void #c_call;
PFNGLPATHCOORDSNVPROC :: #type (path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: *void) -> void #c_call;
PFNGLPATHSUBCOMMANDSNVPROC :: #type (path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *void) -> void #c_call;
PFNGLPATHSUBCOORDSNVPROC :: #type (path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: *void) -> void #c_call;
PFNGLPATHSTRINGNVPROC :: #type (path: GLuint, format: GLenum, length: GLsizei, pathString: *void) -> void #c_call;
PFNGLPATHGLYPHSNVPROC :: #type (firstPathName: GLuint, fontTarget: GLenum, fontName: *void, fontStyle: GLbitfield, numGlyphs: GLsizei, type: GLenum, charcodes: *void, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> void #c_call;
PFNGLPATHGLYPHRANGENVPROC :: #type (firstPathName: GLuint, fontTarget: GLenum, fontName: *void, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> void #c_call;
PFNGLWEIGHTPATHSNVPROC :: #type (resultPath: GLuint, numPaths: GLsizei, paths: *GLuint, weights: *GLfloat) -> void #c_call;
PFNGLCOPYPATHNVPROC :: #type (resultPath: GLuint, srcPath: GLuint) -> void #c_call;
PFNGLINTERPOLATEPATHSNVPROC :: #type (resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) -> void #c_call;
PFNGLTRANSFORMPATHNVPROC :: #type (resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: *GLfloat) -> void #c_call;
PFNGLPATHPARAMETERIVNVPROC :: #type (path: GLuint, pname: GLenum, value: *GLint) -> void #c_call;
PFNGLPATHPARAMETERINVPROC :: #type (path: GLuint, pname: GLenum, value: GLint) -> void #c_call;
PFNGLPATHPARAMETERFVNVPROC :: #type (path: GLuint, pname: GLenum, value: *GLfloat) -> void #c_call;
PFNGLPATHPARAMETERFNVPROC :: #type (path: GLuint, pname: GLenum, value: GLfloat) -> void #c_call;
PFNGLPATHDASHARRAYNVPROC :: #type (path: GLuint, dashCount: GLsizei, dashArray: *GLfloat) -> void #c_call;
PFNGLPATHSTENCILFUNCNVPROC :: #type (func: GLenum, ref: GLint, mask: GLuint) -> void #c_call;
PFNGLPATHSTENCILDEPTHOFFSETNVPROC :: #type (factor: GLfloat, units: GLfloat) -> void #c_call;
PFNGLSTENCILFILLPATHNVPROC :: #type (path: GLuint, fillMode: GLenum, mask: GLuint) -> void #c_call;
PFNGLSTENCILSTROKEPATHNVPROC :: #type (path: GLuint, reference: GLint, mask: GLuint) -> void #c_call;
PFNGLSTENCILFILLPATHINSTANCEDNVPROC :: #type (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) -> void #c_call;
PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC :: #type (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) -> void #c_call;
PFNGLPATHCOVERDEPTHFUNCNVPROC :: #type (func: GLenum) -> void #c_call;
PFNGLCOVERFILLPATHNVPROC :: #type (path: GLuint, coverMode: GLenum) -> void #c_call;
PFNGLCOVERSTROKEPATHNVPROC :: #type (path: GLuint, coverMode: GLenum) -> void #c_call;
PFNGLCOVERFILLPATHINSTANCEDNVPROC :: #type (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> void #c_call;
PFNGLCOVERSTROKEPATHINSTANCEDNVPROC :: #type (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> void #c_call;
PFNGLGETPATHPARAMETERIVNVPROC :: #type (path: GLuint, pname: GLenum, value: *GLint) -> void #c_call;
PFNGLGETPATHPARAMETERFVNVPROC :: #type (path: GLuint, pname: GLenum, value: *GLfloat) -> void #c_call;
PFNGLGETPATHCOMMANDSNVPROC :: #type (path: GLuint, commands: *GLubyte) -> void #c_call;
PFNGLGETPATHCOORDSNVPROC :: #type (path: GLuint, coords: *GLfloat) -> void #c_call;
PFNGLGETPATHDASHARRAYNVPROC :: #type (path: GLuint, dashArray: *GLfloat) -> void #c_call;
PFNGLGETPATHMETRICSNVPROC :: #type (metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, stride: GLsizei, metrics: *GLfloat) -> void #c_call;
PFNGLGETPATHMETRICRANGENVPROC :: #type (metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: *GLfloat) -> void #c_call;
PFNGLGETPATHSPACINGNVPROC :: #type (pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: *GLfloat) -> void #c_call;
PFNGLISPOINTINFILLPATHNVPROC :: #type (path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) -> GLboolean #c_call;
PFNGLISPOINTINSTROKEPATHNVPROC :: #type (path: GLuint, x: GLfloat, y: GLfloat) -> GLboolean #c_call;
PFNGLGETPATHLENGTHNVPROC :: #type (path: GLuint, startSegment: GLsizei, numSegments: GLsizei) -> GLfloat #c_call;
PFNGLPOINTALONGPATHNVPROC :: #type (path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: *GLfloat, y: *GLfloat, tangentX: *GLfloat, tangentY: *GLfloat) -> GLboolean #c_call;
PFNGLMATRIXLOAD3X2FNVPROC :: #type (matrixMode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXLOAD3X3FNVPROC :: #type (matrixMode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC :: #type (matrixMode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXMULT3X2FNVPROC :: #type (matrixMode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXMULT3X3FNVPROC :: #type (matrixMode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC :: #type (matrixMode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLSTENCILTHENCOVERFILLPATHNVPROC :: #type (path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum) -> void #c_call;
PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC :: #type (path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum) -> void #c_call;
PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC :: #type (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> void #c_call;
PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC :: #type (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> void #c_call;
PFNGLPATHGLYPHINDEXRANGENVPROC :: #type (fontTarget: GLenum, fontName: *void, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: *GLuint) -> GLenum #c_call;
PFNGLPATHGLYPHINDEXARRAYNVPROC :: #type (firstPathName: GLuint, fontTarget: GLenum, fontName: *void, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) -> GLenum #c_call;
PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC :: #type (firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: *void, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) -> GLenum #c_call;
PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC :: #type (program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: *GLfloat) -> void #c_call;
PFNGLGETPROGRAMRESOURCEFVNVPROC :: #type (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, count: GLsizei, length: *GLsizei, params: *GLfloat) -> void #c_call;

PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC :: #type (target: GLenum, start: GLuint, count: GLsizei, v: *GLfloat) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC :: #type (framebuffer: GLuint, start: GLuint, count: GLsizei, v: *GLfloat) -> void #c_call;
PFNGLRESOLVEDEPTHVALUESNVPROC :: #type () -> void #c_call;

PFNGLSCISSOREXCLUSIVENVPROC :: #type (x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLSCISSOREXCLUSIVEARRAYVNVPROC :: #type (first: GLuint, count: GLsizei, v: *GLint) -> void #c_call;

PFNGLMAKEBUFFERRESIDENTNVPROC :: #type (target: GLenum, access: GLenum) -> void #c_call;
PFNGLMAKEBUFFERNONRESIDENTNVPROC :: #type (target: GLenum) -> void #c_call;
PFNGLISBUFFERRESIDENTNVPROC :: #type (target: GLenum) -> GLboolean #c_call;
PFNGLMAKENAMEDBUFFERRESIDENTNVPROC :: #type (buffer: GLuint, access: GLenum) -> void #c_call;
PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC :: #type (buffer: GLuint) -> void #c_call;
PFNGLISNAMEDBUFFERRESIDENTNVPROC :: #type (buffer: GLuint) -> GLboolean #c_call;
PFNGLGETBUFFERPARAMETERUI64VNVPROC :: #type (target: GLenum, pname: GLenum, params: *GLuint64EXT) -> void #c_call;
PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC :: #type (buffer: GLuint, pname: GLenum, params: *GLuint64EXT) -> void #c_call;
PFNGLGETINTEGERUI64VNVPROC :: #type (value: GLenum, result: *GLuint64EXT) -> void #c_call;
PFNGLUNIFORMUI64NVPROC :: #type (location: GLint, value: GLuint64EXT) -> void #c_call;
PFNGLUNIFORMUI64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;
PFNGLGETUNIFORMUI64VNVPROC :: #type (program: GLuint, location: GLint, params: *GLuint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORMUI64NVPROC :: #type (program: GLuint, location: GLint, value: GLuint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORMUI64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;

PFNGLBINDSHADINGRATEIMAGENVPROC :: #type (texture: GLuint) -> void #c_call;
PFNGLGETSHADINGRATEIMAGEPALETTENVPROC :: #type (viewport: GLuint, entry: GLuint, rate: *GLenum) -> void #c_call;
PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC :: #type (rate: GLenum, samples: GLuint, index: GLuint, location: *GLint) -> void #c_call;
PFNGLSHADINGRATEIMAGEBARRIERNVPROC :: #type (synchronize: GLboolean) -> void #c_call;
PFNGLSHADINGRATEIMAGEPALETTENVPROC :: #type (viewport: GLuint, first: GLuint, count: GLsizei, rates: *GLenum) -> void #c_call;
PFNGLSHADINGRATESAMPLEORDERNVPROC :: #type (order: GLenum) -> void #c_call;
PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC :: #type (rate: GLenum, samples: GLuint, locations: *GLint) -> void #c_call;

PFNGLTEXTUREBARRIERNVPROC :: #type () -> void #c_call;

PFNGLVERTEXATTRIBL1I64NVPROC :: #type (index: GLuint, x: GLint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBL2I64NVPROC :: #type (index: GLuint, x: GLint64EXT, y: GLint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBL3I64NVPROC :: #type (index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBL4I64NVPROC :: #type (index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBL1I64VNVPROC :: #type (index: GLuint, v: *GLint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBL2I64VNVPROC :: #type (index: GLuint, v: *GLint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBL3I64VNVPROC :: #type (index: GLuint, v: *GLint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBL4I64VNVPROC :: #type (index: GLuint, v: *GLint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBL1UI64NVPROC :: #type (index: GLuint, x: GLuint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBL2UI64NVPROC :: #type (index: GLuint, x: GLuint64EXT, y: GLuint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBL3UI64NVPROC :: #type (index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBL4UI64NVPROC :: #type (index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBL1UI64VNVPROC :: #type (index: GLuint, v: *GLuint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBL2UI64VNVPROC :: #type (index: GLuint, v: *GLuint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBL3UI64VNVPROC :: #type (index: GLuint, v: *GLuint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBL4UI64VNVPROC :: #type (index: GLuint, v: *GLuint64EXT) -> void #c_call;
PFNGLGETVERTEXATTRIBLI64VNVPROC :: #type (index: GLuint, pname: GLenum, params: *GLint64EXT) -> void #c_call;
PFNGLGETVERTEXATTRIBLUI64VNVPROC :: #type (index: GLuint, pname: GLenum, params: *GLuint64EXT) -> void #c_call;
PFNGLVERTEXATTRIBLFORMATNVPROC :: #type (index: GLuint, size: GLint, type: GLenum, stride: GLsizei) -> void #c_call;

PFNGLBUFFERADDRESSRANGENVPROC :: #type (pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr) -> void #c_call;
PFNGLVERTEXFORMATNVPROC :: #type (size: GLint, type: GLenum, stride: GLsizei) -> void #c_call;
PFNGLNORMALFORMATNVPROC :: #type (type: GLenum, stride: GLsizei) -> void #c_call;
PFNGLCOLORFORMATNVPROC :: #type (size: GLint, type: GLenum, stride: GLsizei) -> void #c_call;
PFNGLINDEXFORMATNVPROC :: #type (type: GLenum, stride: GLsizei) -> void #c_call;
PFNGLTEXCOORDFORMATNVPROC :: #type (size: GLint, type: GLenum, stride: GLsizei) -> void #c_call;
PFNGLEDGEFLAGFORMATNVPROC :: #type (stride: GLsizei) -> void #c_call;
PFNGLSECONDARYCOLORFORMATNVPROC :: #type (size: GLint, type: GLenum, stride: GLsizei) -> void #c_call;
PFNGLFOGCOORDFORMATNVPROC :: #type (type: GLenum, stride: GLsizei) -> void #c_call;
PFNGLVERTEXATTRIBFORMATNVPROC :: #type (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei) -> void #c_call;
PFNGLVERTEXATTRIBIFORMATNVPROC :: #type (index: GLuint, size: GLint, type: GLenum, stride: GLsizei) -> void #c_call;
PFNGLGETINTEGERUI64I_VNVPROC :: #type (value: GLenum, index: GLuint, result: *GLuint64EXT) -> void #c_call;

PFNGLVIEWPORTSWIZZLENVPROC :: #type (index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum) -> void #c_call;

PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC :: #type (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei) -> void #c_call;

#scope_file

libgl :: #library,system "libGL";
